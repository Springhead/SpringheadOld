/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "3"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif

/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif


/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a funtion in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}




/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. */
static VALUE swig_ruby_trackings;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete = 0;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects.  Also make sure to tell
     the garabage collector about the hash table. */
  swig_ruby_trackings = rb_hash_new();
  rb_gc_register_address(&swig_ruby_trackings);
  
  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  unsigned long value = (unsigned long) ptr;
  return LONG2NUM(value);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  unsigned long value = (unsigned long) object;
  return LONG2NUM(value);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* First convert the Ruby number to a C number */
  unsigned long value = NUM2LONG(reference);
  return (VALUE) value;
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule()	
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


static VALUE _mSWIG = Qnil;
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    if (sklass->trackObjects) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "__swigtype__");
        char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), (own ? VOIDFUNC(sklass->destroy) : 0), ptr);

    /* If tracking is on for this class then track this object. */
    if (sklass->trackObjects) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    }
    *ptr = SWIG_TypeCast(tc, vptr);
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void)
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Affine2d swig_types[0]
#define SWIGTYPE_p_Affine2f swig_types[1]
#define SWIGTYPE_p_Affined swig_types[2]
#define SWIGTYPE_p_Affinef swig_types[3]
#define SWIGTYPE_p_Matrix2d swig_types[4]
#define SWIGTYPE_p_Matrix2f swig_types[5]
#define SWIGTYPE_p_Matrix3d swig_types[6]
#define SWIGTYPE_p_Matrix3f swig_types[7]
#define SWIGTYPE_p_Posed swig_types[8]
#define SWIGTYPE_p_Quaterniond swig_types[9]
#define SWIGTYPE_p_Vec2d swig_types[10]
#define SWIGTYPE_p_Vec2f swig_types[11]
#define SWIGTYPE_p_Vec3d swig_types[12]
#define SWIGTYPE_p_Vec3f swig_types[13]
#define SWIGTYPE_p_Vec4d swig_types[14]
#define SWIGTYPE_p_Vec4f swig_types[15]
#define SWIGTYPE_p_char swig_types[16]
static swig_type_info *swig_types[18];
static swig_module_info swig_module = {swig_types, 17, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_PTM
#define SWIG_name    "PTM"

static VALUE mPTM;

#define SWIGVERSION 0x010331 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#undef write			// std
#undef read				// std
#undef CreateWindow		// FWAppGLUT


#ifdef _MSC_VER
# pragma warning(disable: 4311 4312)
#endif	


#include "Base/TQuaternion.h"
#include "Base/Affine.h"
using namespace PTM;
using namespace Spr;


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = (type == T_FLOAT ? NUM2DBL(obj) : (type == T_FIXNUM ? (double) FIX2INT(obj) : rb_big2dbl(obj)));
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   rb_float_new 


#include <float.h>


SWIGINTERN int
SWIG_AsVal_float (VALUE obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


/*@SWIG:%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (VALUE obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


#include <limits.h>
#ifndef LLONG_MIN
# define LLONG_MIN	LONG_LONG_MIN
#endif
#ifndef LLONG_MAX
# define LLONG_MAX	LONG_LONG_MAX
#endif
#ifndef ULLONG_MAX
# define ULLONG_MAX	ULONG_LONG_MAX
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN float Vec2f___getitem__(Vec2f *self,size_t index){
	return self->operator[](index);
}
SWIGINTERN void Vec2f___setitem__(Vec2f *self,size_t index,float val){
	self->operator[](index) = val;
}
SWIGINTERN Vec2f Vec2f___add__(Vec2f *self,Vec2f v){
	return *self + v;
}
SWIGINTERN Vec2f Vec2f___sub__(Vec2f *self,Vec2f v){
	return *self - v;
}
SWIGINTERN Vec2f Vec2f___mul____SWIG_0(Vec2f *self,float k){
	return *self * k;
}
SWIGINTERN float Vec2f___mul____SWIG_1(Vec2f *self,Vec2f v){
	return *self * v;
}
SWIGINTERN double Vec2d___getitem__(Vec2d *self,size_t index){
	return self->operator[](index);
}
SWIGINTERN void Vec2d___setitem__(Vec2d *self,size_t index,double val){
	self->operator[](index) = val;
}
SWIGINTERN Vec2d Vec2d___add__(Vec2d *self,Vec2d v){
	return *self + v;
}
SWIGINTERN Vec2d Vec2d___sub__(Vec2d *self,Vec2d v){
	return *self - v;
}
SWIGINTERN Vec2d Vec2d___mul____SWIG_0(Vec2d *self,double k){
	return *self * k;
}
SWIGINTERN double Vec2d___mul____SWIG_1(Vec2d *self,Vec2d v){
	return *self * v;
}
SWIGINTERN float Vec3f___getitem__(Vec3f *self,size_t index){
	return self->operator[](index);
}
SWIGINTERN void Vec3f___setitem__(Vec3f *self,size_t index,float val){
	self->operator[](index) = val;
}
SWIGINTERN Vec3f Vec3f___add__(Vec3f *self,Vec3f v){
	return *self + v;
}
SWIGINTERN Vec3f Vec3f___sub__(Vec3f *self,Vec3f v){
	return *self - v;
}
SWIGINTERN Vec3f Vec3f___mul____SWIG_0(Vec3f *self,float k){
	return *self * k;
}
SWIGINTERN float Vec3f___mul____SWIG_1(Vec3f *self,Vec3f v){
	return *self * v;
}
SWIGINTERN double Vec3d___getitem__(Vec3d *self,size_t index){
	return self->operator[](index);
}
SWIGINTERN void Vec3d___setitem__(Vec3d *self,size_t index,double val){
	self->operator[](index) = val;
}
SWIGINTERN Vec3d Vec3d___add__(Vec3d *self,Vec3d v){
	return *self + v;
}
SWIGINTERN Vec3d Vec3d___sub__(Vec3d *self,Vec3d v){
	return *self - v;
}
SWIGINTERN Vec3d Vec3d___mul____SWIG_0(Vec3d *self,double k){
	return *self * k;
}
SWIGINTERN double Vec3d___mul____SWIG_1(Vec3d *self,Vec3d v){
	return *self * v;
}
SWIGINTERN float Vec4f___getitem__(Vec4f *self,size_t index){
	return self->operator[](index);
}
SWIGINTERN void Vec4f___setitem__(Vec4f *self,size_t index,float val){
	self->operator[](index) = val;
}
SWIGINTERN Vec4f Vec4f___add__(Vec4f *self,Vec4f v){
	return *self + v;
}
SWIGINTERN Vec4f Vec4f___sub__(Vec4f *self,Vec4f v){
	return *self - v;
}
SWIGINTERN Vec4f Vec4f___mul____SWIG_0(Vec4f *self,float k){
	return *self * k;
}
SWIGINTERN float Vec4f___mul____SWIG_1(Vec4f *self,Vec4f v){
	return *self * v;
}
SWIGINTERN double Vec4d___getitem__(Vec4d *self,size_t index){
	return self->operator[](index);
}
SWIGINTERN void Vec4d___setitem__(Vec4d *self,size_t index,double val){
	self->operator[](index) = val;
}
SWIGINTERN Vec4d Vec4d___add__(Vec4d *self,Vec4d v){
	return *self + v;
}
SWIGINTERN Vec4d Vec4d___sub__(Vec4d *self,Vec4d v){
	return *self - v;
}
SWIGINTERN Vec4d Vec4d___mul____SWIG_0(Vec4d *self,double k){
	return *self * k;
}
SWIGINTERN double Vec4d___mul____SWIG_1(Vec4d *self,Vec4d v){
	return *self * v;
}

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    


    char *cstr = STR2CSTR(obj);
    
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(VALUE obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


/*@SWIG:%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (VALUE obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}

SWIGINTERN float Matrix2f___getitem__(Matrix2f *self,size_t r,size_t c){
	return (*self)[r][c];
}
SWIGINTERN void Matrix2f___setitem__(Matrix2f *self,size_t r,size_t c,float val){
	(*self)[r][c] = val;
}
SWIGINTERN Matrix2f Matrix2f___add__(Matrix2f *self,Matrix2f m){
	return *self + m;
}
SWIGINTERN Matrix2f Matrix2f___sub__(Matrix2f *self,Matrix2f m){
	return *self - m;
}
SWIGINTERN Matrix2f Matrix2f___mul____SWIG_0(Matrix2f *self,Matrix2f m){
	return *self * m;
}
SWIGINTERN Vec2f Matrix2f___mul____SWIG_1(Matrix2f *self,Vec2f v){
	return *self * v;
}
SWIGINTERN Matrix2f Matrix2f___mul____SWIG_2(Matrix2f *self,float k){
	return *self * k;
}
SWIGINTERN double Matrix2d___getitem__(Matrix2d *self,size_t r,size_t c){
	return (*self)[r][c];
}
SWIGINTERN void Matrix2d___setitem__(Matrix2d *self,size_t r,size_t c,double val){
	(*self)[r][c] = val;
}
SWIGINTERN Matrix2d Matrix2d___add__(Matrix2d *self,Matrix2d m){
	return *self + m;
}
SWIGINTERN Matrix2d Matrix2d___sub__(Matrix2d *self,Matrix2d m){
	return *self - m;
}
SWIGINTERN Matrix2d Matrix2d___mul____SWIG_0(Matrix2d *self,Matrix2d m){
	return *self * m;
}
SWIGINTERN Vec2d Matrix2d___mul____SWIG_1(Matrix2d *self,Vec2d v){
	return *self * v;
}
SWIGINTERN Matrix2d Matrix2d___mul____SWIG_2(Matrix2d *self,double k){
	return *self * k;
}
SWIGINTERN float Matrix3f___getitem__(Matrix3f *self,size_t r,size_t c){
	return (*self)[r][c];
}
SWIGINTERN void Matrix3f___setitem__(Matrix3f *self,size_t r,size_t c,float val){
	(*self)[r][c] = val;
}
SWIGINTERN Matrix3f Matrix3f___add__(Matrix3f *self,Matrix3f m){
	return *self + m;
}
SWIGINTERN Matrix3f Matrix3f___sub__(Matrix3f *self,Matrix3f m){
	return *self - m;
}
SWIGINTERN Matrix3f Matrix3f___mul____SWIG_0(Matrix3f *self,Matrix3f m){
	return *self * m;
}
SWIGINTERN Vec3f Matrix3f___mul____SWIG_1(Matrix3f *self,Vec3f v){
	return *self * v;
}
SWIGINTERN Matrix3f Matrix3f___mul____SWIG_2(Matrix3f *self,float k){
	return *self * k;
}

SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}

SWIGINTERN double Matrix3d___getitem__(Matrix3d *self,size_t r,size_t c){
	return (*self)[r][c];
}
SWIGINTERN void Matrix3d___setitem__(Matrix3d *self,size_t r,size_t c,double val){
	(*self)[r][c] = val;
}
SWIGINTERN Matrix3d Matrix3d___add__(Matrix3d *self,Matrix3d m){
	return *self + m;
}
SWIGINTERN Matrix3d Matrix3d___sub__(Matrix3d *self,Matrix3d m){
	return *self - m;
}
SWIGINTERN Matrix3d Matrix3d___mul____SWIG_0(Matrix3d *self,Matrix3d m){
	return *self * m;
}
SWIGINTERN Vec3d Matrix3d___mul____SWIG_1(Matrix3d *self,Vec3d v){
	return *self * v;
}
SWIGINTERN Matrix3d Matrix3d___mul____SWIG_2(Matrix3d *self,double k){
	return *self * k;
}
SWIGINTERN float Affine2f___getitem__(Affine2f *self,size_t r,size_t c){
	return (*self)[r][c];
}
SWIGINTERN void Affine2f___setitem__(Affine2f *self,size_t r,size_t c,float val){
	(*self)[r][c] = val;
}
SWIGINTERN Affine2f Affine2f___add__(Affine2f *self,Affine2f m){
	return *self + m;
}
SWIGINTERN Affine2f Affine2f___sub__(Affine2f *self,Affine2f m){
	return *self - m;
}
SWIGINTERN Affine2f Affine2f___mul____SWIG_0(Affine2f *self,Affine2f m){
	return *self * m;
}
SWIGINTERN Vec2f Affine2f___mul____SWIG_1(Affine2f *self,Vec2f v){
	return *self * v;
}
SWIGINTERN Affine2f Affine2f___mul____SWIG_2(Affine2f *self,float k){
	return *self * k;
}
SWIGINTERN void Affine2f_setTrn(Affine2f *self,Vec2f const &v){
		self->Trn() = v;
	}
SWIGINTERN Vec2f Affine2f_getTrn(Affine2f *self){
		return self->Trn();
	}
SWIGINTERN void Affine2f_setPos(Affine2f *self,Vec2f const &v){
		self->Pos() = v;
	}
SWIGINTERN Vec2f Affine2f_getPos(Affine2f *self){
		return self->Pos();
	}
SWIGINTERN void Affine2f_setRot(Affine2f *self,Matrix2f const &m){
		self->Rot() = m;
	}
SWIGINTERN Matrix2f Affine2f_getRot(Affine2f *self){
		return self->Rot();
	}
SWIGINTERN float Affinef___getitem__(Affinef *self,size_t r,size_t c){
	return (*self)[r][c];
}
SWIGINTERN void Affinef___setitem__(Affinef *self,size_t r,size_t c,float val){
	(*self)[r][c] = val;
}
SWIGINTERN Affinef Affinef___add__(Affinef *self,Affinef m){
	return *self + m;
}
SWIGINTERN Affinef Affinef___sub__(Affinef *self,Affinef m){
	return *self - m;
}
SWIGINTERN Affinef Affinef___mul____SWIG_0(Affinef *self,Affinef m){
	return *self * m;
}
SWIGINTERN Vec3f Affinef___mul____SWIG_1(Affinef *self,Vec3f v){
	return *self * v;
}
SWIGINTERN Affinef Affinef___mul____SWIG_2(Affinef *self,float k){
	return *self * k;
}
SWIGINTERN void Affinef_setTrn(Affinef *self,Vec3f const &v){
		self->Trn() = v;
	}
SWIGINTERN Vec3f Affinef_getTrn(Affinef *self){
		return self->Trn();
	}
SWIGINTERN void Affinef_setPos(Affinef *self,Vec3f const &v){
		self->Pos() = v;
	}
SWIGINTERN Vec3f Affinef_getPos(Affinef *self){
		return self->Pos();
	}
SWIGINTERN void Affinef_setRot(Affinef *self,Matrix3f const &m){
		self->Rot() = m;
	}
SWIGINTERN Matrix3f Affinef_getRot(Affinef *self){
		return self->Rot();
	}
SWIGINTERN double Affine2d___getitem__(Affine2d *self,size_t r,size_t c){
	return (*self)[r][c];
}
SWIGINTERN void Affine2d___setitem__(Affine2d *self,size_t r,size_t c,double val){
	(*self)[r][c] = val;
}
SWIGINTERN Affine2d Affine2d___add__(Affine2d *self,Affine2d m){
	return *self + m;
}
SWIGINTERN Affine2d Affine2d___sub__(Affine2d *self,Affine2d m){
	return *self - m;
}
SWIGINTERN Affine2d Affine2d___mul____SWIG_0(Affine2d *self,Affine2d m){
	return *self * m;
}
SWIGINTERN Vec2d Affine2d___mul____SWIG_1(Affine2d *self,Vec2d v){
	return *self * v;
}
SWIGINTERN Affine2d Affine2d___mul____SWIG_2(Affine2d *self,double k){
	return *self * k;
}
SWIGINTERN void Affine2d_setTrn(Affine2d *self,Vec2d const &v){
		self->Trn() = v;
	}
SWIGINTERN Vec2d Affine2d_getTrn(Affine2d *self){
		return self->Trn();
	}
SWIGINTERN void Affine2d_setPos(Affine2d *self,Vec2d const &v){
		self->Pos() = v;
	}
SWIGINTERN Vec2d Affine2d_getPos(Affine2d *self){
		return self->Pos();
	}
SWIGINTERN void Affine2d_setRot(Affine2d *self,Matrix2d const &m){
		self->Rot() = m;
	}
SWIGINTERN Matrix2d Affine2d_getRot(Affine2d *self){
		return self->Rot();
	}
SWIGINTERN double Affined___getitem__(Affined *self,size_t r,size_t c){
	return (*self)[r][c];
}
SWIGINTERN void Affined___setitem__(Affined *self,size_t r,size_t c,double val){
	(*self)[r][c] = val;
}
SWIGINTERN Affined Affined___add__(Affined *self,Affined m){
	return *self + m;
}
SWIGINTERN Affined Affined___sub__(Affined *self,Affined m){
	return *self - m;
}
SWIGINTERN Affined Affined___mul____SWIG_0(Affined *self,Affined m){
	return *self * m;
}
SWIGINTERN Vec3d Affined___mul____SWIG_1(Affined *self,Vec3d v){
	return *self * v;
}
SWIGINTERN Affined Affined___mul____SWIG_2(Affined *self,double k){
	return *self * k;
}
SWIGINTERN void Affined_setTrn(Affined *self,Vec3d const &v){
		self->Trn() = v;
	}
SWIGINTERN Vec3d Affined_getTrn(Affined *self){
		return self->Trn();
	}
SWIGINTERN void Affined_setPos(Affined *self,Vec3d const &v){
		self->Pos() = v;
	}
SWIGINTERN Vec3d Affined_getPos(Affined *self){
		return self->Pos();
	}
SWIGINTERN void Affined_setRot(Affined *self,Matrix3d const &m){
		self->Rot() = m;
	}
SWIGINTERN Matrix3d Affined_getRot(Affined *self){
		return self->Rot();
	}
SWIGINTERN double Quaterniond___getitem__(Quaterniond *self,size_t index){
		return self->operator[](index);
	}
SWIGINTERN void Quaterniond___setitem__(Quaterniond *self,size_t index,double val){
		self->operator[](index) = val;
	}
SWIGINTERN Quaterniond Quaterniond___add__(Quaterniond *self,Quaterniond q){
		return *self + q;
	}
SWIGINTERN Quaterniond Quaterniond___sub__(Quaterniond *self,Quaterniond q){
		return *self - q;
	}
SWIGINTERN Quaterniond Quaterniond___mul__(Quaterniond *self,Quaterniond q){
		return *self * q;	
	}
SWIGINTERN Vec3d Quaterniond_transform(Quaterniond *self,Vec3d v){
		return *self * v;
	}
SWIGINTERN void Quaterniond_setV(Quaterniond *self,Vec3d const &v){
		self->V() = v;
	}
SWIGINTERN Vec3d Quaterniond_getV(Quaterniond *self){
		return self->V();
	}
SWIGINTERN Vec3d Posed_transform(Posed *self,Vec3d v){
		return *self * v;
	}
SWIGINTERN Posed Posed___mul__(Posed *self,Posed p){
		return *self * p;
	}
SWIGINTERN void Posed_setPos(Posed *self,Vec3d const &v){
		self->Pos() = v;
	}
SWIGINTERN Vec3d Posed_getPos(Posed *self){
		return self->Pos();
	}
SWIGINTERN void Posed_setOri(Posed *self,Quaterniond const &q){
		self->Ori() = q;
	}
SWIGINTERN Quaterniond Posed_getOri(Posed *self){
		return self->Ori();
	}
SWIGINTERN VALUE
_wrap_Deg(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double result;
  double val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Deg" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)Deg(arg1);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Rad(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double result;
  double val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rad" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)Rad(arg1);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cVec2f;

SWIGINTERN VALUE
_wrap_Vec2f_x_set(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->x = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f_x_get(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  result = (float) ((arg1)->x);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f_y_set(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "y" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->y = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f_y_get(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  result = (float) ((arg1)->y);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f_clear(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f_norm(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  result = (double)(arg1)->norm();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f_square(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "square" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  result = (double)(arg1)->square();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f_resize(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resize" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f_size(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "size" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  result = (arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f_unit(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  Vec2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unit" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  result = (arg1)->unit();
  vresult = SWIG_NewPointerObj((new Vec2f(static_cast< const Vec2f& >(result))), SWIGTYPE_p_Vec2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f_unitize(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unitize" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  (arg1)->unitize();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f_Zero(int argc, VALUE *argv, VALUE self) {
  Vec2f result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Vec2f::Zero();
  vresult = SWIG_NewPointerObj((new Vec2f(static_cast< const Vec2f& >(result))), SWIGTYPE_p_Vec2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec2f__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec2f *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Vec2f *)new Vec2f();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec2f__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = 0 ;
  Vec2f *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec2f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2f" "', argument " "1"" of type '" "Vec2f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2f" "', argument " "1"" of type '" "Vec2f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  result = (Vec2f *)new Vec2f((Vec2f const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec2f__SWIG_2(int argc, VALUE *argv, VALUE self) {
  float *arg1 = (float *) 0 ;
  Vec2f *result = 0 ;
  float temp1[2] ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  
  for(int i = 0; i < 2; i++)
  temp1[i] = (float)(RARRAY(argv[0])->ptr[i]);
  arg1 = temp1;
  
  result = (Vec2f *)new Vec2f((float const *)arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Vec2f_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Vec2f_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Vec2f);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Vec2f__SWIG_3(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  float arg2 ;
  Vec2f *result = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Vec2f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (Vec2f *)new Vec2f(arg1,arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Vec2f(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Vec2f__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec2f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec2f__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    
    Check_Type(argv[0], T_ARRAY);
    _v = RARRAY(argv[0])->len == 2;
    
    if (_v) {
      return _wrap_new_Vec2f__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vec2f__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_Vec2f'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f___getitem__(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  size_t arg2 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (float)Vec2f___getitem__(arg1,arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f___setitem__(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  size_t arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__setitem__" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Vec2f___setitem__(arg1,arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f___add__(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  Vec2f arg2 ;
  Vec2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec2f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Vec2f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Vec2f""'");
    } else {
      arg2 = *(reinterpret_cast< Vec2f * >(argp2));
    }
  }
  result = Vec2f___add__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec2f(static_cast< const Vec2f& >(result))), SWIGTYPE_p_Vec2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f___sub__(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  Vec2f arg2 ;
  Vec2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec2f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "Vec2f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "Vec2f""'");
    } else {
      arg2 = *(reinterpret_cast< Vec2f * >(argp2));
    }
  }
  result = Vec2f___sub__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec2f(static_cast< const Vec2f& >(result))), SWIGTYPE_p_Vec2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  float arg2 ;
  Vec2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__mul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = Vec2f___mul____SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec2f(static_cast< const Vec2f& >(result))), SWIGTYPE_p_Vec2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2f___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = (Vec2f *) 0 ;
  Vec2f arg2 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Vec2f *""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec2f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Vec2f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Vec2f""'");
    } else {
      arg2 = *(reinterpret_cast< Vec2f * >(argp2));
    }
  }
  result = (float)Vec2f___mul____SWIG_1(arg1,arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vec2f___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec2f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec2f___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec2f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vec2f___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Vec2f___mul__'");
  return Qnil;
}


SWIGINTERN void
free_Vec2f(Vec2f *arg1) {
    delete arg1;
}

swig_class cVec2d;

SWIGINTERN VALUE
_wrap_Vec2d_x_set(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d_x_get(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  result = (double) ((arg1)->x);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d_y_set(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "y" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d_y_get(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  result = (double) ((arg1)->y);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d_clear(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d_norm(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  result = (double)(arg1)->norm();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d_square(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "square" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  result = (double)(arg1)->square();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d_resize(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resize" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d_size(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "size" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  result = (arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d_unit(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  Vec2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unit" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  result = (arg1)->unit();
  vresult = SWIG_NewPointerObj((new Vec2d(static_cast< const Vec2d& >(result))), SWIGTYPE_p_Vec2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d_unitize(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unitize" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  (arg1)->unitize();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d_Zero(int argc, VALUE *argv, VALUE self) {
  Vec2d result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Vec2d::Zero();
  vresult = SWIG_NewPointerObj((new Vec2d(static_cast< const Vec2d& >(result))), SWIGTYPE_p_Vec2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec2d__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec2d *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Vec2d *)new Vec2d();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec2d__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = 0 ;
  Vec2d *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2d" "', argument " "1"" of type '" "Vec2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2d" "', argument " "1"" of type '" "Vec2d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  result = (Vec2d *)new Vec2d((Vec2d const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec2d__SWIG_2(int argc, VALUE *argv, VALUE self) {
  double *arg1 = (double *) 0 ;
  Vec2d *result = 0 ;
  double temp1[2] ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  
  for(int i = 0; i < 2; i++)
  temp1[i] = (double)(RARRAY(argv[0])->ptr[i]);
  arg1 = temp1;
  
  result = (Vec2d *)new Vec2d((double const *)arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Vec2d_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Vec2d_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Vec2d);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Vec2d__SWIG_3(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  Vec2d *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Vec2d" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2d" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (Vec2d *)new Vec2d(arg1,arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Vec2d(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Vec2d__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec2d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec2d__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    
    Check_Type(argv[0], T_ARRAY);
    _v = RARRAY(argv[0])->len == 2;
    
    if (_v) {
      return _wrap_new_Vec2d__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vec2d__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_Vec2d'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d___getitem__(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  size_t arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (double)Vec2d___getitem__(arg1,arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d___setitem__(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  size_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__setitem__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  Vec2d___setitem__(arg1,arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d___add__(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  Vec2d arg2 ;
  Vec2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec2d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Vec2d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Vec2d""'");
    } else {
      arg2 = *(reinterpret_cast< Vec2d * >(argp2));
    }
  }
  result = Vec2d___add__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec2d(static_cast< const Vec2d& >(result))), SWIGTYPE_p_Vec2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d___sub__(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  Vec2d arg2 ;
  Vec2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec2d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "Vec2d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "Vec2d""'");
    } else {
      arg2 = *(reinterpret_cast< Vec2d * >(argp2));
    }
  }
  result = Vec2d___sub__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec2d(static_cast< const Vec2d& >(result))), SWIGTYPE_p_Vec2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  double arg2 ;
  Vec2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = Vec2d___mul____SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec2d(static_cast< const Vec2d& >(result))), SWIGTYPE_p_Vec2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec2d___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = (Vec2d *) 0 ;
  Vec2d arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Vec2d *""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec2d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Vec2d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Vec2d""'");
    } else {
      arg2 = *(reinterpret_cast< Vec2d * >(argp2));
    }
  }
  result = (double)Vec2d___mul____SWIG_1(arg1,arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vec2d___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec2d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec2d___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec2d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vec2d___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Vec2d___mul__'");
  return Qnil;
}


SWIGINTERN void
free_Vec2d(Vec2d *arg1) {
    delete arg1;
}

swig_class cVec3f;

SWIGINTERN VALUE
_wrap_Vec3f_x_set(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->x = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f_x_get(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (float) ((arg1)->x);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f_y_set(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "y" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->y = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f_y_get(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (float) ((arg1)->y);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f_z_set(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "z" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "z" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->z = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f_z_get(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "z" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (float) ((arg1)->z);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f_clear(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f_norm(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (double)(arg1)->norm();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f_square(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "square" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (double)(arg1)->square();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f_resize(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resize" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f_size(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "size" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f_unit(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unit" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (arg1)->unit();
  vresult = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f_unitize(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unitize" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  (arg1)->unitize();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f_Zero(int argc, VALUE *argv, VALUE self) {
  Vec3f result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Vec3f::Zero();
  vresult = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec3f__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec3f *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Vec3f *)new Vec3f();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec3f__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = 0 ;
  Vec3f *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3f" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3f" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = (Vec3f *)new Vec3f((Vec3f const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec3f__SWIG_2(int argc, VALUE *argv, VALUE self) {
  float *arg1 = (float *) 0 ;
  Vec3f *result = 0 ;
  float temp1[3] ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  
  for(int i = 0; i < 3; i++)
  temp1[i] = (float)(RARRAY(argv[0])->ptr[i]);
  arg1 = temp1;
  
  result = (Vec3f *)new Vec3f((float const *)arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Vec3f_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Vec3f_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Vec3f);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Vec3f__SWIG_3(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Vec3f *result = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Vec3f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec3f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec3f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = (Vec3f *)new Vec3f(arg1,arg2,arg3);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Vec3f(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Vec3f__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec3f__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    
    Check_Type(argv[0], T_ARRAY);
    _v = RARRAY(argv[0])->len == 3;
    
    if (_v) {
      return _wrap_new_Vec3f__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Vec3f__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_Vec3f'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f___getitem__(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  size_t arg2 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (float)Vec3f___getitem__(arg1,arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f___setitem__(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  size_t arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__setitem__" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Vec3f___setitem__(arg1,arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f___add__(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f arg2 ;
  Vec3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      arg2 = *(reinterpret_cast< Vec3f * >(argp2));
    }
  }
  result = Vec3f___add__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f___sub__(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f arg2 ;
  Vec3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      arg2 = *(reinterpret_cast< Vec3f * >(argp2));
    }
  }
  result = Vec3f___sub__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  float arg2 ;
  Vec3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__mul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = Vec3f___mul____SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3f___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = (Vec3f *) 0 ;
  Vec3f arg2 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Vec3f *""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      arg2 = *(reinterpret_cast< Vec3f * >(argp2));
    }
  }
  result = (float)Vec3f___mul____SWIG_1(arg1,arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vec3f___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec3f___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vec3f___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Vec3f___mul__'");
  return Qnil;
}


SWIGINTERN void
free_Vec3f(Vec3f *arg1) {
    delete arg1;
}

swig_class cVec3d;

SWIGINTERN VALUE
_wrap_Vec3d_x_set(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d_x_get(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  result = (double) ((arg1)->x);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d_y_set(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "y" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d_y_get(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  result = (double) ((arg1)->y);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d_z_set(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "z" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "z" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->z = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d_z_get(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "z" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  result = (double) ((arg1)->z);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d_clear(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d_norm(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  result = (double)(arg1)->norm();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d_square(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "square" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  result = (double)(arg1)->square();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d_resize(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resize" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d_size(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "size" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  result = (arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d_unit(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unit" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  result = (arg1)->unit();
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d_unitize(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unitize" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  (arg1)->unitize();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d_Zero(int argc, VALUE *argv, VALUE self) {
  Vec3d result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Vec3d::Zero();
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec3d__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec3d *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Vec3d *)new Vec3d();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec3d__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = 0 ;
  Vec3d *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec3d" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec3d" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  result = (Vec3d *)new Vec3d((Vec3d const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec3d__SWIG_2(int argc, VALUE *argv, VALUE self) {
  double *arg1 = (double *) 0 ;
  Vec3d *result = 0 ;
  double temp1[3] ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  
  for(int i = 0; i < 3; i++)
  temp1[i] = (double)(RARRAY(argv[0])->ptr[i]);
  arg1 = temp1;
  
  result = (Vec3d *)new Vec3d((double const *)arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Vec3d_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Vec3d_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Vec3d);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Vec3d__SWIG_3(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Vec3d *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Vec3d" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec3d" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec3d" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (Vec3d *)new Vec3d(arg1,arg2,arg3);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Vec3d(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Vec3d__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec3d__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    
    Check_Type(argv[0], T_ARRAY);
    _v = RARRAY(argv[0])->len == 3;
    
    if (_v) {
      return _wrap_new_Vec3d__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Vec3d__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_Vec3d'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d___getitem__(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  size_t arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (double)Vec3d___getitem__(arg1,arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d___setitem__(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  size_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__setitem__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  Vec3d___setitem__(arg1,arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d___add__(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  Vec3d arg2 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Vec3d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Vec3d""'");
    } else {
      arg2 = *(reinterpret_cast< Vec3d * >(argp2));
    }
  }
  result = Vec3d___add__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d___sub__(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  Vec3d arg2 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "Vec3d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "Vec3d""'");
    } else {
      arg2 = *(reinterpret_cast< Vec3d * >(argp2));
    }
  }
  result = Vec3d___sub__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  double arg2 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = Vec3d___mul____SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec3d___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = (Vec3d *) 0 ;
  Vec3d arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Vec3d *""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Vec3d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Vec3d""'");
    } else {
      arg2 = *(reinterpret_cast< Vec3d * >(argp2));
    }
  }
  result = (double)Vec3d___mul____SWIG_1(arg1,arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vec3d___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec3d___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vec3d___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Vec3d___mul__'");
  return Qnil;
}


SWIGINTERN void
free_Vec3d(Vec3d *arg1) {
    delete arg1;
}

swig_class cVec4f;

SWIGINTERN VALUE
_wrap_Vec4f_x_set(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->x = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f_x_get(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (float) ((arg1)->x);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f_y_set(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "y" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->y = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f_y_get(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (float) ((arg1)->y);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f_z_set(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "z" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "z" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->z = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f_z_get(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "z" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (float) ((arg1)->z);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f_w_set(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "w" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "w" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->w = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f_w_get(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "w" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (float) ((arg1)->w);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f_clear(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f_norm(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (double)(arg1)->norm();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f_square(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "square" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (double)(arg1)->square();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f_resize(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resize" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f_size(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "size" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f_unit(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  Vec4f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unit" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (arg1)->unit();
  vresult = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f_unitize(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unitize" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  (arg1)->unitize();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f_Zero(int argc, VALUE *argv, VALUE self) {
  Vec4f result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Vec4f::Zero();
  vresult = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec4f__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec4f *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Vec4f *)new Vec4f();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec4f__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = 0 ;
  Vec4f *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec4f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4f" "', argument " "1"" of type '" "Vec4f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec4f" "', argument " "1"" of type '" "Vec4f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = (Vec4f *)new Vec4f((Vec4f const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec4f__SWIG_2(int argc, VALUE *argv, VALUE self) {
  float *arg1 = (float *) 0 ;
  Vec4f *result = 0 ;
  float temp1[4] ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  
  for(int i = 0; i < 4; i++)
  temp1[i] = (float)(RARRAY(argv[0])->ptr[i]);
  arg1 = temp1;
  
  result = (Vec4f *)new Vec4f((float const *)arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Vec4f_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Vec4f_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Vec4f);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Vec4f__SWIG_3(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Vec4f *result = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Vec4f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec4f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec4f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Vec4f" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (Vec4f *)new Vec4f(arg1,arg2,arg3,arg4);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Vec4f(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Vec4f__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec4f__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    
    Check_Type(argv[0], T_ARRAY);
    _v = RARRAY(argv[0])->len == 4;
    
    if (_v) {
      return _wrap_new_Vec4f__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Vec4f__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_Vec4f'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f___getitem__(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  size_t arg2 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (float)Vec4f___getitem__(arg1,arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f___setitem__(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  size_t arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__setitem__" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  Vec4f___setitem__(arg1,arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f___add__(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  Vec4f arg2 ;
  Vec4f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec4f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Vec4f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Vec4f""'");
    } else {
      arg2 = *(reinterpret_cast< Vec4f * >(argp2));
    }
  }
  result = Vec4f___add__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f___sub__(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  Vec4f arg2 ;
  Vec4f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec4f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "Vec4f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "Vec4f""'");
    } else {
      arg2 = *(reinterpret_cast< Vec4f * >(argp2));
    }
  }
  result = Vec4f___sub__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  float arg2 ;
  Vec4f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__mul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = Vec4f___mul____SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4f___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = (Vec4f *) 0 ;
  Vec4f arg2 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Vec4f *""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec4f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Vec4f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Vec4f""'");
    } else {
      arg2 = *(reinterpret_cast< Vec4f * >(argp2));
    }
  }
  result = (float)Vec4f___mul____SWIG_1(arg1,arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vec4f___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec4f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec4f___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vec4f___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Vec4f___mul__'");
  return Qnil;
}


SWIGINTERN void
free_Vec4f(Vec4f *arg1) {
    delete arg1;
}

swig_class cVec4d;

SWIGINTERN VALUE
_wrap_Vec4d_x_set(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d_x_get(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  result = (double) ((arg1)->x);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d_y_set(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "y" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d_y_get(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  result = (double) ((arg1)->y);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d_z_set(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "z" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "z" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->z = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d_z_get(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "z" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  result = (double) ((arg1)->z);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d_w_set(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "w" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "w" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->w = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d_w_get(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "w" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  result = (double) ((arg1)->w);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d_clear(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d_norm(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  result = (double)(arg1)->norm();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d_square(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "square" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  result = (double)(arg1)->square();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d_resize(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resize" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d_size(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "size" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  result = (arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d_unit(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  Vec4d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unit" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  result = (arg1)->unit();
  vresult = SWIG_NewPointerObj((new Vec4d(static_cast< const Vec4d& >(result))), SWIGTYPE_p_Vec4d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d_unitize(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unitize" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  (arg1)->unitize();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d_Zero(int argc, VALUE *argv, VALUE self) {
  Vec4d result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Vec4d::Zero();
  vresult = SWIG_NewPointerObj((new Vec4d(static_cast< const Vec4d& >(result))), SWIGTYPE_p_Vec4d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec4d__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec4d *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Vec4d *)new Vec4d();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec4d__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = 0 ;
  Vec4d *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec4d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec4d" "', argument " "1"" of type '" "Vec4d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec4d" "', argument " "1"" of type '" "Vec4d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  result = (Vec4d *)new Vec4d((Vec4d const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vec4d__SWIG_2(int argc, VALUE *argv, VALUE self) {
  double *arg1 = (double *) 0 ;
  Vec4d *result = 0 ;
  double temp1[4] ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  
  for(int i = 0; i < 4; i++)
  temp1[i] = (double)(RARRAY(argv[0])->ptr[i]);
  arg1 = temp1;
  
  result = (Vec4d *)new Vec4d((double const *)arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Vec4d_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Vec4d_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Vec4d);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Vec4d__SWIG_3(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Vec4d *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Vec4d" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec4d" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vec4d" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Vec4d" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (Vec4d *)new Vec4d(arg1,arg2,arg3,arg4);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Vec4d(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Vec4d__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec4d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vec4d__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    
    Check_Type(argv[0], T_ARRAY);
    _v = RARRAY(argv[0])->len == 4;
    
    if (_v) {
      return _wrap_new_Vec4d__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Vec4d__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_Vec4d'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d___getitem__(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  size_t arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (double)Vec4d___getitem__(arg1,arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d___setitem__(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  size_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__setitem__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  Vec4d___setitem__(arg1,arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d___add__(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  Vec4d arg2 ;
  Vec4d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec4d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Vec4d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Vec4d""'");
    } else {
      arg2 = *(reinterpret_cast< Vec4d * >(argp2));
    }
  }
  result = Vec4d___add__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec4d(static_cast< const Vec4d& >(result))), SWIGTYPE_p_Vec4d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d___sub__(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  Vec4d arg2 ;
  Vec4d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec4d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "Vec4d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "Vec4d""'");
    } else {
      arg2 = *(reinterpret_cast< Vec4d * >(argp2));
    }
  }
  result = Vec4d___sub__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec4d(static_cast< const Vec4d& >(result))), SWIGTYPE_p_Vec4d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  double arg2 ;
  Vec4d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = Vec4d___mul____SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec4d(static_cast< const Vec4d& >(result))), SWIGTYPE_p_Vec4d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vec4d___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = (Vec4d *) 0 ;
  Vec4d arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Vec4d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Vec4d *""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec4d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Vec4d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Vec4d""'");
    } else {
      arg2 = *(reinterpret_cast< Vec4d * >(argp2));
    }
  }
  result = (double)Vec4d___mul____SWIG_1(arg1,arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vec4d___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec4d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec4d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vec4d___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec4d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vec4d___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Vec4d___mul__'");
  return Qnil;
}


SWIGINTERN void
free_Vec4d(Vec4d *arg1) {
    delete arg1;
}

swig_class cMatrix2f;

SWIGINTERN VALUE
_wrap_Matrix2f_xx_set(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xx" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xx" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->xx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_xx_get(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xx" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  result = (float) ((arg1)->xx);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_xy_set(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xy" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xy" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->xy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_xy_get(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xy" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  result = (float) ((arg1)->xy);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_yx_set(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yx" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yx" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->yx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_yx_get(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yx" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  result = (float) ((arg1)->yx);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_yy_set(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yy" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yy" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->yy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_yy_get(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yy" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  result = (float) ((arg1)->yy);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_clear(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_col(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  size_t arg2 ;
  Vec2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "col" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "col" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->col(arg2);
  vresult = SWIG_NewPointerObj((new Vec2f(static_cast< const Vec2f& >(result))), SWIGTYPE_p_Vec2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_row(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  size_t arg2 ;
  Vec2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "row" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "row" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->row(arg2);
  vresult = SWIG_NewPointerObj((new Vec2f(static_cast< const Vec2f& >(result))), SWIGTYPE_p_Vec2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_det(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "det" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  result = (double)(arg1)->det();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_height(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "height" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  result = (arg1)->height();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_width(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "width" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  result = (arg1)->width();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_resize(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resize" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "resize" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->resize(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_trans(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  Matrix2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trans" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  result = (arg1)->trans();
  vresult = SWIG_NewPointerObj((new Matrix2f(static_cast< const Matrix2f& >(result))), SWIGTYPE_p_Matrix2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_inv(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  Matrix2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "inv" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  result = (arg1)->inv();
  vresult = SWIG_NewPointerObj((new Matrix2f(static_cast< const Matrix2f& >(result))), SWIGTYPE_p_Matrix2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Matrix2f__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix2f *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Matrix2f *)new Matrix2f();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Matrix2f__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = 0 ;
  Vec2f *arg2 = 0 ;
  Matrix2f *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec2f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2f" "', argument " "1"" of type '" "Vec2f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix2f" "', argument " "1"" of type '" "Vec2f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix2f" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix2f" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2f * >(argp2);
  result = (Matrix2f *)new Matrix2f((Vec2f const &)*arg1,(Vec2f const &)*arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Matrix2f_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Matrix2f_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Matrix2f);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Matrix2f__SWIG_2(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Matrix2f *result = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix2f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix2f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix2f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix2f" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (Matrix2f *)new Matrix2f(arg1,arg2,arg3,arg4);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Matrix2f(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Matrix2f__SWIG_0(nargs, args, self);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec2f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Matrix2f__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Matrix2f__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_Matrix2f'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_Zero(int argc, VALUE *argv, VALUE self) {
  Matrix2f result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Matrix2f::Zero();
  vresult = SWIG_NewPointerObj((new Matrix2f(static_cast< const Matrix2f& >(result))), SWIGTYPE_p_Matrix2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_Unit(int argc, VALUE *argv, VALUE self) {
  Matrix2f result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Matrix2f::Unit();
  vresult = SWIG_NewPointerObj((new Matrix2f(static_cast< const Matrix2f& >(result))), SWIGTYPE_p_Matrix2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_Diag(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  float arg2 ;
  Matrix2f result;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix2f::Diag" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix2f::Diag" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = Matrix2f::Diag(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix2f(static_cast< const Matrix2f& >(result))), SWIGTYPE_p_Matrix2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_Rot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  Matrix2f result;
  float val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix2f::Rot" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = Matrix2f::Rot(arg1);
  vresult = SWIG_NewPointerObj((new Matrix2f(static_cast< const Matrix2f& >(result))), SWIGTYPE_p_Matrix2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_Rot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec2f *arg1 = 0 ;
  char arg2 ;
  Matrix2f result;
  void *argp1 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec2f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2f::Rot" "', argument " "1"" of type '" "Vec2f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix2f::Rot" "', argument " "1"" of type '" "Vec2f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec2f * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix2f::Rot" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = Matrix2f::Rot((Vec2f const &)*arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix2f(static_cast< const Matrix2f& >(result))), SWIGTYPE_p_Matrix2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix2f_Rot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Matrix2f_Rot__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec2f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix2f_Rot__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Matrix2f_Rot'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f_angle(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "angle" "', argument " "1"" of type '" "Matrix2f const *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  result = (float)((Matrix2f const *)arg1)->angle();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f___getitem__(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__getitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (float)Matrix2f___getitem__(arg1,arg2,arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f___setitem__(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__setitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "__setitem__" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  Matrix2f___setitem__(arg1,arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f___add__(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  Matrix2f arg2 ;
  Matrix2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix2f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Matrix2f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Matrix2f""'");
    } else {
      arg2 = *(reinterpret_cast< Matrix2f * >(argp2));
    }
  }
  result = Matrix2f___add__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix2f(static_cast< const Matrix2f& >(result))), SWIGTYPE_p_Matrix2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f___sub__(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  Matrix2f arg2 ;
  Matrix2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix2f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "Matrix2f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "Matrix2f""'");
    } else {
      arg2 = *(reinterpret_cast< Matrix2f * >(argp2));
    }
  }
  result = Matrix2f___sub__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix2f(static_cast< const Matrix2f& >(result))), SWIGTYPE_p_Matrix2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  Matrix2f arg2 ;
  Matrix2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix2f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Matrix2f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Matrix2f""'");
    } else {
      arg2 = *(reinterpret_cast< Matrix2f * >(argp2));
    }
  }
  result = Matrix2f___mul____SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix2f(static_cast< const Matrix2f& >(result))), SWIGTYPE_p_Matrix2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  Vec2f arg2 ;
  Vec2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec2f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Vec2f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Vec2f""'");
    } else {
      arg2 = *(reinterpret_cast< Vec2f * >(argp2));
    }
  }
  result = Matrix2f___mul____SWIG_1(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec2f(static_cast< const Vec2f& >(result))), SWIGTYPE_p_Vec2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2f___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix2f *arg1 = (Matrix2f *) 0 ;
  float arg2 ;
  Matrix2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Matrix2f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__mul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = Matrix2f___mul____SWIG_2(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix2f(static_cast< const Matrix2f& >(result))), SWIGTYPE_p_Matrix2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix2f___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix2f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix2f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix2f___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix2f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix2f___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix2f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix2f___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Matrix2f___mul__'");
  return Qnil;
}


SWIGINTERN void
free_Matrix2f(Matrix2f *arg1) {
    delete arg1;
}

swig_class cMatrix2d;

SWIGINTERN VALUE
_wrap_Matrix2d_xx_set(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xx" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xx" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->xx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_xx_get(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xx" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  result = (double) ((arg1)->xx);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_xy_set(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xy" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->xy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_xy_get(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xy" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  result = (double) ((arg1)->xy);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_yx_set(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yx" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yx" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->yx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_yx_get(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yx" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  result = (double) ((arg1)->yx);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_yy_set(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yy" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->yy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_yy_get(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yy" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  result = (double) ((arg1)->yy);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_clear(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_col(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  size_t arg2 ;
  Vec2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "col" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "col" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->col(arg2);
  vresult = SWIG_NewPointerObj((new Vec2d(static_cast< const Vec2d& >(result))), SWIGTYPE_p_Vec2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_row(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  size_t arg2 ;
  Vec2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "row" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "row" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->row(arg2);
  vresult = SWIG_NewPointerObj((new Vec2d(static_cast< const Vec2d& >(result))), SWIGTYPE_p_Vec2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_det(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "det" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  result = (double)(arg1)->det();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_height(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "height" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  result = (arg1)->height();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_width(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "width" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  result = (arg1)->width();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_resize(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resize" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "resize" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->resize(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_trans(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trans" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  result = (arg1)->trans();
  vresult = SWIG_NewPointerObj((new Matrix2d(static_cast< const Matrix2d& >(result))), SWIGTYPE_p_Matrix2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_inv(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "inv" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  result = (arg1)->inv();
  vresult = SWIG_NewPointerObj((new Matrix2d(static_cast< const Matrix2d& >(result))), SWIGTYPE_p_Matrix2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Matrix2d__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix2d *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Matrix2d *)new Matrix2d();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Matrix2d__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = 0 ;
  Vec2d *arg2 = 0 ;
  Matrix2d *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2d" "', argument " "1"" of type '" "Vec2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix2d" "', argument " "1"" of type '" "Vec2d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix2d" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix2d" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2d * >(argp2);
  result = (Matrix2d *)new Matrix2d((Vec2d const &)*arg1,(Vec2d const &)*arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Matrix2d_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Matrix2d_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Matrix2d);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Matrix2d__SWIG_2(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Matrix2d *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix2d" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix2d" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix2d" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix2d" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (Matrix2d *)new Matrix2d(arg1,arg2,arg3,arg4);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Matrix2d(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Matrix2d__SWIG_0(nargs, args, self);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec2d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Matrix2d__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Matrix2d__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_Matrix2d'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_Zero(int argc, VALUE *argv, VALUE self) {
  Matrix2d result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Matrix2d::Zero();
  vresult = SWIG_NewPointerObj((new Matrix2d(static_cast< const Matrix2d& >(result))), SWIGTYPE_p_Matrix2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_Unit(int argc, VALUE *argv, VALUE self) {
  Matrix2d result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Matrix2d::Unit();
  vresult = SWIG_NewPointerObj((new Matrix2d(static_cast< const Matrix2d& >(result))), SWIGTYPE_p_Matrix2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_Diag(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  Matrix2d result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix2d::Diag" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix2d::Diag" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = Matrix2d::Diag(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix2d(static_cast< const Matrix2d& >(result))), SWIGTYPE_p_Matrix2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_Rot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  Matrix2d result;
  double val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix2d::Rot" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = Matrix2d::Rot(arg1);
  vresult = SWIG_NewPointerObj((new Matrix2d(static_cast< const Matrix2d& >(result))), SWIGTYPE_p_Matrix2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_Rot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec2d *arg1 = 0 ;
  char arg2 ;
  Matrix2d result;
  void *argp1 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2d::Rot" "', argument " "1"" of type '" "Vec2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix2d::Rot" "', argument " "1"" of type '" "Vec2d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec2d * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix2d::Rot" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = Matrix2d::Rot((Vec2d const &)*arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix2d(static_cast< const Matrix2d& >(result))), SWIGTYPE_p_Matrix2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix2d_Rot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Matrix2d_Rot__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec2d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix2d_Rot__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Matrix2d_Rot'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d_angle(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "angle" "', argument " "1"" of type '" "Matrix2d const *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  result = (double)((Matrix2d const *)arg1)->angle();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d___getitem__(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__getitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (double)Matrix2d___getitem__(arg1,arg2,arg3);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d___setitem__(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__setitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "__setitem__" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  Matrix2d___setitem__(arg1,arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d___add__(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d arg2 ;
  Matrix2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix2d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Matrix2d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Matrix2d""'");
    } else {
      arg2 = *(reinterpret_cast< Matrix2d * >(argp2));
    }
  }
  result = Matrix2d___add__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix2d(static_cast< const Matrix2d& >(result))), SWIGTYPE_p_Matrix2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d___sub__(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d arg2 ;
  Matrix2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix2d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "Matrix2d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "Matrix2d""'");
    } else {
      arg2 = *(reinterpret_cast< Matrix2d * >(argp2));
    }
  }
  result = Matrix2d___sub__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix2d(static_cast< const Matrix2d& >(result))), SWIGTYPE_p_Matrix2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d arg2 ;
  Matrix2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix2d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Matrix2d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Matrix2d""'");
    } else {
      arg2 = *(reinterpret_cast< Matrix2d * >(argp2));
    }
  }
  result = Matrix2d___mul____SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix2d(static_cast< const Matrix2d& >(result))), SWIGTYPE_p_Matrix2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Vec2d arg2 ;
  Vec2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec2d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Vec2d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Vec2d""'");
    } else {
      arg2 = *(reinterpret_cast< Vec2d * >(argp2));
    }
  }
  result = Matrix2d___mul____SWIG_1(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec2d(static_cast< const Vec2d& >(result))), SWIGTYPE_p_Vec2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix2d___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  double arg2 ;
  Matrix2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Matrix2d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = Matrix2d___mul____SWIG_2(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix2d(static_cast< const Matrix2d& >(result))), SWIGTYPE_p_Matrix2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix2d___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix2d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix2d___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix2d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix2d___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix2d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix2d___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Matrix2d___mul__'");
  return Qnil;
}


SWIGINTERN void
free_Matrix2d(Matrix2d *arg1) {
    delete arg1;
}

swig_class cMatrix3f;

SWIGINTERN VALUE
_wrap_Matrix3f_xx_set(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xx" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xx" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->xx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_xx_get(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xx" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  result = (float) ((arg1)->xx);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_xy_set(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xy" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xy" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->xy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_xy_get(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xy" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  result = (float) ((arg1)->xy);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_xz_set(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xz" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xz" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->xz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_xz_get(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xz" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  result = (float) ((arg1)->xz);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_yx_set(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yx" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yx" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->yx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_yx_get(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yx" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  result = (float) ((arg1)->yx);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_yy_set(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yy" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yy" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->yy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_yy_get(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yy" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  result = (float) ((arg1)->yy);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_yz_set(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yz" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yz" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->yz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_yz_get(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yz" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  result = (float) ((arg1)->yz);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_zx_set(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zx" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "zx" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->zx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_zx_get(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zx" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  result = (float) ((arg1)->zx);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_zy_set(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zy" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "zy" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->zy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_zy_get(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zy" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  result = (float) ((arg1)->zy);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_zz_set(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zz" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "zz" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->zz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_zz_get(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zz" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  result = (float) ((arg1)->zz);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_clear(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_col(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  size_t arg2 ;
  Vec3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "col" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "col" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->col(arg2);
  vresult = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_row(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  size_t arg2 ;
  Vec3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "row" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "row" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->row(arg2);
  vresult = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_det(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "det" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  result = (double)(arg1)->det();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_height(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "height" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  result = (arg1)->height();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_width(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "width" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  result = (arg1)->width();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_resize(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resize" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "resize" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->resize(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_trans(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  Matrix3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trans" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  result = (arg1)->trans();
  vresult = SWIG_NewPointerObj((new Matrix3f(static_cast< const Matrix3f& >(result))), SWIGTYPE_p_Matrix3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_inv(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  Matrix3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "inv" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  result = (arg1)->inv();
  vresult = SWIG_NewPointerObj((new Matrix3f(static_cast< const Matrix3f& >(result))), SWIGTYPE_p_Matrix3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Matrix3f__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix3f *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Matrix3f *)new Matrix3f();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Matrix3f__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = 0 ;
  Vec3f *arg2 = 0 ;
  Vec3f *arg3 = 0 ;
  Matrix3f *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3f" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3f" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix3f" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3f" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Matrix3f" "', argument " "3"" of type '" "Vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3f" "', argument " "3"" of type '" "Vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< Vec3f * >(argp3);
  result = (Matrix3f *)new Matrix3f((Vec3f const &)*arg1,(Vec3f const &)*arg2,(Vec3f const &)*arg3);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Matrix3f_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Matrix3f_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Matrix3f);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Matrix3f__SWIG_2(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  Matrix3f *result = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  
  if ((argc < 9) || (argc > 9)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 9)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix3f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix3f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix3f" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix3f" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Matrix3f" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Matrix3f" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Matrix3f" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_float(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Matrix3f" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_float(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Matrix3f" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = static_cast< float >(val9);
  result = (Matrix3f *)new Matrix3f(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Matrix3f(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs;
  if (argc > 9) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Matrix3f__SWIG_0(nargs, args, self);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Vec3f, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Matrix3f__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_float(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_Matrix3f__SWIG_2(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_Matrix3f'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_Zero(int argc, VALUE *argv, VALUE self) {
  Matrix3f result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Matrix3f::Zero();
  vresult = SWIG_NewPointerObj((new Matrix3f(static_cast< const Matrix3f& >(result))), SWIGTYPE_p_Matrix3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_Unit(int argc, VALUE *argv, VALUE self) {
  Matrix3f result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Matrix3f::Unit();
  vresult = SWIG_NewPointerObj((new Matrix3f(static_cast< const Matrix3f& >(result))), SWIGTYPE_p_Matrix3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_Diag(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Matrix3f result;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix3f::Diag" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix3f::Diag" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix3f::Diag" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = Matrix3f::Diag(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new Matrix3f(static_cast< const Matrix3f& >(result))), SWIGTYPE_p_Matrix3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_Rot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = 0 ;
  Vec3f *arg2 = 0 ;
  char arg3 ;
  Matrix3f result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3f::Rot" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3f::Rot" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix3f::Rot" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3f::Rot" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  ecode3 = SWIG_AsVal_char(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix3f::Rot" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  result = Matrix3f::Rot((Vec3f const &)*arg1,(Vec3f const &)*arg2,arg3);
  vresult = SWIG_NewPointerObj((new Matrix3f(static_cast< const Matrix3f& >(result))), SWIGTYPE_p_Matrix3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_Rot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = 0 ;
  Vec3f *arg2 = 0 ;
  Matrix3f result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3f::Rot" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3f::Rot" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix3f::Rot" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3f::Rot" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = Matrix3f::Rot((Vec3f const &)*arg1,(Vec3f const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix3f(static_cast< const Matrix3f& >(result))), SWIGTYPE_p_Matrix3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_Rot__SWIG_2(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  char arg2 ;
  Matrix3f result;
  float val1 ;
  int ecode1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix3f::Rot" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_char(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix3f::Rot" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = Matrix3f::Rot(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix3f(static_cast< const Matrix3f& >(result))), SWIGTYPE_p_Matrix3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_Rot__SWIG_3(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  Vec3f *arg2 = 0 ;
  Matrix3f result;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix3f::Rot" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix3f::Rot" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3f::Rot" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  result = Matrix3f::Rot(arg1,(Vec3f const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix3f(static_cast< const Matrix3f& >(result))), SWIGTYPE_p_Matrix3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_Rot__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Vec4f *arg1 = 0 ;
  Matrix3f result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec4f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3f::Rot" "', argument " "1"" of type '" "Vec4f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3f::Rot" "', argument " "1"" of type '" "Vec4f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec4f * >(argp1);
  result = Matrix3f::Rot((Vec4f const &)*arg1);
  vresult = SWIG_NewPointerObj((new Matrix3f(static_cast< const Matrix3f& >(result))), SWIGTYPE_p_Matrix3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix3f_Rot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec4f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matrix3f_Rot__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix3f_Rot__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix3f_Rot__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix3f_Rot__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matrix3f_Rot__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Matrix3f_Rot'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f_Cross(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = 0 ;
  Matrix3f result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3f::Cross" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3f::Cross" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  result = Matrix3f::Cross((Vec3f const &)*arg1);
  vresult = SWIG_NewPointerObj((new Matrix3f(static_cast< const Matrix3f& >(result))), SWIGTYPE_p_Matrix3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f___getitem__(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__getitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (float)Matrix3f___getitem__(arg1,arg2,arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f___setitem__(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__setitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "__setitem__" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  Matrix3f___setitem__(arg1,arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f___add__(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  Matrix3f arg2 ;
  Matrix3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Matrix3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Matrix3f""'");
    } else {
      arg2 = *(reinterpret_cast< Matrix3f * >(argp2));
    }
  }
  result = Matrix3f___add__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix3f(static_cast< const Matrix3f& >(result))), SWIGTYPE_p_Matrix3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f___sub__(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  Matrix3f arg2 ;
  Matrix3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "Matrix3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "Matrix3f""'");
    } else {
      arg2 = *(reinterpret_cast< Matrix3f * >(argp2));
    }
  }
  result = Matrix3f___sub__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix3f(static_cast< const Matrix3f& >(result))), SWIGTYPE_p_Matrix3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  Matrix3f arg2 ;
  Matrix3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Matrix3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Matrix3f""'");
    } else {
      arg2 = *(reinterpret_cast< Matrix3f * >(argp2));
    }
  }
  result = Matrix3f___mul____SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix3f(static_cast< const Matrix3f& >(result))), SWIGTYPE_p_Matrix3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  Vec3f arg2 ;
  Vec3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      arg2 = *(reinterpret_cast< Vec3f * >(argp2));
    }
  }
  result = Matrix3f___mul____SWIG_1(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3f___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix3f *arg1 = (Matrix3f *) 0 ;
  float arg2 ;
  Matrix3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Matrix3f *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__mul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = Matrix3f___mul____SWIG_2(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix3f(static_cast< const Matrix3f& >(result))), SWIGTYPE_p_Matrix3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix3f___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix3f___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix3f___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix3f___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Matrix3f___mul__'");
  return Qnil;
}


SWIGINTERN void
free_Matrix3f(Matrix3f *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_IsUnitary__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix3f arg1 ;
  bool result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Matrix3f,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsUnitary" "', argument " "1"" of type '" "Matrix3f""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsUnitary" "', argument " "1"" of type '" "Matrix3f""'");
    } else {
      arg1 = *(reinterpret_cast< Matrix3f * >(argp1));
    }
  }
  result = (bool)IsUnitary(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cMatrix3d;

SWIGINTERN VALUE
_wrap_Matrix3d_xx_set(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xx" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xx" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->xx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_xx_get(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xx" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  result = (double) ((arg1)->xx);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_xy_set(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xy" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->xy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_xy_get(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xy" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  result = (double) ((arg1)->xy);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_xz_set(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xz" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xz" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->xz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_xz_get(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xz" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  result = (double) ((arg1)->xz);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_yx_set(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yx" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yx" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->yx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_yx_get(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yx" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  result = (double) ((arg1)->yx);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_yy_set(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yy" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->yy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_yy_get(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yy" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  result = (double) ((arg1)->yy);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_yz_set(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yz" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yz" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->yz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_yz_get(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yz" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  result = (double) ((arg1)->yz);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_zx_set(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zx" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "zx" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->zx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_zx_get(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zx" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  result = (double) ((arg1)->zx);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_zy_set(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zy" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "zy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->zy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_zy_get(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zy" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  result = (double) ((arg1)->zy);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_zz_set(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zz" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "zz" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->zz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_zz_get(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zz" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  result = (double) ((arg1)->zz);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_clear(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_col(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  size_t arg2 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "col" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "col" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->col(arg2);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_row(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  size_t arg2 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "row" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "row" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->row(arg2);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_det(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "det" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  result = (double)(arg1)->det();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_height(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "height" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  result = (arg1)->height();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_width(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "width" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  result = (arg1)->width();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_resize(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resize" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "resize" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->resize(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_trans(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  Matrix3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trans" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  result = (arg1)->trans();
  vresult = SWIG_NewPointerObj((new Matrix3d(static_cast< const Matrix3d& >(result))), SWIGTYPE_p_Matrix3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_inv(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  Matrix3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "inv" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  result = (arg1)->inv();
  vresult = SWIG_NewPointerObj((new Matrix3d(static_cast< const Matrix3d& >(result))), SWIGTYPE_p_Matrix3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Matrix3d__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix3d *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Matrix3d *)new Matrix3d();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Matrix3d__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = 0 ;
  Vec3d *arg2 = 0 ;
  Vec3d *arg3 = 0 ;
  Matrix3d *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3d" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3d" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix3d" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3d" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Matrix3d" "', argument " "3"" of type '" "Vec3d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3d" "', argument " "3"" of type '" "Vec3d const &""'"); 
  }
  arg3 = reinterpret_cast< Vec3d * >(argp3);
  result = (Matrix3d *)new Matrix3d((Vec3d const &)*arg1,(Vec3d const &)*arg2,(Vec3d const &)*arg3);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Matrix3d_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Matrix3d_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Matrix3d);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Matrix3d__SWIG_2(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  Matrix3d *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  
  if ((argc < 9) || (argc > 9)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 9)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix3d" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix3d" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix3d" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix3d" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Matrix3d" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Matrix3d" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Matrix3d" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Matrix3d" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Matrix3d" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  result = (Matrix3d *)new Matrix3d(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Matrix3d(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;
  
  argc = nargs;
  if (argc > 9) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Matrix3d__SWIG_0(nargs, args, self);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Vec3d, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Matrix3d__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_Matrix3d__SWIG_2(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_Matrix3d'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_Zero(int argc, VALUE *argv, VALUE self) {
  Matrix3d result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Matrix3d::Zero();
  vresult = SWIG_NewPointerObj((new Matrix3d(static_cast< const Matrix3d& >(result))), SWIGTYPE_p_Matrix3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_Unit(int argc, VALUE *argv, VALUE self) {
  Matrix3d result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Matrix3d::Unit();
  vresult = SWIG_NewPointerObj((new Matrix3d(static_cast< const Matrix3d& >(result))), SWIGTYPE_p_Matrix3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_Diag(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Matrix3d result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix3d::Diag" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix3d::Diag" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix3d::Diag" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = Matrix3d::Diag(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new Matrix3d(static_cast< const Matrix3d& >(result))), SWIGTYPE_p_Matrix3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_Rot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = 0 ;
  Vec3d *arg2 = 0 ;
  char arg3 ;
  Matrix3d result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3d::Rot" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3d::Rot" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix3d::Rot" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3d::Rot" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  ecode3 = SWIG_AsVal_char(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix3d::Rot" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  result = Matrix3d::Rot((Vec3d const &)*arg1,(Vec3d const &)*arg2,arg3);
  vresult = SWIG_NewPointerObj((new Matrix3d(static_cast< const Matrix3d& >(result))), SWIGTYPE_p_Matrix3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_Rot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = 0 ;
  Vec3d *arg2 = 0 ;
  Matrix3d result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3d::Rot" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3d::Rot" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix3d::Rot" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3d::Rot" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  result = Matrix3d::Rot((Vec3d const &)*arg1,(Vec3d const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix3d(static_cast< const Matrix3d& >(result))), SWIGTYPE_p_Matrix3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_Rot__SWIG_2(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  char arg2 ;
  Matrix3d result;
  double val1 ;
  int ecode1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix3d::Rot" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_char(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix3d::Rot" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = Matrix3d::Rot(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix3d(static_cast< const Matrix3d& >(result))), SWIGTYPE_p_Matrix3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_Rot__SWIG_3(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  Vec3d *arg2 = 0 ;
  Matrix3d result;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Matrix3d::Rot" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix3d::Rot" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3d::Rot" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  result = Matrix3d::Rot(arg1,(Vec3d const &)*arg2);
  vresult = SWIG_NewPointerObj((new Matrix3d(static_cast< const Matrix3d& >(result))), SWIGTYPE_p_Matrix3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_Rot__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Vec4d *arg1 = 0 ;
  Matrix3d result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec4d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3d::Rot" "', argument " "1"" of type '" "Vec4d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3d::Rot" "', argument " "1"" of type '" "Vec4d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec4d * >(argp1);
  result = Matrix3d::Rot((Vec4d const &)*arg1);
  vresult = SWIG_NewPointerObj((new Matrix3d(static_cast< const Matrix3d& >(result))), SWIGTYPE_p_Matrix3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix3d_Rot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec4d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matrix3d_Rot__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix3d_Rot__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix3d_Rot__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix3d_Rot__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matrix3d_Rot__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Matrix3d_Rot'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d_Cross(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = 0 ;
  Matrix3d result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3d::Cross" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix3d::Cross" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  result = Matrix3d::Cross((Vec3d const &)*arg1);
  vresult = SWIG_NewPointerObj((new Matrix3d(static_cast< const Matrix3d& >(result))), SWIGTYPE_p_Matrix3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d___getitem__(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__getitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (double)Matrix3d___getitem__(arg1,arg2,arg3);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d___setitem__(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__setitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "__setitem__" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  Matrix3d___setitem__(arg1,arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d___add__(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  Matrix3d arg2 ;
  Matrix3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix3d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Matrix3d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Matrix3d""'");
    } else {
      arg2 = *(reinterpret_cast< Matrix3d * >(argp2));
    }
  }
  result = Matrix3d___add__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix3d(static_cast< const Matrix3d& >(result))), SWIGTYPE_p_Matrix3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d___sub__(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  Matrix3d arg2 ;
  Matrix3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix3d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "Matrix3d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "Matrix3d""'");
    } else {
      arg2 = *(reinterpret_cast< Matrix3d * >(argp2));
    }
  }
  result = Matrix3d___sub__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix3d(static_cast< const Matrix3d& >(result))), SWIGTYPE_p_Matrix3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  Matrix3d arg2 ;
  Matrix3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix3d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Matrix3d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Matrix3d""'");
    } else {
      arg2 = *(reinterpret_cast< Matrix3d * >(argp2));
    }
  }
  result = Matrix3d___mul____SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix3d(static_cast< const Matrix3d& >(result))), SWIGTYPE_p_Matrix3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  Vec3d arg2 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Vec3d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Vec3d""'");
    } else {
      arg2 = *(reinterpret_cast< Vec3d * >(argp2));
    }
  }
  result = Matrix3d___mul____SWIG_1(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Matrix3d___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Matrix3d *arg1 = (Matrix3d *) 0 ;
  double arg2 ;
  Matrix3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Matrix3d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Matrix3d *""'"); 
  }
  arg1 = reinterpret_cast< Matrix3d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = Matrix3d___mul____SWIG_2(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Matrix3d(static_cast< const Matrix3d& >(result))), SWIGTYPE_p_Matrix3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Matrix3d___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Matrix3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix3d___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Matrix3d___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix3d___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Matrix3d___mul__'");
  return Qnil;
}


SWIGINTERN void
free_Matrix3d(Matrix3d *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_IsUnitary__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Matrix3d arg1 ;
  bool result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Matrix3d,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsUnitary" "', argument " "1"" of type '" "Matrix3d""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsUnitary" "', argument " "1"" of type '" "Matrix3d""'");
    } else {
      arg1 = *(reinterpret_cast< Matrix3d * >(argp1));
    }
  }
  result = (bool)IsUnitary(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_IsUnitary(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IsUnitary__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Matrix3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IsUnitary__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'IsUnitary'");
  return Qnil;
}


swig_class cAffine2f;

SWIGINTERN VALUE
_wrap_Affine2f_xx_set(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xx" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xx" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->xx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_xx_get(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xx" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = (float) ((arg1)->xx);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_xy_set(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xy" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xy" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->xy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_xy_get(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xy" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = (float) ((arg1)->xy);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_xz_set(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xz" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xz" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->xz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_xz_get(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xz" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = (float) ((arg1)->xz);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_yx_set(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yx" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yx" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->yx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_yx_get(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yx" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = (float) ((arg1)->yx);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_yy_set(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yy" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yy" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->yy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_yy_get(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yy" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = (float) ((arg1)->yy);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_yz_set(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yz" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yz" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->yz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_yz_get(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yz" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = (float) ((arg1)->yz);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_px_set(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "px" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "px" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->px = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_px_get(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "px" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = (float) ((arg1)->px);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_py_set(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "py" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "py" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->py = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_py_get(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "py" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = (float) ((arg1)->py);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_pz_set(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pz" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pz" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->pz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_pz_get(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pz" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = (float) ((arg1)->pz);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_clear(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_col(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  size_t arg2 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "col" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "col" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->col(arg2);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_row(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  size_t arg2 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "row" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "row" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->row(arg2);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_det(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "det" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = (double)(arg1)->det();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_height(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "height" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = (arg1)->height();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_width(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "width" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = (arg1)->width();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_resize(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resize" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "resize" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->resize(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_trans(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  Affine2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trans" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = (arg1)->trans();
  vresult = SWIG_NewPointerObj((new Affine2f(static_cast< const Affine2f& >(result))), SWIGTYPE_p_Affine2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_inv(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  Affine2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "inv" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = (arg1)->inv();
  vresult = SWIG_NewPointerObj((new Affine2f(static_cast< const Affine2f& >(result))), SWIGTYPE_p_Affine2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_Unit(int argc, VALUE *argv, VALUE self) {
  Affine2f result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Affine2f::Unit();
  vresult = SWIG_NewPointerObj((new Affine2f(static_cast< const Affine2f& >(result))), SWIGTYPE_p_Affine2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_Trn(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  float arg2 ;
  Affine2f result;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Affine2f::Trn" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Affine2f::Trn" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = Affine2f::Trn(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affine2f(static_cast< const Affine2f& >(result))), SWIGTYPE_p_Affine2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_Rot(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  Affine2f result;
  float val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Affine2f::Rot" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = Affine2f::Rot(arg1);
  vresult = SWIG_NewPointerObj((new Affine2f(static_cast< const Affine2f& >(result))), SWIGTYPE_p_Affine2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_Scale(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  float arg2 ;
  Affine2f result;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Affine2f::Scale" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Affine2f::Scale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = Affine2f::Scale(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affine2f(static_cast< const Affine2f& >(result))), SWIGTYPE_p_Affine2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Affine2f_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Affine2f_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Affine2f);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Affine2f(int argc, VALUE *argv, VALUE self) {
  Affine2f *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Affine2f *)new Affine2f();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f___getitem__(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__getitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (float)Affine2f___getitem__(arg1,arg2,arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f___setitem__(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__setitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "__setitem__" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  Affine2f___setitem__(arg1,arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f___add__(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  Affine2f arg2 ;
  Affine2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Affine2f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Affine2f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Affine2f""'");
    } else {
      arg2 = *(reinterpret_cast< Affine2f * >(argp2));
    }
  }
  result = Affine2f___add__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affine2f(static_cast< const Affine2f& >(result))), SWIGTYPE_p_Affine2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f___sub__(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  Affine2f arg2 ;
  Affine2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Affine2f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "Affine2f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "Affine2f""'");
    } else {
      arg2 = *(reinterpret_cast< Affine2f * >(argp2));
    }
  }
  result = Affine2f___sub__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affine2f(static_cast< const Affine2f& >(result))), SWIGTYPE_p_Affine2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  Affine2f arg2 ;
  Affine2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Affine2f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Affine2f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Affine2f""'");
    } else {
      arg2 = *(reinterpret_cast< Affine2f * >(argp2));
    }
  }
  result = Affine2f___mul____SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affine2f(static_cast< const Affine2f& >(result))), SWIGTYPE_p_Affine2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  Vec2f arg2 ;
  Vec2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec2f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Vec2f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Vec2f""'");
    } else {
      arg2 = *(reinterpret_cast< Vec2f * >(argp2));
    }
  }
  result = Affine2f___mul____SWIG_1(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec2f(static_cast< const Vec2f& >(result))), SWIGTYPE_p_Vec2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  float arg2 ;
  Affine2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__mul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = Affine2f___mul____SWIG_2(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affine2f(static_cast< const Affine2f& >(result))), SWIGTYPE_p_Affine2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Affine2f___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affine2f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Affine2f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affine2f___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affine2f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affine2f___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affine2f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Affine2f___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Affine2f___mul__'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_trne___(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  Vec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setTrn" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setTrn" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setTrn" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2f * >(argp2);
  Affine2f_setTrn(arg1,(Vec2f const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_trn(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  Vec2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getTrn" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = Affine2f_getTrn(arg1);
  vresult = SWIG_NewPointerObj((new Vec2f(static_cast< const Vec2f& >(result))), SWIGTYPE_p_Vec2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_pose___(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  Vec2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setPos" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setPos" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setPos" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2f * >(argp2);
  Affine2f_setPos(arg1,(Vec2f const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_pos(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  Vec2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPos" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = Affine2f_getPos(arg1);
  vresult = SWIG_NewPointerObj((new Vec2f(static_cast< const Vec2f& >(result))), SWIGTYPE_p_Vec2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_rote___(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  Matrix2f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setRot" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setRot" "', argument " "2"" of type '" "Matrix2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setRot" "', argument " "2"" of type '" "Matrix2f const &""'"); 
  }
  arg2 = reinterpret_cast< Matrix2f * >(argp2);
  Affine2f_setRot(arg1,(Matrix2f const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2f_rot(int argc, VALUE *argv, VALUE self) {
  Affine2f *arg1 = (Affine2f *) 0 ;
  Matrix2f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2f, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getRot" "', argument " "1"" of type '" "Affine2f *""'"); 
  }
  arg1 = reinterpret_cast< Affine2f * >(argp1);
  result = Affine2f_getRot(arg1);
  vresult = SWIG_NewPointerObj((new Matrix2f(static_cast< const Matrix2f& >(result))), SWIGTYPE_p_Matrix2f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Affine2f(Affine2f *arg1) {
    delete arg1;
}

swig_class cAffinef;

SWIGINTERN VALUE
_wrap_Affinef_xx_set(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xx" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xx" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->xx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_xx_get(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xx" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (float) ((arg1)->xx);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_xy_set(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xy" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xy" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->xy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_xy_get(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xy" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (float) ((arg1)->xy);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_xz_set(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xz" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xz" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->xz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_xz_get(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xz" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (float) ((arg1)->xz);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_xw_set(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xw" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->xw = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_xw_get(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xw" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (float) ((arg1)->xw);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_yx_set(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yx" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yx" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->yx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_yx_get(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yx" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (float) ((arg1)->yx);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_yy_set(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yy" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yy" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->yy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_yy_get(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yy" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (float) ((arg1)->yy);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_yz_set(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yz" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yz" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->yz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_yz_get(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yz" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (float) ((arg1)->yz);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_yw_set(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yw" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->yw = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_yw_get(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yw" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (float) ((arg1)->yw);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_zx_set(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zx" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "zx" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->zx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_zx_get(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zx" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (float) ((arg1)->zx);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_zy_set(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zy" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "zy" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->zy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_zy_get(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zy" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (float) ((arg1)->zy);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_zz_set(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zz" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "zz" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->zz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_zz_get(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zz" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (float) ((arg1)->zz);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_zw_set(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zw" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "zw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->zw = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_zw_get(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zw" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (float) ((arg1)->zw);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_px_set(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "px" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "px" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->px = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_px_get(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "px" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (float) ((arg1)->px);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_py_set(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "py" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "py" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->py = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_py_get(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "py" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (float) ((arg1)->py);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_pz_set(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pz" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pz" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->pz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_pz_get(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pz" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (float) ((arg1)->pz);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_pw_set(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pw" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pw" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->pw = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_pw_get(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pw" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (float) ((arg1)->pw);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_clear(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_col(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  size_t arg2 ;
  Vec4f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "col" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "col" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->col(arg2);
  vresult = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_row(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  size_t arg2 ;
  Vec4f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "row" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "row" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->row(arg2);
  vresult = SWIG_NewPointerObj((new Vec4f(static_cast< const Vec4f& >(result))), SWIGTYPE_p_Vec4f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_det(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "det" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (double)(arg1)->det();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_height(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "height" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (arg1)->height();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_width(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "width" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (arg1)->width();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_resize(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resize" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "resize" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->resize(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_trans(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  Affinef result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trans" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (arg1)->trans();
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_inv(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  Affinef result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "inv" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = (arg1)->inv();
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_Unit(int argc, VALUE *argv, VALUE self) {
  Affinef result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Affinef::Unit();
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_Trn(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Affinef result;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Affinef::Trn" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Affinef::Trn" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Affinef::Trn" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = Affinef::Trn(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_Rot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  char arg2 ;
  Affinef result;
  float val1 ;
  int ecode1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Affinef::Rot" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_char(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Affinef::Rot" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = Affinef::Rot(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_Rot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  Vec3d *arg2 = 0 ;
  Affinef result;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Affinef::Rot" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Affinef::Rot" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affinef::Rot" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  result = Affinef::Rot(arg1,(Vec3d const &)*arg2);
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Affinef_Rot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affinef_Rot__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Affinef_Rot__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Affinef_Rot'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_Scale(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Affinef result;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Affinef::Scale" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Affinef::Scale" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Affinef::Scale" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = Affinef::Scale(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_ProjectionGL__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = 0 ;
  Vec2f *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  Affinef result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Affinef::ProjectionGL" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affinef::ProjectionGL" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Affinef::ProjectionGL" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affinef::ProjectionGL" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2f * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Affinef::ProjectionGL" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Affinef::ProjectionGL" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = Affinef::ProjectionGL((Vec3f const &)*arg1,(Vec2f const &)*arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_ProjectionGL__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = 0 ;
  Vec2f *arg2 = 0 ;
  float arg3 ;
  Affinef result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Affinef::ProjectionGL" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affinef::ProjectionGL" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Affinef::ProjectionGL" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affinef::ProjectionGL" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2f * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Affinef::ProjectionGL" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = Affinef::ProjectionGL((Vec3f const &)*arg1,(Vec2f const &)*arg2,arg3);
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_ProjectionGL__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = 0 ;
  Vec2f *arg2 = 0 ;
  Affinef result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Affinef::ProjectionGL" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affinef::ProjectionGL" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Affinef::ProjectionGL" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affinef::ProjectionGL" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2f * >(argp2);
  result = Affinef::ProjectionGL((Vec3f const &)*arg1,(Vec2f const &)*arg2);
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Affinef_ProjectionGL(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affinef_ProjectionGL__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Affinef_ProjectionGL__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Affinef_ProjectionGL__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Affinef_ProjectionGL'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_ProjectionD3D__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = 0 ;
  Vec2f *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  Affinef result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Affinef::ProjectionD3D" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affinef::ProjectionD3D" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Affinef::ProjectionD3D" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affinef::ProjectionD3D" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2f * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Affinef::ProjectionD3D" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Affinef::ProjectionD3D" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = Affinef::ProjectionD3D((Vec3f const &)*arg1,(Vec2f const &)*arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_ProjectionD3D__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = 0 ;
  Vec2f *arg2 = 0 ;
  float arg3 ;
  Affinef result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Affinef::ProjectionD3D" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affinef::ProjectionD3D" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Affinef::ProjectionD3D" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affinef::ProjectionD3D" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2f * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Affinef::ProjectionD3D" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  result = Affinef::ProjectionD3D((Vec3f const &)*arg1,(Vec2f const &)*arg2,arg3);
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_ProjectionD3D__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Vec3f *arg1 = 0 ;
  Vec2f *arg2 = 0 ;
  Affinef result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Affinef::ProjectionD3D" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affinef::ProjectionD3D" "', argument " "1"" of type '" "Vec3f const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3f * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec2f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Affinef::ProjectionD3D" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affinef::ProjectionD3D" "', argument " "2"" of type '" "Vec2f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2f * >(argp2);
  result = Affinef::ProjectionD3D((Vec3f const &)*arg1,(Vec2f const &)*arg2);
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Affinef_ProjectionD3D(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affinef_ProjectionD3D__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Affinef_ProjectionD3D__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3f, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Affinef_ProjectionD3D__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Affinef_ProjectionD3D'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_LookAt__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LookAt" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LookAt" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LookAt" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  (arg1)->LookAt((Vec3f const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_LookAt__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  Vec3f *arg2 = 0 ;
  Vec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LookAt" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LookAt" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LookAt" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LookAt" "', argument " "3"" of type '" "Vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LookAt" "', argument " "3"" of type '" "Vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< Vec3f * >(argp3);
  (arg1)->LookAt((Vec3f const &)*arg2,(Vec3f const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Affinef_LookAt(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affinef, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affinef_LookAt__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affinef, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Vec3f, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Affinef_LookAt__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Affinef_LookAt'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_LookAtGL__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LookAtGL" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LookAtGL" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LookAtGL" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  (arg1)->LookAtGL((Vec3f const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_LookAtGL__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  Vec3f *arg2 = 0 ;
  Vec3f *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LookAtGL" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LookAtGL" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LookAtGL" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LookAtGL" "', argument " "3"" of type '" "Vec3f const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LookAtGL" "', argument " "3"" of type '" "Vec3f const &""'"); 
  }
  arg3 = reinterpret_cast< Vec3f * >(argp3);
  (arg1)->LookAtGL((Vec3f const &)*arg2,(Vec3f const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Affinef_LookAtGL(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affinef, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affinef_LookAtGL__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affinef, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Vec3f, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Affinef_LookAtGL__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Affinef_LookAtGL'");
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Affinef_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Affinef_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Affinef);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Affinef(int argc, VALUE *argv, VALUE self) {
  Affinef *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Affinef *)new Affinef();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef___getitem__(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__getitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (float)Affinef___getitem__(arg1,arg2,arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef___setitem__(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__setitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "__setitem__" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  Affinef___setitem__(arg1,arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef___add__(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  Affinef arg2 ;
  Affinef result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Affinef,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Affinef""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Affinef""'");
    } else {
      arg2 = *(reinterpret_cast< Affinef * >(argp2));
    }
  }
  result = Affinef___add__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef___sub__(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  Affinef arg2 ;
  Affinef result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Affinef,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "Affinef""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "Affinef""'");
    } else {
      arg2 = *(reinterpret_cast< Affinef * >(argp2));
    }
  }
  result = Affinef___sub__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  Affinef arg2 ;
  Affinef result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Affinef,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Affinef""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Affinef""'");
    } else {
      arg2 = *(reinterpret_cast< Affinef * >(argp2));
    }
  }
  result = Affinef___mul____SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  Vec3f arg2 ;
  Vec3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3f,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Vec3f""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Vec3f""'");
    } else {
      arg2 = *(reinterpret_cast< Vec3f * >(argp2));
    }
  }
  result = Affinef___mul____SWIG_1(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  float arg2 ;
  Affinef result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__mul__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = Affinef___mul____SWIG_2(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affinef(static_cast< const Affinef& >(result))), SWIGTYPE_p_Affinef, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Affinef___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affinef, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Affinef, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affinef___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affinef, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3f, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affinef___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affinef, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Affinef___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Affinef___mul__'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_trne___(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setTrn" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setTrn" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setTrn" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  Affinef_setTrn(arg1,(Vec3f const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_trn(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  Vec3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getTrn" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = Affinef_getTrn(arg1);
  vresult = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_pose___(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  Vec3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setPos" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setPos" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setPos" "', argument " "2"" of type '" "Vec3f const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3f * >(argp2);
  Affinef_setPos(arg1,(Vec3f const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_pos(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  Vec3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPos" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = Affinef_getPos(arg1);
  vresult = SWIG_NewPointerObj((new Vec3f(static_cast< const Vec3f& >(result))), SWIGTYPE_p_Vec3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_rote___(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  Matrix3f *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setRot" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix3f,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setRot" "', argument " "2"" of type '" "Matrix3f const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setRot" "', argument " "2"" of type '" "Matrix3f const &""'"); 
  }
  arg2 = reinterpret_cast< Matrix3f * >(argp2);
  Affinef_setRot(arg1,(Matrix3f const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affinef_rot(int argc, VALUE *argv, VALUE self) {
  Affinef *arg1 = (Affinef *) 0 ;
  Matrix3f result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affinef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getRot" "', argument " "1"" of type '" "Affinef *""'"); 
  }
  arg1 = reinterpret_cast< Affinef * >(argp1);
  result = Affinef_getRot(arg1);
  vresult = SWIG_NewPointerObj((new Matrix3f(static_cast< const Matrix3f& >(result))), SWIGTYPE_p_Matrix3f, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Affinef(Affinef *arg1) {
    delete arg1;
}

swig_class cAffine2d;

SWIGINTERN VALUE
_wrap_Affine2d_xx_set(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xx" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xx" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->xx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_xx_get(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xx" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = (double) ((arg1)->xx);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_xy_set(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xy" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->xy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_xy_get(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xy" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = (double) ((arg1)->xy);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_xz_set(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xz" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xz" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->xz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_xz_get(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xz" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = (double) ((arg1)->xz);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_yx_set(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yx" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yx" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->yx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_yx_get(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yx" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = (double) ((arg1)->yx);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_yy_set(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yy" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->yy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_yy_get(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yy" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = (double) ((arg1)->yy);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_yz_set(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yz" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yz" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->yz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_yz_get(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yz" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = (double) ((arg1)->yz);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_px_set(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "px" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "px" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->px = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_px_get(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "px" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = (double) ((arg1)->px);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_py_set(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "py" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "py" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->py = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_py_get(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "py" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = (double) ((arg1)->py);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_pz_set(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pz" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pz" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->pz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_pz_get(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pz" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = (double) ((arg1)->pz);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_clear(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_col(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  size_t arg2 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "col" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "col" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->col(arg2);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_row(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  size_t arg2 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "row" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "row" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->row(arg2);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_det(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "det" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = (double)(arg1)->det();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_height(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "height" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = (arg1)->height();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_width(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "width" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = (arg1)->width();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_resize(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resize" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "resize" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->resize(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_trans(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  Affine2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trans" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = (arg1)->trans();
  vresult = SWIG_NewPointerObj((new Affine2d(static_cast< const Affine2d& >(result))), SWIGTYPE_p_Affine2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_inv(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  Affine2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "inv" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = (arg1)->inv();
  vresult = SWIG_NewPointerObj((new Affine2d(static_cast< const Affine2d& >(result))), SWIGTYPE_p_Affine2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_Unit(int argc, VALUE *argv, VALUE self) {
  Affine2d result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Affine2d::Unit();
  vresult = SWIG_NewPointerObj((new Affine2d(static_cast< const Affine2d& >(result))), SWIGTYPE_p_Affine2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_Trn(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  Affine2d result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Affine2d::Trn" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Affine2d::Trn" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = Affine2d::Trn(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affine2d(static_cast< const Affine2d& >(result))), SWIGTYPE_p_Affine2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_Rot(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  Affine2d result;
  double val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Affine2d::Rot" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = Affine2d::Rot(arg1);
  vresult = SWIG_NewPointerObj((new Affine2d(static_cast< const Affine2d& >(result))), SWIGTYPE_p_Affine2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_Scale(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  Affine2d result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Affine2d::Scale" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Affine2d::Scale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = Affine2d::Scale(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affine2d(static_cast< const Affine2d& >(result))), SWIGTYPE_p_Affine2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Affine2d_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Affine2d_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Affine2d);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Affine2d(int argc, VALUE *argv, VALUE self) {
  Affine2d *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Affine2d *)new Affine2d();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d___getitem__(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__getitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (double)Affine2d___getitem__(arg1,arg2,arg3);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d___setitem__(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__setitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "__setitem__" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  Affine2d___setitem__(arg1,arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d___add__(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  Affine2d arg2 ;
  Affine2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Affine2d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Affine2d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Affine2d""'");
    } else {
      arg2 = *(reinterpret_cast< Affine2d * >(argp2));
    }
  }
  result = Affine2d___add__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affine2d(static_cast< const Affine2d& >(result))), SWIGTYPE_p_Affine2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d___sub__(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  Affine2d arg2 ;
  Affine2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Affine2d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "Affine2d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "Affine2d""'");
    } else {
      arg2 = *(reinterpret_cast< Affine2d * >(argp2));
    }
  }
  result = Affine2d___sub__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affine2d(static_cast< const Affine2d& >(result))), SWIGTYPE_p_Affine2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  Affine2d arg2 ;
  Affine2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Affine2d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Affine2d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Affine2d""'");
    } else {
      arg2 = *(reinterpret_cast< Affine2d * >(argp2));
    }
  }
  result = Affine2d___mul____SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affine2d(static_cast< const Affine2d& >(result))), SWIGTYPE_p_Affine2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  Vec2d arg2 ;
  Vec2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec2d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Vec2d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Vec2d""'");
    } else {
      arg2 = *(reinterpret_cast< Vec2d * >(argp2));
    }
  }
  result = Affine2d___mul____SWIG_1(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec2d(static_cast< const Vec2d& >(result))), SWIGTYPE_p_Vec2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  double arg2 ;
  Affine2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = Affine2d___mul____SWIG_2(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affine2d(static_cast< const Affine2d& >(result))), SWIGTYPE_p_Affine2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Affine2d___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affine2d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Affine2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affine2d___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affine2d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affine2d___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affine2d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Affine2d___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Affine2d___mul__'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_trne___(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  Vec2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setTrn" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setTrn" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setTrn" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2d * >(argp2);
  Affine2d_setTrn(arg1,(Vec2d const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_trn(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  Vec2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getTrn" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = Affine2d_getTrn(arg1);
  vresult = SWIG_NewPointerObj((new Vec2d(static_cast< const Vec2d& >(result))), SWIGTYPE_p_Vec2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_pose___(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  Vec2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setPos" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setPos" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setPos" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2d * >(argp2);
  Affine2d_setPos(arg1,(Vec2d const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_pos(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  Vec2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPos" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = Affine2d_getPos(arg1);
  vresult = SWIG_NewPointerObj((new Vec2d(static_cast< const Vec2d& >(result))), SWIGTYPE_p_Vec2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_rote___(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  Matrix2d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setRot" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setRot" "', argument " "2"" of type '" "Matrix2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setRot" "', argument " "2"" of type '" "Matrix2d const &""'"); 
  }
  arg2 = reinterpret_cast< Matrix2d * >(argp2);
  Affine2d_setRot(arg1,(Matrix2d const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affine2d_rot(int argc, VALUE *argv, VALUE self) {
  Affine2d *arg1 = (Affine2d *) 0 ;
  Matrix2d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affine2d, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getRot" "', argument " "1"" of type '" "Affine2d *""'"); 
  }
  arg1 = reinterpret_cast< Affine2d * >(argp1);
  result = Affine2d_getRot(arg1);
  vresult = SWIG_NewPointerObj((new Matrix2d(static_cast< const Matrix2d& >(result))), SWIGTYPE_p_Matrix2d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Affine2d(Affine2d *arg1) {
    delete arg1;
}

swig_class cAffined;

SWIGINTERN VALUE
_wrap_Affined_xx_set(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xx" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xx" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->xx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_xx_get(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xx" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double) ((arg1)->xx);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_xy_set(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xy" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->xy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_xy_get(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xy" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double) ((arg1)->xy);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_xz_set(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xz" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xz" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->xz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_xz_get(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xz" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double) ((arg1)->xz);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_xw_set(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xw" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xw" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->xw = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_xw_get(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xw" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double) ((arg1)->xw);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_yx_set(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yx" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yx" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->yx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_yx_get(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yx" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double) ((arg1)->yx);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_yy_set(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yy" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->yy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_yy_get(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yy" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double) ((arg1)->yy);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_yz_set(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yz" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yz" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->yz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_yz_get(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yz" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double) ((arg1)->yz);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_yw_set(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yw" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "yw" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->yw = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_yw_get(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "yw" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double) ((arg1)->yw);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_zx_set(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zx" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "zx" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->zx = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_zx_get(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zx" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double) ((arg1)->zx);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_zy_set(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zy" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "zy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->zy = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_zy_get(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zy" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double) ((arg1)->zy);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_zz_set(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zz" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "zz" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->zz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_zz_get(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zz" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double) ((arg1)->zz);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_zw_set(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zw" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "zw" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->zw = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_zw_get(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zw" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double) ((arg1)->zw);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_px_set(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "px" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "px" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->px = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_px_get(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "px" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double) ((arg1)->px);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_py_set(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "py" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "py" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->py = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_py_get(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "py" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double) ((arg1)->py);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_pz_set(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pz" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pz" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->pz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_pz_get(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pz" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double) ((arg1)->pz);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_pw_set(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pw" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pw" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->pw = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_pw_get(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pw" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double) ((arg1)->pw);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_clear(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_col(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  size_t arg2 ;
  Vec4d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "col" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "col" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->col(arg2);
  vresult = SWIG_NewPointerObj((new Vec4d(static_cast< const Vec4d& >(result))), SWIGTYPE_p_Vec4d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_row(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  size_t arg2 ;
  Vec4d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "row" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "row" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->row(arg2);
  vresult = SWIG_NewPointerObj((new Vec4d(static_cast< const Vec4d& >(result))), SWIGTYPE_p_Vec4d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_det(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "det" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (double)(arg1)->det();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_height(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "height" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (arg1)->height();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_width(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "width" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (arg1)->width();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_resize(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resize" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "resize" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->resize(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_trans(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  Affined result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trans" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (arg1)->trans();
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_inv(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  Affined result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "inv" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = (arg1)->inv();
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_Unit(int argc, VALUE *argv, VALUE self) {
  Affined result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Affined::Unit();
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_Trn(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Affined result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Affined::Trn" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Affined::Trn" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Affined::Trn" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = Affined::Trn(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_Rot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  char arg2 ;
  Affined result;
  double val1 ;
  int ecode1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Affined::Rot" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_char(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Affined::Rot" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = Affined::Rot(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_Rot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  Vec3d *arg2 = 0 ;
  Affined result;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Affined::Rot" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Affined::Rot" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affined::Rot" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  result = Affined::Rot(arg1,(Vec3d const &)*arg2);
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Affined_Rot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affined_Rot__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Affined_Rot__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Affined_Rot'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_Scale(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Affined result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Affined::Scale" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Affined::Scale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Affined::Scale" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = Affined::Scale(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_ProjectionGL__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = 0 ;
  Vec2d *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  Affined result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Affined::ProjectionGL" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affined::ProjectionGL" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Affined::ProjectionGL" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affined::ProjectionGL" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2d * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Affined::ProjectionGL" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Affined::ProjectionGL" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = Affined::ProjectionGL((Vec3d const &)*arg1,(Vec2d const &)*arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_ProjectionGL__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = 0 ;
  Vec2d *arg2 = 0 ;
  double arg3 ;
  Affined result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Affined::ProjectionGL" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affined::ProjectionGL" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Affined::ProjectionGL" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affined::ProjectionGL" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2d * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Affined::ProjectionGL" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = Affined::ProjectionGL((Vec3d const &)*arg1,(Vec2d const &)*arg2,arg3);
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_ProjectionGL__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = 0 ;
  Vec2d *arg2 = 0 ;
  Affined result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Affined::ProjectionGL" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affined::ProjectionGL" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Affined::ProjectionGL" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affined::ProjectionGL" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2d * >(argp2);
  result = Affined::ProjectionGL((Vec3d const &)*arg1,(Vec2d const &)*arg2);
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Affined_ProjectionGL(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affined_ProjectionGL__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Affined_ProjectionGL__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Affined_ProjectionGL__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Affined_ProjectionGL'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_ProjectionD3D__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = 0 ;
  Vec2d *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  Affined result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Affined::ProjectionD3D" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affined::ProjectionD3D" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Affined::ProjectionD3D" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affined::ProjectionD3D" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2d * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Affined::ProjectionD3D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Affined::ProjectionD3D" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = Affined::ProjectionD3D((Vec3d const &)*arg1,(Vec2d const &)*arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_ProjectionD3D__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = 0 ;
  Vec2d *arg2 = 0 ;
  double arg3 ;
  Affined result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Affined::ProjectionD3D" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affined::ProjectionD3D" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Affined::ProjectionD3D" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affined::ProjectionD3D" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2d * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Affined::ProjectionD3D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = Affined::ProjectionD3D((Vec3d const &)*arg1,(Vec2d const &)*arg2,arg3);
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_ProjectionD3D__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = 0 ;
  Vec2d *arg2 = 0 ;
  Affined result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Affined::ProjectionD3D" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affined::ProjectionD3D" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec2d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Affined::ProjectionD3D" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Affined::ProjectionD3D" "', argument " "2"" of type '" "Vec2d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2d * >(argp2);
  result = Affined::ProjectionD3D((Vec3d const &)*arg1,(Vec2d const &)*arg2);
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Affined_ProjectionD3D(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affined_ProjectionD3D__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Affined_ProjectionD3D__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec2d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Affined_ProjectionD3D__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Affined_ProjectionD3D'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_LookAt__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  Vec3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LookAt" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LookAt" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LookAt" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  (arg1)->LookAt((Vec3d const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_LookAt__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  Vec3d *arg2 = 0 ;
  Vec3d *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LookAt" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LookAt" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LookAt" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LookAt" "', argument " "3"" of type '" "Vec3d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LookAt" "', argument " "3"" of type '" "Vec3d const &""'"); 
  }
  arg3 = reinterpret_cast< Vec3d * >(argp3);
  (arg1)->LookAt((Vec3d const &)*arg2,(Vec3d const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Affined_LookAt(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affined, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affined_LookAt__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affined, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Vec3d, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Affined_LookAt__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Affined_LookAt'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_LookAtGL__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  Vec3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LookAtGL" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LookAtGL" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LookAtGL" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  (arg1)->LookAtGL((Vec3d const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_LookAtGL__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  Vec3d *arg2 = 0 ;
  Vec3d *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LookAtGL" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LookAtGL" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LookAtGL" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LookAtGL" "', argument " "3"" of type '" "Vec3d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LookAtGL" "', argument " "3"" of type '" "Vec3d const &""'"); 
  }
  arg3 = reinterpret_cast< Vec3d * >(argp3);
  (arg1)->LookAtGL((Vec3d const &)*arg2,(Vec3d const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Affined_LookAtGL(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affined, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affined_LookAtGL__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affined, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Vec3d, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Affined_LookAtGL__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Affined_LookAtGL'");
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Affined_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Affined_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Affined);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Affined(int argc, VALUE *argv, VALUE self) {
  Affined *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Affined *)new Affined();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined___getitem__(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__getitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (double)Affined___getitem__(arg1,arg2,arg3);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined___setitem__(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__setitem__" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "__setitem__" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  Affined___setitem__(arg1,arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined___add__(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  Affined arg2 ;
  Affined result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Affined,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Affined""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Affined""'");
    } else {
      arg2 = *(reinterpret_cast< Affined * >(argp2));
    }
  }
  result = Affined___add__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined___sub__(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  Affined arg2 ;
  Affined result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Affined,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "Affined""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "Affined""'");
    } else {
      arg2 = *(reinterpret_cast< Affined * >(argp2));
    }
  }
  result = Affined___sub__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  Affined arg2 ;
  Affined result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Affined,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Affined""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Affined""'");
    } else {
      arg2 = *(reinterpret_cast< Affined * >(argp2));
    }
  }
  result = Affined___mul____SWIG_0(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  Vec3d arg2 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Vec3d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Vec3d""'");
    } else {
      arg2 = *(reinterpret_cast< Vec3d * >(argp2));
    }
  }
  result = Affined___mul____SWIG_1(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  double arg2 ;
  Affined result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = Affined___mul____SWIG_2(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Affined(static_cast< const Affined& >(result))), SWIGTYPE_p_Affined, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Affined___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affined, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Affined, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affined___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affined, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Affined___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Affined, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Affined___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Affined___mul__'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_trne___(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  Vec3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setTrn" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setTrn" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setTrn" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  Affined_setTrn(arg1,(Vec3d const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_trn(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getTrn" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = Affined_getTrn(arg1);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_pose___(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  Vec3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setPos" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setPos" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setPos" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  Affined_setPos(arg1,(Vec3d const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_pos(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPos" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = Affined_getPos(arg1);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_rote___(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  Matrix3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setRot" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setRot" "', argument " "2"" of type '" "Matrix3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setRot" "', argument " "2"" of type '" "Matrix3d const &""'"); 
  }
  arg2 = reinterpret_cast< Matrix3d * >(argp2);
  Affined_setRot(arg1,(Matrix3d const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Affined_rot(int argc, VALUE *argv, VALUE self) {
  Affined *arg1 = (Affined *) 0 ;
  Matrix3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Affined, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getRot" "', argument " "1"" of type '" "Affined *""'"); 
  }
  arg1 = reinterpret_cast< Affined * >(argp1);
  result = Affined_getRot(arg1);
  vresult = SWIG_NewPointerObj((new Matrix3d(static_cast< const Matrix3d& >(result))), SWIGTYPE_p_Matrix3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Affined(Affined *arg1) {
    delete arg1;
}

swig_class cQuaterniond;

SWIGINTERN VALUE
_wrap_Quaterniond_w_set(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "w" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "w" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->w = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_w_get(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "w" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = (double) ((arg1)->w);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_x_set(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_x_get(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = (double) ((arg1)->x);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_y_set(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "y" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_y_get(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = (double) ((arg1)->y);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_z_set(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "z" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "z" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->z = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_z_get(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "z" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = (double) ((arg1)->z);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_clear(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_norm(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = (double)(arg1)->norm();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_square(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "square" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = (double)(arg1)->square();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_resize(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resize" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_size(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "size" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = (arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_unit(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Quaterniond result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unit" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = (arg1)->unit();
  vresult = SWIG_NewPointerObj((new Quaterniond(static_cast< const Quaterniond& >(result))), SWIGTYPE_p_Quaterniond, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_unitize(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unitize" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  (arg1)->unitize();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_RotationHalf(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationHalf" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = (arg1)->RotationHalf();
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_Rotation(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = (arg1)->Rotation();
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_Axis(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = (arg1)->Axis();
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_Theta(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Theta" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = (double)(arg1)->Theta();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Quaterniond__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Quaterniond *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Quaterniond *)new Quaterniond();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Quaterniond__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = 0 ;
  Quaterniond *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Quaterniond,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaterniond" "', argument " "1"" of type '" "Quaterniond const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaterniond" "', argument " "1"" of type '" "Quaterniond const &""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = (Quaterniond *)new Quaterniond((Quaterniond const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Quaterniond__SWIG_2(int argc, VALUE *argv, VALUE self) {
  double *arg1 = (double *) 0 ;
  Quaterniond *result = 0 ;
  double temp1[4] ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  
  for(int i = 0; i < 4; i++)
  temp1[i] = (double)(RARRAY(argv[0])->ptr[i]);
  arg1 = temp1;
  
  result = (Quaterniond *)new Quaterniond((double const *)arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Quaterniond_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Quaterniond_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Quaterniond);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Quaterniond__SWIG_3(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Quaterniond *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Quaterniond" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaterniond" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quaterniond" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Quaterniond" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (Quaterniond *)new Quaterniond(arg1,arg2,arg3,arg4);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Quaterniond(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Quaterniond__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quaterniond, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Quaterniond__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    
    Check_Type(argv[0], T_ARRAY);
    _v = RARRAY(argv[0])->len == 4;
    
    if (_v) {
      return _wrap_new_Quaterniond__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Quaterniond__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_Quaterniond'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_Rot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  Vec3d *arg2 = 0 ;
  Quaterniond result;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Quaterniond::Rot" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaterniond::Rot" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaterniond::Rot" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  result = Quaterniond::Rot(arg1,(Vec3d const &)*arg2);
  vresult = SWIG_NewPointerObj((new Quaterniond(static_cast< const Quaterniond& >(result))), SWIGTYPE_p_Quaterniond, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_Rot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  char arg2 ;
  Quaterniond result;
  double val1 ;
  int ecode1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Quaterniond::Rot" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_char(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaterniond::Rot" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = Quaterniond::Rot(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Quaterniond(static_cast< const Quaterniond& >(result))), SWIGTYPE_p_Quaterniond, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_Rot__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = 0 ;
  Quaterniond result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaterniond::Rot" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaterniond::Rot" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  result = Quaterniond::Rot((Vec3d const &)*arg1);
  vresult = SWIG_NewPointerObj((new Quaterniond(static_cast< const Quaterniond& >(result))), SWIGTYPE_p_Quaterniond, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Quaterniond_Rot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Quaterniond_Rot__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaterniond_Rot__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Quaterniond_Rot__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Quaterniond_Rot'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_Conjugate(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conjugate" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  (arg1)->Conjugate();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_Conjugated(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Quaterniond result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conjugated" "', argument " "1"" of type '" "Quaterniond const *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = ((Quaterniond const *)arg1)->Conjugated();
  vresult = SWIG_NewPointerObj((new Quaterniond(static_cast< const Quaterniond& >(result))), SWIGTYPE_p_Quaterniond, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_Inv(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Quaterniond result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Inv" "', argument " "1"" of type '" "Quaterniond const *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = ((Quaterniond const *)arg1)->Inv();
  vresult = SWIG_NewPointerObj((new Quaterniond(static_cast< const Quaterniond& >(result))), SWIGTYPE_p_Quaterniond, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_FromMatrix(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Matrix3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FromMatrix" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FromMatrix" "', argument " "2"" of type '" "Matrix3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FromMatrix" "', argument " "2"" of type '" "Matrix3d const &""'"); 
  }
  arg2 = reinterpret_cast< Matrix3d * >(argp2);
  (arg1)->FromMatrix((Matrix3d const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_ToMatrix(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Matrix3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ToMatrix" "', argument " "1"" of type '" "Quaterniond const *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Matrix3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ToMatrix" "', argument " "2"" of type '" "Matrix3d &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToMatrix" "', argument " "2"" of type '" "Matrix3d &""'"); 
  }
  arg2 = reinterpret_cast< Matrix3d * >(argp2);
  ((Quaterniond const *)arg1)->ToMatrix(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_ToEular(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Vec3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ToEular" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ToEular" "', argument " "2"" of type '" "Vec3d &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToEular" "', argument " "2"" of type '" "Vec3d &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  (arg1)->ToEular(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_FromEular(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Vec3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FromEular" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FromEular" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FromEular" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  (arg1)->FromEular((Vec3d const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_RotationArc(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Vec3d *arg2 = 0 ;
  Vec3d *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationArc" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationArc" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationArc" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RotationArc" "', argument " "3"" of type '" "Vec3d const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationArc" "', argument " "3"" of type '" "Vec3d const &""'"); 
  }
  arg3 = reinterpret_cast< Vec3d * >(argp3);
  (arg1)->RotationArc((Vec3d const &)*arg2,(Vec3d const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_Euler(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Euler" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Euler" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Euler" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Euler" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Euler(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_Derivative(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Vec3d *arg2 = 0 ;
  Quaterniond result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Derivative" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Derivative" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Derivative" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  result = (arg1)->Derivative((Vec3d const &)*arg2);
  vresult = SWIG_NewPointerObj((new Quaterniond(static_cast< const Quaterniond& >(result))), SWIGTYPE_p_Quaterniond, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_AngularVelocity(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Quaterniond *arg2 = 0 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVelocity" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Quaterniond,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularVelocity" "', argument " "2"" of type '" "Quaterniond const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularVelocity" "', argument " "2"" of type '" "Quaterniond const &""'"); 
  }
  arg2 = reinterpret_cast< Quaterniond * >(argp2);
  result = (arg1)->AngularVelocity((Quaterniond const &)*arg2);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond___getitem__(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  size_t arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__getitem__" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (double)Quaterniond___getitem__(arg1,arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond___setitem__(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  size_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__setitem__" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "__setitem__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  Quaterniond___setitem__(arg1,arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond___add__(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Quaterniond arg2 ;
  Quaterniond result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Quaterniond,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "Quaterniond""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "Quaterniond""'");
    } else {
      arg2 = *(reinterpret_cast< Quaterniond * >(argp2));
    }
  }
  result = Quaterniond___add__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Quaterniond(static_cast< const Quaterniond& >(result))), SWIGTYPE_p_Quaterniond, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond___sub__(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Quaterniond arg2 ;
  Quaterniond result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Quaterniond,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "Quaterniond""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "Quaterniond""'");
    } else {
      arg2 = *(reinterpret_cast< Quaterniond * >(argp2));
    }
  }
  result = Quaterniond___sub__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Quaterniond(static_cast< const Quaterniond& >(result))), SWIGTYPE_p_Quaterniond, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond___mul__(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Quaterniond arg2 ;
  Quaterniond result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Quaterniond,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Quaterniond""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Quaterniond""'");
    } else {
      arg2 = *(reinterpret_cast< Quaterniond * >(argp2));
    }
  }
  result = Quaterniond___mul__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Quaterniond(static_cast< const Quaterniond& >(result))), SWIGTYPE_p_Quaterniond, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_transform(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Vec3d arg2 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transform" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transform" "', argument " "2"" of type '" "Vec3d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transform" "', argument " "2"" of type '" "Vec3d""'");
    } else {
      arg2 = *(reinterpret_cast< Vec3d * >(argp2));
    }
  }
  result = Quaterniond_transform(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_ve___(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Vec3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setV" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setV" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setV" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  Quaterniond_setV(arg1,(Vec3d const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaterniond_v(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = (Quaterniond *) 0 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Quaterniond, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getV" "', argument " "1"" of type '" "Quaterniond *""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = Quaterniond_getV(arg1);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Quaterniond(Quaterniond *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_dot(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = 0 ;
  Quaterniond *arg2 = 0 ;
  double result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Quaterniond,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dot" "', argument " "1"" of type '" "Quaterniond const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dot" "', argument " "1"" of type '" "Quaterniond const &""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Quaterniond,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dot" "', argument " "2"" of type '" "Quaterniond const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dot" "', argument " "2"" of type '" "Quaterniond const &""'"); 
  }
  arg2 = reinterpret_cast< Quaterniond * >(argp2);
  result = (double)dot((Quaterniond const &)*arg1,(Quaterniond const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_interpolate(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  Quaterniond *arg2 = 0 ;
  Quaterniond *arg3 = 0 ;
  Quaterniond result;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "interpolate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Quaterniond,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interpolate" "', argument " "2"" of type '" "Quaterniond const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolate" "', argument " "2"" of type '" "Quaterniond const &""'"); 
  }
  arg2 = reinterpret_cast< Quaterniond * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Quaterniond,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "interpolate" "', argument " "3"" of type '" "Quaterniond const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolate" "', argument " "3"" of type '" "Quaterniond const &""'"); 
  }
  arg3 = reinterpret_cast< Quaterniond * >(argp3);
  result = interpolate(arg1,(Quaterniond const &)*arg2,(Quaterniond const &)*arg3);
  vresult = SWIG_NewPointerObj((new Quaterniond(static_cast< const Quaterniond& >(result))), SWIGTYPE_p_Quaterniond, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class cPosed;

SWIGINTERN VALUE
_wrap_Posed_w_set(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "w" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "w" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->w = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_w_get(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "w" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  result = (double) ((arg1)->w);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_x_set(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_x_get(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  result = (double) ((arg1)->x);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_y_set(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "y" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_y_get(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "y" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  result = (double) ((arg1)->y);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_z_set(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "z" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "z" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->z = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_z_get(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "z" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  result = (double) ((arg1)->z);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_px_set(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "px" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "px" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->px = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_px_get(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "px" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  result = (double) ((arg1)->px);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_py_set(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "py" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "py" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->py = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_py_get(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "py" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  result = (double) ((arg1)->py);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_pz_set(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pz" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pz" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->pz = arg2;
  
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_pz_get(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pz" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  result = (double) ((arg1)->pz);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_clear(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clear" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_norm(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  result = (double)(arg1)->norm();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_square(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "square" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  result = (double)(arg1)->square();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_resize(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resize" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_size(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "size" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  result = (arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_unit(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  Posed result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unit" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  result = (arg1)->unit();
  vresult = SWIG_NewPointerObj((new Posed(static_cast< const Posed& >(result))), SWIGTYPE_p_Posed, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_unitize(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unitize" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  (arg1)->unitize();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_Inv(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  Posed result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Inv" "', argument " "1"" of type '" "Posed const *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  result = ((Posed const *)arg1)->Inv();
  vresult = SWIG_NewPointerObj((new Posed(static_cast< const Posed& >(result))), SWIGTYPE_p_Posed, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_Unit__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Posed result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Posed::Unit();
  vresult = SWIG_NewPointerObj((new Posed(static_cast< const Posed& >(result))), SWIGTYPE_p_Posed, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_Unit__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = 0 ;
  Posed result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Posed::Unit" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Posed::Unit" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  result = Posed::Unit((Vec3d const &)*arg1);
  vresult = SWIG_NewPointerObj((new Posed(static_cast< const Posed& >(result))), SWIGTYPE_p_Posed, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_Unit__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Quaterniond *arg1 = 0 ;
  Posed result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Quaterniond,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Posed::Unit" "', argument " "1"" of type '" "Quaterniond const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Posed::Unit" "', argument " "1"" of type '" "Quaterniond const &""'"); 
  }
  arg1 = reinterpret_cast< Quaterniond * >(argp1);
  result = Posed::Unit((Quaterniond const &)*arg1);
  vresult = SWIG_NewPointerObj((new Posed(static_cast< const Posed& >(result))), SWIGTYPE_p_Posed, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Posed_Unit(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_Posed_Unit__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Posed_Unit__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Quaterniond, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Posed_Unit__SWIG_2(nargs, args, self);
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Posed_Unit'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_Trn__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Posed result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Posed::Trn" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Posed::Trn" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Posed::Trn" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = Posed::Trn(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new Posed(static_cast< const Posed& >(result))), SWIGTYPE_p_Posed, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_Trn__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = 0 ;
  Posed result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Posed::Trn" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Posed::Trn" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  result = Posed::Trn((Vec3d const &)*arg1);
  vresult = SWIG_NewPointerObj((new Posed(static_cast< const Posed& >(result))), SWIGTYPE_p_Posed, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Posed_Trn(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Posed_Trn__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Posed_Trn__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Posed_Trn'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_Rot__SWIG_0(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Posed result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Posed::Rot" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Posed::Rot" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Posed::Rot" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Posed::Rot" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = Posed::Rot(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Posed(static_cast< const Posed& >(result))), SWIGTYPE_p_Posed, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_Rot__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  Vec3d *arg2 = 0 ;
  Posed result;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Posed::Rot" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Posed::Rot" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Posed::Rot" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  result = Posed::Rot(arg1,(Vec3d const &)*arg2);
  vresult = SWIG_NewPointerObj((new Posed(static_cast< const Posed& >(result))), SWIGTYPE_p_Posed, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_Rot__SWIG_2(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  char arg2 ;
  Posed result;
  double val1 ;
  int ecode1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Posed::Rot" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_char(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Posed::Rot" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = Posed::Rot(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Posed(static_cast< const Posed& >(result))), SWIGTYPE_p_Posed, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_Rot__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Vec3d *arg1 = 0 ;
  Posed result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Posed::Rot" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Posed::Rot" "', argument " "1"" of type '" "Vec3d const &""'"); 
  }
  arg1 = reinterpret_cast< Vec3d * >(argp1);
  result = Posed::Rot((Vec3d const &)*arg1);
  vresult = SWIG_NewPointerObj((new Posed(static_cast< const Posed& >(result))), SWIGTYPE_p_Posed, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Posed_Rot(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Vec3d, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Posed_Rot__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Vec3d, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Posed_Rot__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Posed_Rot__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Posed_Rot__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'Posed_Rot'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_FromAffine(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  Affined *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FromAffine" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Affined,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FromAffine" "', argument " "2"" of type '" "Affined const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FromAffine" "', argument " "2"" of type '" "Affined const &""'"); 
  }
  arg2 = reinterpret_cast< Affined * >(argp2);
  (arg1)->FromAffine((Affined const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_ToAffine(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  Affined *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ToAffine" "', argument " "1"" of type '" "Posed const *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Affined,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ToAffine" "', argument " "2"" of type '" "Affined &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToAffine" "', argument " "2"" of type '" "Affined &""'"); 
  }
  arg2 = reinterpret_cast< Affined * >(argp2);
  ((Posed const *)arg1)->ToAffine(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Posed__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Posed *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Posed *)new Posed();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Posed__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = 0 ;
  Posed *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Posed,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Posed" "', argument " "1"" of type '" "Posed const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Posed" "', argument " "1"" of type '" "Posed const &""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  result = (Posed *)new Posed((Posed const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Posed_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Posed_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Posed);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Posed__SWIG_2(int argc, VALUE *argv, VALUE self) {
  double *arg1 = (double *) 0 ;
  Posed *result = 0 ;
  double temp1[7] ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  
  for(int i = 0; i < 7; i++)
  temp1[i] = (double)(RARRAY(argv[0])->ptr[i]);
  arg1 = temp1;
  
  result = (Posed *)new Posed((double const *)arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Posed(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Posed__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Posed, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Posed__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    
    Check_Type(argv[0], T_ARRAY);
    _v = RARRAY(argv[0])->len == 7;
    
    if (_v) {
      return _wrap_new_Posed__SWIG_2(nargs, args, self);
    }
  }
  
fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_Posed'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_transform(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  Vec3d arg2 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transform" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transform" "', argument " "2"" of type '" "Vec3d""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transform" "', argument " "2"" of type '" "Vec3d""'");
    } else {
      arg2 = *(reinterpret_cast< Vec3d * >(argp2));
    }
  }
  result = Posed_transform(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed___mul__(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  Posed arg2 ;
  Posed result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Posed,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "Posed""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "Posed""'");
    } else {
      arg2 = *(reinterpret_cast< Posed * >(argp2));
    }
  }
  result = Posed___mul__(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Posed(static_cast< const Posed& >(result))), SWIGTYPE_p_Posed, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_pose___(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  Vec3d *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setPos" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Vec3d,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setPos" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setPos" "', argument " "2"" of type '" "Vec3d const &""'"); 
  }
  arg2 = reinterpret_cast< Vec3d * >(argp2);
  Posed_setPos(arg1,(Vec3d const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_pos(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  Vec3d result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPos" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  result = Posed_getPos(arg1);
  vresult = SWIG_NewPointerObj((new Vec3d(static_cast< const Vec3d& >(result))), SWIGTYPE_p_Vec3d, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_orie___(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  Quaterniond *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setOri" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Quaterniond,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setOri" "', argument " "2"" of type '" "Quaterniond const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setOri" "', argument " "2"" of type '" "Quaterniond const &""'"); 
  }
  arg2 = reinterpret_cast< Quaterniond * >(argp2);
  Posed_setOri(arg1,(Quaterniond const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Posed_ori(int argc, VALUE *argv, VALUE self) {
  Posed *arg1 = (Posed *) 0 ;
  Quaterniond result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Posed, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getOri" "', argument " "1"" of type '" "Posed *""'"); 
  }
  arg1 = reinterpret_cast< Posed * >(argp1);
  result = Posed_getOri(arg1);
  vresult = SWIG_NewPointerObj((new Quaterniond(static_cast< const Quaterniond& >(result))), SWIGTYPE_p_Quaterniond, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Posed(Posed *arg1) {
    delete arg1;
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_Affine2d = {"_p_Affine2d", "Affine2d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Affine2f = {"_p_Affine2f", "Affine2f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Affined = {"_p_Affined", "Affined *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Affinef = {"_p_Affinef", "Affinef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix2d = {"_p_Matrix2d", "Matrix2d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix2f = {"_p_Matrix2f", "Matrix2f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix3d = {"_p_Matrix3d", "Matrix3d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix3f = {"_p_Matrix3f", "Matrix3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Posed = {"_p_Posed", "Posed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Quaterniond = {"_p_Quaterniond", "Quaterniond *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vec2d = {"_p_Vec2d", "Vec2d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vec2f = {"_p_Vec2f", "Vec2f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vec3d = {"_p_Vec3d", "Vec3d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vec3f = {"_p_Vec3f", "Vec3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vec4d = {"_p_Vec4d", "Vec4d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vec4f = {"_p_Vec4f", "Vec4f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Affine2d,
  &_swigt__p_Affine2f,
  &_swigt__p_Affined,
  &_swigt__p_Affinef,
  &_swigt__p_Matrix2d,
  &_swigt__p_Matrix2f,
  &_swigt__p_Matrix3d,
  &_swigt__p_Matrix3f,
  &_swigt__p_Posed,
  &_swigt__p_Quaterniond,
  &_swigt__p_Vec2d,
  &_swigt__p_Vec2f,
  &_swigt__p_Vec3d,
  &_swigt__p_Vec3f,
  &_swigt__p_Vec4d,
  &_swigt__p_Vec4f,
  &_swigt__p_char,
};

static swig_cast_info _swigc__p_Affine2d[] = {  {&_swigt__p_Affine2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Affine2f[] = {  {&_swigt__p_Affine2f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Affined[] = {  {&_swigt__p_Affined, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Affinef[] = {  {&_swigt__p_Affinef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix2d[] = {  {&_swigt__p_Matrix2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix2f[] = {  {&_swigt__p_Matrix2f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix3d[] = {  {&_swigt__p_Matrix3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix3f[] = {  {&_swigt__p_Matrix3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Posed[] = {  {&_swigt__p_Posed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quaterniond[] = {  {&_swigt__p_Quaterniond, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec2d[] = {  {&_swigt__p_Vec2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec2f[] = {  {&_swigt__p_Vec2f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec3d[] = {  {&_swigt__p_Vec3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec3f[] = {  {&_swigt__p_Vec3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec4d[] = {  {&_swigt__p_Vec4d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec4f[] = {  {&_swigt__p_Vec4f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Affine2d,
  _swigc__p_Affine2f,
  _swigc__p_Affined,
  _swigc__p_Affinef,
  _swigc__p_Matrix2d,
  _swigc__p_Matrix2f,
  _swigc__p_Matrix3d,
  _swigc__p_Matrix3f,
  _swigc__p_Posed,
  _swigc__p_Quaterniond,
  _swigc__p_Vec2d,
  _swigc__p_Vec2f,
  _swigc__p_Vec3d,
  _swigc__p_Vec3f,
  _swigc__p_Vec4d,
  _swigc__p_Vec4f,
  _swigc__p_char,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_PTM(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mPTM = rb_define_module("PTM");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  rb_define_module_function(mPTM, "Deg", VALUEFUNC(_wrap_Deg), -1);
  rb_define_module_function(mPTM, "Rad", VALUEFUNC(_wrap_Rad), -1);
  
  cVec2f.klass = rb_define_class_under(mPTM, "Vec2f", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Vec2f, (void *) &cVec2f);
  rb_define_alloc_func(cVec2f.klass, _wrap_Vec2f_allocate);
  rb_define_method(cVec2f.klass, "initialize", VALUEFUNC(_wrap_new_Vec2f), -1);
  rb_define_method(cVec2f.klass, "x=", VALUEFUNC(_wrap_Vec2f_x_set), -1);
  rb_define_method(cVec2f.klass, "x", VALUEFUNC(_wrap_Vec2f_x_get), -1);
  rb_define_method(cVec2f.klass, "y=", VALUEFUNC(_wrap_Vec2f_y_set), -1);
  rb_define_method(cVec2f.klass, "y", VALUEFUNC(_wrap_Vec2f_y_get), -1);
  rb_define_method(cVec2f.klass, "clear", VALUEFUNC(_wrap_Vec2f_clear), -1);
  rb_define_method(cVec2f.klass, "norm", VALUEFUNC(_wrap_Vec2f_norm), -1);
  rb_define_method(cVec2f.klass, "square", VALUEFUNC(_wrap_Vec2f_square), -1);
  rb_define_method(cVec2f.klass, "resize", VALUEFUNC(_wrap_Vec2f_resize), -1);
  rb_define_method(cVec2f.klass, "size", VALUEFUNC(_wrap_Vec2f_size), -1);
  rb_define_method(cVec2f.klass, "unit", VALUEFUNC(_wrap_Vec2f_unit), -1);
  rb_define_method(cVec2f.klass, "unitize", VALUEFUNC(_wrap_Vec2f_unitize), -1);
  rb_define_singleton_method(cVec2f.klass, "Zero", VALUEFUNC(_wrap_Vec2f_Zero), -1);
  rb_define_method(cVec2f.klass, "[]", VALUEFUNC(_wrap_Vec2f___getitem__), -1);
  rb_define_method(cVec2f.klass, "[]=", VALUEFUNC(_wrap_Vec2f___setitem__), -1);
  rb_define_method(cVec2f.klass, "+", VALUEFUNC(_wrap_Vec2f___add__), -1);
  rb_define_method(cVec2f.klass, "-", VALUEFUNC(_wrap_Vec2f___sub__), -1);
  rb_define_method(cVec2f.klass, "*", VALUEFUNC(_wrap_Vec2f___mul__), -1);
  cVec2f.mark = 0;
  cVec2f.destroy = (void (*)(void *)) free_Vec2f;
  cVec2f.trackObjects = 0;
  
  cVec2d.klass = rb_define_class_under(mPTM, "Vec2d", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Vec2d, (void *) &cVec2d);
  rb_define_alloc_func(cVec2d.klass, _wrap_Vec2d_allocate);
  rb_define_method(cVec2d.klass, "initialize", VALUEFUNC(_wrap_new_Vec2d), -1);
  rb_define_method(cVec2d.klass, "x=", VALUEFUNC(_wrap_Vec2d_x_set), -1);
  rb_define_method(cVec2d.klass, "x", VALUEFUNC(_wrap_Vec2d_x_get), -1);
  rb_define_method(cVec2d.klass, "y=", VALUEFUNC(_wrap_Vec2d_y_set), -1);
  rb_define_method(cVec2d.klass, "y", VALUEFUNC(_wrap_Vec2d_y_get), -1);
  rb_define_method(cVec2d.klass, "clear", VALUEFUNC(_wrap_Vec2d_clear), -1);
  rb_define_method(cVec2d.klass, "norm", VALUEFUNC(_wrap_Vec2d_norm), -1);
  rb_define_method(cVec2d.klass, "square", VALUEFUNC(_wrap_Vec2d_square), -1);
  rb_define_method(cVec2d.klass, "resize", VALUEFUNC(_wrap_Vec2d_resize), -1);
  rb_define_method(cVec2d.klass, "size", VALUEFUNC(_wrap_Vec2d_size), -1);
  rb_define_method(cVec2d.klass, "unit", VALUEFUNC(_wrap_Vec2d_unit), -1);
  rb_define_method(cVec2d.klass, "unitize", VALUEFUNC(_wrap_Vec2d_unitize), -1);
  rb_define_singleton_method(cVec2d.klass, "Zero", VALUEFUNC(_wrap_Vec2d_Zero), -1);
  rb_define_method(cVec2d.klass, "[]", VALUEFUNC(_wrap_Vec2d___getitem__), -1);
  rb_define_method(cVec2d.klass, "[]=", VALUEFUNC(_wrap_Vec2d___setitem__), -1);
  rb_define_method(cVec2d.klass, "+", VALUEFUNC(_wrap_Vec2d___add__), -1);
  rb_define_method(cVec2d.klass, "-", VALUEFUNC(_wrap_Vec2d___sub__), -1);
  rb_define_method(cVec2d.klass, "*", VALUEFUNC(_wrap_Vec2d___mul__), -1);
  cVec2d.mark = 0;
  cVec2d.destroy = (void (*)(void *)) free_Vec2d;
  cVec2d.trackObjects = 0;
  
  cVec3f.klass = rb_define_class_under(mPTM, "Vec3f", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Vec3f, (void *) &cVec3f);
  rb_define_alloc_func(cVec3f.klass, _wrap_Vec3f_allocate);
  rb_define_method(cVec3f.klass, "initialize", VALUEFUNC(_wrap_new_Vec3f), -1);
  rb_define_method(cVec3f.klass, "x=", VALUEFUNC(_wrap_Vec3f_x_set), -1);
  rb_define_method(cVec3f.klass, "x", VALUEFUNC(_wrap_Vec3f_x_get), -1);
  rb_define_method(cVec3f.klass, "y=", VALUEFUNC(_wrap_Vec3f_y_set), -1);
  rb_define_method(cVec3f.klass, "y", VALUEFUNC(_wrap_Vec3f_y_get), -1);
  rb_define_method(cVec3f.klass, "z=", VALUEFUNC(_wrap_Vec3f_z_set), -1);
  rb_define_method(cVec3f.klass, "z", VALUEFUNC(_wrap_Vec3f_z_get), -1);
  rb_define_method(cVec3f.klass, "clear", VALUEFUNC(_wrap_Vec3f_clear), -1);
  rb_define_method(cVec3f.klass, "norm", VALUEFUNC(_wrap_Vec3f_norm), -1);
  rb_define_method(cVec3f.klass, "square", VALUEFUNC(_wrap_Vec3f_square), -1);
  rb_define_method(cVec3f.klass, "resize", VALUEFUNC(_wrap_Vec3f_resize), -1);
  rb_define_method(cVec3f.klass, "size", VALUEFUNC(_wrap_Vec3f_size), -1);
  rb_define_method(cVec3f.klass, "unit", VALUEFUNC(_wrap_Vec3f_unit), -1);
  rb_define_method(cVec3f.klass, "unitize", VALUEFUNC(_wrap_Vec3f_unitize), -1);
  rb_define_singleton_method(cVec3f.klass, "Zero", VALUEFUNC(_wrap_Vec3f_Zero), -1);
  rb_define_method(cVec3f.klass, "[]", VALUEFUNC(_wrap_Vec3f___getitem__), -1);
  rb_define_method(cVec3f.klass, "[]=", VALUEFUNC(_wrap_Vec3f___setitem__), -1);
  rb_define_method(cVec3f.klass, "+", VALUEFUNC(_wrap_Vec3f___add__), -1);
  rb_define_method(cVec3f.klass, "-", VALUEFUNC(_wrap_Vec3f___sub__), -1);
  rb_define_method(cVec3f.klass, "*", VALUEFUNC(_wrap_Vec3f___mul__), -1);
  cVec3f.mark = 0;
  cVec3f.destroy = (void (*)(void *)) free_Vec3f;
  cVec3f.trackObjects = 0;
  
  cVec3d.klass = rb_define_class_under(mPTM, "Vec3d", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Vec3d, (void *) &cVec3d);
  rb_define_alloc_func(cVec3d.klass, _wrap_Vec3d_allocate);
  rb_define_method(cVec3d.klass, "initialize", VALUEFUNC(_wrap_new_Vec3d), -1);
  rb_define_method(cVec3d.klass, "x=", VALUEFUNC(_wrap_Vec3d_x_set), -1);
  rb_define_method(cVec3d.klass, "x", VALUEFUNC(_wrap_Vec3d_x_get), -1);
  rb_define_method(cVec3d.klass, "y=", VALUEFUNC(_wrap_Vec3d_y_set), -1);
  rb_define_method(cVec3d.klass, "y", VALUEFUNC(_wrap_Vec3d_y_get), -1);
  rb_define_method(cVec3d.klass, "z=", VALUEFUNC(_wrap_Vec3d_z_set), -1);
  rb_define_method(cVec3d.klass, "z", VALUEFUNC(_wrap_Vec3d_z_get), -1);
  rb_define_method(cVec3d.klass, "clear", VALUEFUNC(_wrap_Vec3d_clear), -1);
  rb_define_method(cVec3d.klass, "norm", VALUEFUNC(_wrap_Vec3d_norm), -1);
  rb_define_method(cVec3d.klass, "square", VALUEFUNC(_wrap_Vec3d_square), -1);
  rb_define_method(cVec3d.klass, "resize", VALUEFUNC(_wrap_Vec3d_resize), -1);
  rb_define_method(cVec3d.klass, "size", VALUEFUNC(_wrap_Vec3d_size), -1);
  rb_define_method(cVec3d.klass, "unit", VALUEFUNC(_wrap_Vec3d_unit), -1);
  rb_define_method(cVec3d.klass, "unitize", VALUEFUNC(_wrap_Vec3d_unitize), -1);
  rb_define_singleton_method(cVec3d.klass, "Zero", VALUEFUNC(_wrap_Vec3d_Zero), -1);
  rb_define_method(cVec3d.klass, "[]", VALUEFUNC(_wrap_Vec3d___getitem__), -1);
  rb_define_method(cVec3d.klass, "[]=", VALUEFUNC(_wrap_Vec3d___setitem__), -1);
  rb_define_method(cVec3d.klass, "+", VALUEFUNC(_wrap_Vec3d___add__), -1);
  rb_define_method(cVec3d.klass, "-", VALUEFUNC(_wrap_Vec3d___sub__), -1);
  rb_define_method(cVec3d.klass, "*", VALUEFUNC(_wrap_Vec3d___mul__), -1);
  cVec3d.mark = 0;
  cVec3d.destroy = (void (*)(void *)) free_Vec3d;
  cVec3d.trackObjects = 0;
  
  cVec4f.klass = rb_define_class_under(mPTM, "Vec4f", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Vec4f, (void *) &cVec4f);
  rb_define_alloc_func(cVec4f.klass, _wrap_Vec4f_allocate);
  rb_define_method(cVec4f.klass, "initialize", VALUEFUNC(_wrap_new_Vec4f), -1);
  rb_define_method(cVec4f.klass, "x=", VALUEFUNC(_wrap_Vec4f_x_set), -1);
  rb_define_method(cVec4f.klass, "x", VALUEFUNC(_wrap_Vec4f_x_get), -1);
  rb_define_method(cVec4f.klass, "y=", VALUEFUNC(_wrap_Vec4f_y_set), -1);
  rb_define_method(cVec4f.klass, "y", VALUEFUNC(_wrap_Vec4f_y_get), -1);
  rb_define_method(cVec4f.klass, "z=", VALUEFUNC(_wrap_Vec4f_z_set), -1);
  rb_define_method(cVec4f.klass, "z", VALUEFUNC(_wrap_Vec4f_z_get), -1);
  rb_define_method(cVec4f.klass, "w=", VALUEFUNC(_wrap_Vec4f_w_set), -1);
  rb_define_method(cVec4f.klass, "w", VALUEFUNC(_wrap_Vec4f_w_get), -1);
  rb_define_method(cVec4f.klass, "clear", VALUEFUNC(_wrap_Vec4f_clear), -1);
  rb_define_method(cVec4f.klass, "norm", VALUEFUNC(_wrap_Vec4f_norm), -1);
  rb_define_method(cVec4f.klass, "square", VALUEFUNC(_wrap_Vec4f_square), -1);
  rb_define_method(cVec4f.klass, "resize", VALUEFUNC(_wrap_Vec4f_resize), -1);
  rb_define_method(cVec4f.klass, "size", VALUEFUNC(_wrap_Vec4f_size), -1);
  rb_define_method(cVec4f.klass, "unit", VALUEFUNC(_wrap_Vec4f_unit), -1);
  rb_define_method(cVec4f.klass, "unitize", VALUEFUNC(_wrap_Vec4f_unitize), -1);
  rb_define_singleton_method(cVec4f.klass, "Zero", VALUEFUNC(_wrap_Vec4f_Zero), -1);
  rb_define_method(cVec4f.klass, "[]", VALUEFUNC(_wrap_Vec4f___getitem__), -1);
  rb_define_method(cVec4f.klass, "[]=", VALUEFUNC(_wrap_Vec4f___setitem__), -1);
  rb_define_method(cVec4f.klass, "+", VALUEFUNC(_wrap_Vec4f___add__), -1);
  rb_define_method(cVec4f.klass, "-", VALUEFUNC(_wrap_Vec4f___sub__), -1);
  rb_define_method(cVec4f.klass, "*", VALUEFUNC(_wrap_Vec4f___mul__), -1);
  cVec4f.mark = 0;
  cVec4f.destroy = (void (*)(void *)) free_Vec4f;
  cVec4f.trackObjects = 0;
  
  cVec4d.klass = rb_define_class_under(mPTM, "Vec4d", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Vec4d, (void *) &cVec4d);
  rb_define_alloc_func(cVec4d.klass, _wrap_Vec4d_allocate);
  rb_define_method(cVec4d.klass, "initialize", VALUEFUNC(_wrap_new_Vec4d), -1);
  rb_define_method(cVec4d.klass, "x=", VALUEFUNC(_wrap_Vec4d_x_set), -1);
  rb_define_method(cVec4d.klass, "x", VALUEFUNC(_wrap_Vec4d_x_get), -1);
  rb_define_method(cVec4d.klass, "y=", VALUEFUNC(_wrap_Vec4d_y_set), -1);
  rb_define_method(cVec4d.klass, "y", VALUEFUNC(_wrap_Vec4d_y_get), -1);
  rb_define_method(cVec4d.klass, "z=", VALUEFUNC(_wrap_Vec4d_z_set), -1);
  rb_define_method(cVec4d.klass, "z", VALUEFUNC(_wrap_Vec4d_z_get), -1);
  rb_define_method(cVec4d.klass, "w=", VALUEFUNC(_wrap_Vec4d_w_set), -1);
  rb_define_method(cVec4d.klass, "w", VALUEFUNC(_wrap_Vec4d_w_get), -1);
  rb_define_method(cVec4d.klass, "clear", VALUEFUNC(_wrap_Vec4d_clear), -1);
  rb_define_method(cVec4d.klass, "norm", VALUEFUNC(_wrap_Vec4d_norm), -1);
  rb_define_method(cVec4d.klass, "square", VALUEFUNC(_wrap_Vec4d_square), -1);
  rb_define_method(cVec4d.klass, "resize", VALUEFUNC(_wrap_Vec4d_resize), -1);
  rb_define_method(cVec4d.klass, "size", VALUEFUNC(_wrap_Vec4d_size), -1);
  rb_define_method(cVec4d.klass, "unit", VALUEFUNC(_wrap_Vec4d_unit), -1);
  rb_define_method(cVec4d.klass, "unitize", VALUEFUNC(_wrap_Vec4d_unitize), -1);
  rb_define_singleton_method(cVec4d.klass, "Zero", VALUEFUNC(_wrap_Vec4d_Zero), -1);
  rb_define_method(cVec4d.klass, "[]", VALUEFUNC(_wrap_Vec4d___getitem__), -1);
  rb_define_method(cVec4d.klass, "[]=", VALUEFUNC(_wrap_Vec4d___setitem__), -1);
  rb_define_method(cVec4d.klass, "+", VALUEFUNC(_wrap_Vec4d___add__), -1);
  rb_define_method(cVec4d.klass, "-", VALUEFUNC(_wrap_Vec4d___sub__), -1);
  rb_define_method(cVec4d.klass, "*", VALUEFUNC(_wrap_Vec4d___mul__), -1);
  cVec4d.mark = 0;
  cVec4d.destroy = (void (*)(void *)) free_Vec4d;
  cVec4d.trackObjects = 0;
  
  cMatrix2f.klass = rb_define_class_under(mPTM, "Matrix2f", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Matrix2f, (void *) &cMatrix2f);
  rb_define_alloc_func(cMatrix2f.klass, _wrap_Matrix2f_allocate);
  rb_define_method(cMatrix2f.klass, "initialize", VALUEFUNC(_wrap_new_Matrix2f), -1);
  rb_define_method(cMatrix2f.klass, "xx=", VALUEFUNC(_wrap_Matrix2f_xx_set), -1);
  rb_define_method(cMatrix2f.klass, "xx", VALUEFUNC(_wrap_Matrix2f_xx_get), -1);
  rb_define_method(cMatrix2f.klass, "xy=", VALUEFUNC(_wrap_Matrix2f_xy_set), -1);
  rb_define_method(cMatrix2f.klass, "xy", VALUEFUNC(_wrap_Matrix2f_xy_get), -1);
  rb_define_method(cMatrix2f.klass, "yx=", VALUEFUNC(_wrap_Matrix2f_yx_set), -1);
  rb_define_method(cMatrix2f.klass, "yx", VALUEFUNC(_wrap_Matrix2f_yx_get), -1);
  rb_define_method(cMatrix2f.klass, "yy=", VALUEFUNC(_wrap_Matrix2f_yy_set), -1);
  rb_define_method(cMatrix2f.klass, "yy", VALUEFUNC(_wrap_Matrix2f_yy_get), -1);
  rb_define_method(cMatrix2f.klass, "clear", VALUEFUNC(_wrap_Matrix2f_clear), -1);
  rb_define_method(cMatrix2f.klass, "col", VALUEFUNC(_wrap_Matrix2f_col), -1);
  rb_define_method(cMatrix2f.klass, "row", VALUEFUNC(_wrap_Matrix2f_row), -1);
  rb_define_method(cMatrix2f.klass, "det", VALUEFUNC(_wrap_Matrix2f_det), -1);
  rb_define_method(cMatrix2f.klass, "height", VALUEFUNC(_wrap_Matrix2f_height), -1);
  rb_define_method(cMatrix2f.klass, "width", VALUEFUNC(_wrap_Matrix2f_width), -1);
  rb_define_method(cMatrix2f.klass, "resize", VALUEFUNC(_wrap_Matrix2f_resize), -1);
  rb_define_method(cMatrix2f.klass, "trans", VALUEFUNC(_wrap_Matrix2f_trans), -1);
  rb_define_method(cMatrix2f.klass, "inv", VALUEFUNC(_wrap_Matrix2f_inv), -1);
  rb_define_singleton_method(cMatrix2f.klass, "Zero", VALUEFUNC(_wrap_Matrix2f_Zero), -1);
  rb_define_singleton_method(cMatrix2f.klass, "Unit", VALUEFUNC(_wrap_Matrix2f_Unit), -1);
  rb_define_singleton_method(cMatrix2f.klass, "Diag", VALUEFUNC(_wrap_Matrix2f_Diag), -1);
  rb_define_singleton_method(cMatrix2f.klass, "Rot", VALUEFUNC(_wrap_Matrix2f_Rot), -1);
  rb_define_method(cMatrix2f.klass, "angle", VALUEFUNC(_wrap_Matrix2f_angle), -1);
  rb_define_method(cMatrix2f.klass, "[]", VALUEFUNC(_wrap_Matrix2f___getitem__), -1);
  rb_define_method(cMatrix2f.klass, "[]=", VALUEFUNC(_wrap_Matrix2f___setitem__), -1);
  rb_define_method(cMatrix2f.klass, "+", VALUEFUNC(_wrap_Matrix2f___add__), -1);
  rb_define_method(cMatrix2f.klass, "-", VALUEFUNC(_wrap_Matrix2f___sub__), -1);
  rb_define_method(cMatrix2f.klass, "*", VALUEFUNC(_wrap_Matrix2f___mul__), -1);
  cMatrix2f.mark = 0;
  cMatrix2f.destroy = (void (*)(void *)) free_Matrix2f;
  cMatrix2f.trackObjects = 0;
  
  cMatrix2d.klass = rb_define_class_under(mPTM, "Matrix2d", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Matrix2d, (void *) &cMatrix2d);
  rb_define_alloc_func(cMatrix2d.klass, _wrap_Matrix2d_allocate);
  rb_define_method(cMatrix2d.klass, "initialize", VALUEFUNC(_wrap_new_Matrix2d), -1);
  rb_define_method(cMatrix2d.klass, "xx=", VALUEFUNC(_wrap_Matrix2d_xx_set), -1);
  rb_define_method(cMatrix2d.klass, "xx", VALUEFUNC(_wrap_Matrix2d_xx_get), -1);
  rb_define_method(cMatrix2d.klass, "xy=", VALUEFUNC(_wrap_Matrix2d_xy_set), -1);
  rb_define_method(cMatrix2d.klass, "xy", VALUEFUNC(_wrap_Matrix2d_xy_get), -1);
  rb_define_method(cMatrix2d.klass, "yx=", VALUEFUNC(_wrap_Matrix2d_yx_set), -1);
  rb_define_method(cMatrix2d.klass, "yx", VALUEFUNC(_wrap_Matrix2d_yx_get), -1);
  rb_define_method(cMatrix2d.klass, "yy=", VALUEFUNC(_wrap_Matrix2d_yy_set), -1);
  rb_define_method(cMatrix2d.klass, "yy", VALUEFUNC(_wrap_Matrix2d_yy_get), -1);
  rb_define_method(cMatrix2d.klass, "clear", VALUEFUNC(_wrap_Matrix2d_clear), -1);
  rb_define_method(cMatrix2d.klass, "col", VALUEFUNC(_wrap_Matrix2d_col), -1);
  rb_define_method(cMatrix2d.klass, "row", VALUEFUNC(_wrap_Matrix2d_row), -1);
  rb_define_method(cMatrix2d.klass, "det", VALUEFUNC(_wrap_Matrix2d_det), -1);
  rb_define_method(cMatrix2d.klass, "height", VALUEFUNC(_wrap_Matrix2d_height), -1);
  rb_define_method(cMatrix2d.klass, "width", VALUEFUNC(_wrap_Matrix2d_width), -1);
  rb_define_method(cMatrix2d.klass, "resize", VALUEFUNC(_wrap_Matrix2d_resize), -1);
  rb_define_method(cMatrix2d.klass, "trans", VALUEFUNC(_wrap_Matrix2d_trans), -1);
  rb_define_method(cMatrix2d.klass, "inv", VALUEFUNC(_wrap_Matrix2d_inv), -1);
  rb_define_singleton_method(cMatrix2d.klass, "Zero", VALUEFUNC(_wrap_Matrix2d_Zero), -1);
  rb_define_singleton_method(cMatrix2d.klass, "Unit", VALUEFUNC(_wrap_Matrix2d_Unit), -1);
  rb_define_singleton_method(cMatrix2d.klass, "Diag", VALUEFUNC(_wrap_Matrix2d_Diag), -1);
  rb_define_singleton_method(cMatrix2d.klass, "Rot", VALUEFUNC(_wrap_Matrix2d_Rot), -1);
  rb_define_method(cMatrix2d.klass, "angle", VALUEFUNC(_wrap_Matrix2d_angle), -1);
  rb_define_method(cMatrix2d.klass, "[]", VALUEFUNC(_wrap_Matrix2d___getitem__), -1);
  rb_define_method(cMatrix2d.klass, "[]=", VALUEFUNC(_wrap_Matrix2d___setitem__), -1);
  rb_define_method(cMatrix2d.klass, "+", VALUEFUNC(_wrap_Matrix2d___add__), -1);
  rb_define_method(cMatrix2d.klass, "-", VALUEFUNC(_wrap_Matrix2d___sub__), -1);
  rb_define_method(cMatrix2d.klass, "*", VALUEFUNC(_wrap_Matrix2d___mul__), -1);
  cMatrix2d.mark = 0;
  cMatrix2d.destroy = (void (*)(void *)) free_Matrix2d;
  cMatrix2d.trackObjects = 0;
  
  cMatrix3f.klass = rb_define_class_under(mPTM, "Matrix3f", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Matrix3f, (void *) &cMatrix3f);
  rb_define_alloc_func(cMatrix3f.klass, _wrap_Matrix3f_allocate);
  rb_define_method(cMatrix3f.klass, "initialize", VALUEFUNC(_wrap_new_Matrix3f), -1);
  rb_define_method(cMatrix3f.klass, "xx=", VALUEFUNC(_wrap_Matrix3f_xx_set), -1);
  rb_define_method(cMatrix3f.klass, "xx", VALUEFUNC(_wrap_Matrix3f_xx_get), -1);
  rb_define_method(cMatrix3f.klass, "xy=", VALUEFUNC(_wrap_Matrix3f_xy_set), -1);
  rb_define_method(cMatrix3f.klass, "xy", VALUEFUNC(_wrap_Matrix3f_xy_get), -1);
  rb_define_method(cMatrix3f.klass, "xz=", VALUEFUNC(_wrap_Matrix3f_xz_set), -1);
  rb_define_method(cMatrix3f.klass, "xz", VALUEFUNC(_wrap_Matrix3f_xz_get), -1);
  rb_define_method(cMatrix3f.klass, "yx=", VALUEFUNC(_wrap_Matrix3f_yx_set), -1);
  rb_define_method(cMatrix3f.klass, "yx", VALUEFUNC(_wrap_Matrix3f_yx_get), -1);
  rb_define_method(cMatrix3f.klass, "yy=", VALUEFUNC(_wrap_Matrix3f_yy_set), -1);
  rb_define_method(cMatrix3f.klass, "yy", VALUEFUNC(_wrap_Matrix3f_yy_get), -1);
  rb_define_method(cMatrix3f.klass, "yz=", VALUEFUNC(_wrap_Matrix3f_yz_set), -1);
  rb_define_method(cMatrix3f.klass, "yz", VALUEFUNC(_wrap_Matrix3f_yz_get), -1);
  rb_define_method(cMatrix3f.klass, "zx=", VALUEFUNC(_wrap_Matrix3f_zx_set), -1);
  rb_define_method(cMatrix3f.klass, "zx", VALUEFUNC(_wrap_Matrix3f_zx_get), -1);
  rb_define_method(cMatrix3f.klass, "zy=", VALUEFUNC(_wrap_Matrix3f_zy_set), -1);
  rb_define_method(cMatrix3f.klass, "zy", VALUEFUNC(_wrap_Matrix3f_zy_get), -1);
  rb_define_method(cMatrix3f.klass, "zz=", VALUEFUNC(_wrap_Matrix3f_zz_set), -1);
  rb_define_method(cMatrix3f.klass, "zz", VALUEFUNC(_wrap_Matrix3f_zz_get), -1);
  rb_define_method(cMatrix3f.klass, "clear", VALUEFUNC(_wrap_Matrix3f_clear), -1);
  rb_define_method(cMatrix3f.klass, "col", VALUEFUNC(_wrap_Matrix3f_col), -1);
  rb_define_method(cMatrix3f.klass, "row", VALUEFUNC(_wrap_Matrix3f_row), -1);
  rb_define_method(cMatrix3f.klass, "det", VALUEFUNC(_wrap_Matrix3f_det), -1);
  rb_define_method(cMatrix3f.klass, "height", VALUEFUNC(_wrap_Matrix3f_height), -1);
  rb_define_method(cMatrix3f.klass, "width", VALUEFUNC(_wrap_Matrix3f_width), -1);
  rb_define_method(cMatrix3f.klass, "resize", VALUEFUNC(_wrap_Matrix3f_resize), -1);
  rb_define_method(cMatrix3f.klass, "trans", VALUEFUNC(_wrap_Matrix3f_trans), -1);
  rb_define_method(cMatrix3f.klass, "inv", VALUEFUNC(_wrap_Matrix3f_inv), -1);
  rb_define_singleton_method(cMatrix3f.klass, "Zero", VALUEFUNC(_wrap_Matrix3f_Zero), -1);
  rb_define_singleton_method(cMatrix3f.klass, "Unit", VALUEFUNC(_wrap_Matrix3f_Unit), -1);
  rb_define_singleton_method(cMatrix3f.klass, "Diag", VALUEFUNC(_wrap_Matrix3f_Diag), -1);
  rb_define_singleton_method(cMatrix3f.klass, "Rot", VALUEFUNC(_wrap_Matrix3f_Rot), -1);
  rb_define_singleton_method(cMatrix3f.klass, "Cross", VALUEFUNC(_wrap_Matrix3f_Cross), -1);
  rb_define_method(cMatrix3f.klass, "[]", VALUEFUNC(_wrap_Matrix3f___getitem__), -1);
  rb_define_method(cMatrix3f.klass, "[]=", VALUEFUNC(_wrap_Matrix3f___setitem__), -1);
  rb_define_method(cMatrix3f.klass, "+", VALUEFUNC(_wrap_Matrix3f___add__), -1);
  rb_define_method(cMatrix3f.klass, "-", VALUEFUNC(_wrap_Matrix3f___sub__), -1);
  rb_define_method(cMatrix3f.klass, "*", VALUEFUNC(_wrap_Matrix3f___mul__), -1);
  cMatrix3f.mark = 0;
  cMatrix3f.destroy = (void (*)(void *)) free_Matrix3f;
  cMatrix3f.trackObjects = 0;
  
  cMatrix3d.klass = rb_define_class_under(mPTM, "Matrix3d", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Matrix3d, (void *) &cMatrix3d);
  rb_define_alloc_func(cMatrix3d.klass, _wrap_Matrix3d_allocate);
  rb_define_method(cMatrix3d.klass, "initialize", VALUEFUNC(_wrap_new_Matrix3d), -1);
  rb_define_method(cMatrix3d.klass, "xx=", VALUEFUNC(_wrap_Matrix3d_xx_set), -1);
  rb_define_method(cMatrix3d.klass, "xx", VALUEFUNC(_wrap_Matrix3d_xx_get), -1);
  rb_define_method(cMatrix3d.klass, "xy=", VALUEFUNC(_wrap_Matrix3d_xy_set), -1);
  rb_define_method(cMatrix3d.klass, "xy", VALUEFUNC(_wrap_Matrix3d_xy_get), -1);
  rb_define_method(cMatrix3d.klass, "xz=", VALUEFUNC(_wrap_Matrix3d_xz_set), -1);
  rb_define_method(cMatrix3d.klass, "xz", VALUEFUNC(_wrap_Matrix3d_xz_get), -1);
  rb_define_method(cMatrix3d.klass, "yx=", VALUEFUNC(_wrap_Matrix3d_yx_set), -1);
  rb_define_method(cMatrix3d.klass, "yx", VALUEFUNC(_wrap_Matrix3d_yx_get), -1);
  rb_define_method(cMatrix3d.klass, "yy=", VALUEFUNC(_wrap_Matrix3d_yy_set), -1);
  rb_define_method(cMatrix3d.klass, "yy", VALUEFUNC(_wrap_Matrix3d_yy_get), -1);
  rb_define_method(cMatrix3d.klass, "yz=", VALUEFUNC(_wrap_Matrix3d_yz_set), -1);
  rb_define_method(cMatrix3d.klass, "yz", VALUEFUNC(_wrap_Matrix3d_yz_get), -1);
  rb_define_method(cMatrix3d.klass, "zx=", VALUEFUNC(_wrap_Matrix3d_zx_set), -1);
  rb_define_method(cMatrix3d.klass, "zx", VALUEFUNC(_wrap_Matrix3d_zx_get), -1);
  rb_define_method(cMatrix3d.klass, "zy=", VALUEFUNC(_wrap_Matrix3d_zy_set), -1);
  rb_define_method(cMatrix3d.klass, "zy", VALUEFUNC(_wrap_Matrix3d_zy_get), -1);
  rb_define_method(cMatrix3d.klass, "zz=", VALUEFUNC(_wrap_Matrix3d_zz_set), -1);
  rb_define_method(cMatrix3d.klass, "zz", VALUEFUNC(_wrap_Matrix3d_zz_get), -1);
  rb_define_method(cMatrix3d.klass, "clear", VALUEFUNC(_wrap_Matrix3d_clear), -1);
  rb_define_method(cMatrix3d.klass, "col", VALUEFUNC(_wrap_Matrix3d_col), -1);
  rb_define_method(cMatrix3d.klass, "row", VALUEFUNC(_wrap_Matrix3d_row), -1);
  rb_define_method(cMatrix3d.klass, "det", VALUEFUNC(_wrap_Matrix3d_det), -1);
  rb_define_method(cMatrix3d.klass, "height", VALUEFUNC(_wrap_Matrix3d_height), -1);
  rb_define_method(cMatrix3d.klass, "width", VALUEFUNC(_wrap_Matrix3d_width), -1);
  rb_define_method(cMatrix3d.klass, "resize", VALUEFUNC(_wrap_Matrix3d_resize), -1);
  rb_define_method(cMatrix3d.klass, "trans", VALUEFUNC(_wrap_Matrix3d_trans), -1);
  rb_define_method(cMatrix3d.klass, "inv", VALUEFUNC(_wrap_Matrix3d_inv), -1);
  rb_define_singleton_method(cMatrix3d.klass, "Zero", VALUEFUNC(_wrap_Matrix3d_Zero), -1);
  rb_define_singleton_method(cMatrix3d.klass, "Unit", VALUEFUNC(_wrap_Matrix3d_Unit), -1);
  rb_define_singleton_method(cMatrix3d.klass, "Diag", VALUEFUNC(_wrap_Matrix3d_Diag), -1);
  rb_define_singleton_method(cMatrix3d.klass, "Rot", VALUEFUNC(_wrap_Matrix3d_Rot), -1);
  rb_define_singleton_method(cMatrix3d.klass, "Cross", VALUEFUNC(_wrap_Matrix3d_Cross), -1);
  rb_define_method(cMatrix3d.klass, "[]", VALUEFUNC(_wrap_Matrix3d___getitem__), -1);
  rb_define_method(cMatrix3d.klass, "[]=", VALUEFUNC(_wrap_Matrix3d___setitem__), -1);
  rb_define_method(cMatrix3d.klass, "+", VALUEFUNC(_wrap_Matrix3d___add__), -1);
  rb_define_method(cMatrix3d.klass, "-", VALUEFUNC(_wrap_Matrix3d___sub__), -1);
  rb_define_method(cMatrix3d.klass, "*", VALUEFUNC(_wrap_Matrix3d___mul__), -1);
  cMatrix3d.mark = 0;
  cMatrix3d.destroy = (void (*)(void *)) free_Matrix3d;
  cMatrix3d.trackObjects = 0;
  rb_define_module_function(mPTM, "IsUnitary", VALUEFUNC(_wrap_IsUnitary), -1);
  
  cAffine2f.klass = rb_define_class_under(mPTM, "Affine2f", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Affine2f, (void *) &cAffine2f);
  rb_define_alloc_func(cAffine2f.klass, _wrap_Affine2f_allocate);
  rb_define_method(cAffine2f.klass, "initialize", VALUEFUNC(_wrap_new_Affine2f), -1);
  rb_define_method(cAffine2f.klass, "xx=", VALUEFUNC(_wrap_Affine2f_xx_set), -1);
  rb_define_method(cAffine2f.klass, "xx", VALUEFUNC(_wrap_Affine2f_xx_get), -1);
  rb_define_method(cAffine2f.klass, "xy=", VALUEFUNC(_wrap_Affine2f_xy_set), -1);
  rb_define_method(cAffine2f.klass, "xy", VALUEFUNC(_wrap_Affine2f_xy_get), -1);
  rb_define_method(cAffine2f.klass, "xz=", VALUEFUNC(_wrap_Affine2f_xz_set), -1);
  rb_define_method(cAffine2f.klass, "xz", VALUEFUNC(_wrap_Affine2f_xz_get), -1);
  rb_define_method(cAffine2f.klass, "yx=", VALUEFUNC(_wrap_Affine2f_yx_set), -1);
  rb_define_method(cAffine2f.klass, "yx", VALUEFUNC(_wrap_Affine2f_yx_get), -1);
  rb_define_method(cAffine2f.klass, "yy=", VALUEFUNC(_wrap_Affine2f_yy_set), -1);
  rb_define_method(cAffine2f.klass, "yy", VALUEFUNC(_wrap_Affine2f_yy_get), -1);
  rb_define_method(cAffine2f.klass, "yz=", VALUEFUNC(_wrap_Affine2f_yz_set), -1);
  rb_define_method(cAffine2f.klass, "yz", VALUEFUNC(_wrap_Affine2f_yz_get), -1);
  rb_define_method(cAffine2f.klass, "px=", VALUEFUNC(_wrap_Affine2f_px_set), -1);
  rb_define_method(cAffine2f.klass, "px", VALUEFUNC(_wrap_Affine2f_px_get), -1);
  rb_define_method(cAffine2f.klass, "py=", VALUEFUNC(_wrap_Affine2f_py_set), -1);
  rb_define_method(cAffine2f.klass, "py", VALUEFUNC(_wrap_Affine2f_py_get), -1);
  rb_define_method(cAffine2f.klass, "pz=", VALUEFUNC(_wrap_Affine2f_pz_set), -1);
  rb_define_method(cAffine2f.klass, "pz", VALUEFUNC(_wrap_Affine2f_pz_get), -1);
  rb_define_method(cAffine2f.klass, "clear", VALUEFUNC(_wrap_Affine2f_clear), -1);
  rb_define_method(cAffine2f.klass, "col", VALUEFUNC(_wrap_Affine2f_col), -1);
  rb_define_method(cAffine2f.klass, "row", VALUEFUNC(_wrap_Affine2f_row), -1);
  rb_define_method(cAffine2f.klass, "det", VALUEFUNC(_wrap_Affine2f_det), -1);
  rb_define_method(cAffine2f.klass, "height", VALUEFUNC(_wrap_Affine2f_height), -1);
  rb_define_method(cAffine2f.klass, "width", VALUEFUNC(_wrap_Affine2f_width), -1);
  rb_define_method(cAffine2f.klass, "resize", VALUEFUNC(_wrap_Affine2f_resize), -1);
  rb_define_method(cAffine2f.klass, "trans", VALUEFUNC(_wrap_Affine2f_trans), -1);
  rb_define_method(cAffine2f.klass, "inv", VALUEFUNC(_wrap_Affine2f_inv), -1);
  rb_define_singleton_method(cAffine2f.klass, "Unit", VALUEFUNC(_wrap_Affine2f_Unit), -1);
  rb_define_singleton_method(cAffine2f.klass, "Trn", VALUEFUNC(_wrap_Affine2f_Trn), -1);
  rb_define_singleton_method(cAffine2f.klass, "Rot", VALUEFUNC(_wrap_Affine2f_Rot), -1);
  rb_define_singleton_method(cAffine2f.klass, "Scale", VALUEFUNC(_wrap_Affine2f_Scale), -1);
  rb_define_method(cAffine2f.klass, "[]", VALUEFUNC(_wrap_Affine2f___getitem__), -1);
  rb_define_method(cAffine2f.klass, "[]=", VALUEFUNC(_wrap_Affine2f___setitem__), -1);
  rb_define_method(cAffine2f.klass, "+", VALUEFUNC(_wrap_Affine2f___add__), -1);
  rb_define_method(cAffine2f.klass, "-", VALUEFUNC(_wrap_Affine2f___sub__), -1);
  rb_define_method(cAffine2f.klass, "*", VALUEFUNC(_wrap_Affine2f___mul__), -1);
  rb_define_method(cAffine2f.klass, "trn=", VALUEFUNC(_wrap_Affine2f_trne___), -1);
  rb_define_method(cAffine2f.klass, "trn", VALUEFUNC(_wrap_Affine2f_trn), -1);
  rb_define_method(cAffine2f.klass, "pos=", VALUEFUNC(_wrap_Affine2f_pose___), -1);
  rb_define_method(cAffine2f.klass, "pos", VALUEFUNC(_wrap_Affine2f_pos), -1);
  rb_define_method(cAffine2f.klass, "rot=", VALUEFUNC(_wrap_Affine2f_rote___), -1);
  rb_define_method(cAffine2f.klass, "rot", VALUEFUNC(_wrap_Affine2f_rot), -1);
  cAffine2f.mark = 0;
  cAffine2f.destroy = (void (*)(void *)) free_Affine2f;
  cAffine2f.trackObjects = 0;
  
  cAffinef.klass = rb_define_class_under(mPTM, "Affinef", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Affinef, (void *) &cAffinef);
  rb_define_alloc_func(cAffinef.klass, _wrap_Affinef_allocate);
  rb_define_method(cAffinef.klass, "initialize", VALUEFUNC(_wrap_new_Affinef), -1);
  rb_define_method(cAffinef.klass, "xx=", VALUEFUNC(_wrap_Affinef_xx_set), -1);
  rb_define_method(cAffinef.klass, "xx", VALUEFUNC(_wrap_Affinef_xx_get), -1);
  rb_define_method(cAffinef.klass, "xy=", VALUEFUNC(_wrap_Affinef_xy_set), -1);
  rb_define_method(cAffinef.klass, "xy", VALUEFUNC(_wrap_Affinef_xy_get), -1);
  rb_define_method(cAffinef.klass, "xz=", VALUEFUNC(_wrap_Affinef_xz_set), -1);
  rb_define_method(cAffinef.klass, "xz", VALUEFUNC(_wrap_Affinef_xz_get), -1);
  rb_define_method(cAffinef.klass, "xw=", VALUEFUNC(_wrap_Affinef_xw_set), -1);
  rb_define_method(cAffinef.klass, "xw", VALUEFUNC(_wrap_Affinef_xw_get), -1);
  rb_define_method(cAffinef.klass, "yx=", VALUEFUNC(_wrap_Affinef_yx_set), -1);
  rb_define_method(cAffinef.klass, "yx", VALUEFUNC(_wrap_Affinef_yx_get), -1);
  rb_define_method(cAffinef.klass, "yy=", VALUEFUNC(_wrap_Affinef_yy_set), -1);
  rb_define_method(cAffinef.klass, "yy", VALUEFUNC(_wrap_Affinef_yy_get), -1);
  rb_define_method(cAffinef.klass, "yz=", VALUEFUNC(_wrap_Affinef_yz_set), -1);
  rb_define_method(cAffinef.klass, "yz", VALUEFUNC(_wrap_Affinef_yz_get), -1);
  rb_define_method(cAffinef.klass, "yw=", VALUEFUNC(_wrap_Affinef_yw_set), -1);
  rb_define_method(cAffinef.klass, "yw", VALUEFUNC(_wrap_Affinef_yw_get), -1);
  rb_define_method(cAffinef.klass, "zx=", VALUEFUNC(_wrap_Affinef_zx_set), -1);
  rb_define_method(cAffinef.klass, "zx", VALUEFUNC(_wrap_Affinef_zx_get), -1);
  rb_define_method(cAffinef.klass, "zy=", VALUEFUNC(_wrap_Affinef_zy_set), -1);
  rb_define_method(cAffinef.klass, "zy", VALUEFUNC(_wrap_Affinef_zy_get), -1);
  rb_define_method(cAffinef.klass, "zz=", VALUEFUNC(_wrap_Affinef_zz_set), -1);
  rb_define_method(cAffinef.klass, "zz", VALUEFUNC(_wrap_Affinef_zz_get), -1);
  rb_define_method(cAffinef.klass, "zw=", VALUEFUNC(_wrap_Affinef_zw_set), -1);
  rb_define_method(cAffinef.klass, "zw", VALUEFUNC(_wrap_Affinef_zw_get), -1);
  rb_define_method(cAffinef.klass, "px=", VALUEFUNC(_wrap_Affinef_px_set), -1);
  rb_define_method(cAffinef.klass, "px", VALUEFUNC(_wrap_Affinef_px_get), -1);
  rb_define_method(cAffinef.klass, "py=", VALUEFUNC(_wrap_Affinef_py_set), -1);
  rb_define_method(cAffinef.klass, "py", VALUEFUNC(_wrap_Affinef_py_get), -1);
  rb_define_method(cAffinef.klass, "pz=", VALUEFUNC(_wrap_Affinef_pz_set), -1);
  rb_define_method(cAffinef.klass, "pz", VALUEFUNC(_wrap_Affinef_pz_get), -1);
  rb_define_method(cAffinef.klass, "pw=", VALUEFUNC(_wrap_Affinef_pw_set), -1);
  rb_define_method(cAffinef.klass, "pw", VALUEFUNC(_wrap_Affinef_pw_get), -1);
  rb_define_method(cAffinef.klass, "clear", VALUEFUNC(_wrap_Affinef_clear), -1);
  rb_define_method(cAffinef.klass, "col", VALUEFUNC(_wrap_Affinef_col), -1);
  rb_define_method(cAffinef.klass, "row", VALUEFUNC(_wrap_Affinef_row), -1);
  rb_define_method(cAffinef.klass, "det", VALUEFUNC(_wrap_Affinef_det), -1);
  rb_define_method(cAffinef.klass, "height", VALUEFUNC(_wrap_Affinef_height), -1);
  rb_define_method(cAffinef.klass, "width", VALUEFUNC(_wrap_Affinef_width), -1);
  rb_define_method(cAffinef.klass, "resize", VALUEFUNC(_wrap_Affinef_resize), -1);
  rb_define_method(cAffinef.klass, "trans", VALUEFUNC(_wrap_Affinef_trans), -1);
  rb_define_method(cAffinef.klass, "inv", VALUEFUNC(_wrap_Affinef_inv), -1);
  rb_define_singleton_method(cAffinef.klass, "Unit", VALUEFUNC(_wrap_Affinef_Unit), -1);
  rb_define_singleton_method(cAffinef.klass, "Trn", VALUEFUNC(_wrap_Affinef_Trn), -1);
  rb_define_singleton_method(cAffinef.klass, "Rot", VALUEFUNC(_wrap_Affinef_Rot), -1);
  rb_define_singleton_method(cAffinef.klass, "Scale", VALUEFUNC(_wrap_Affinef_Scale), -1);
  rb_define_singleton_method(cAffinef.klass, "ProjectionGL", VALUEFUNC(_wrap_Affinef_ProjectionGL), -1);
  rb_define_singleton_method(cAffinef.klass, "ProjectionD3D", VALUEFUNC(_wrap_Affinef_ProjectionD3D), -1);
  rb_define_method(cAffinef.klass, "LookAt", VALUEFUNC(_wrap_Affinef_LookAt), -1);
  rb_define_method(cAffinef.klass, "LookAtGL", VALUEFUNC(_wrap_Affinef_LookAtGL), -1);
  rb_define_method(cAffinef.klass, "[]", VALUEFUNC(_wrap_Affinef___getitem__), -1);
  rb_define_method(cAffinef.klass, "[]=", VALUEFUNC(_wrap_Affinef___setitem__), -1);
  rb_define_method(cAffinef.klass, "+", VALUEFUNC(_wrap_Affinef___add__), -1);
  rb_define_method(cAffinef.klass, "-", VALUEFUNC(_wrap_Affinef___sub__), -1);
  rb_define_method(cAffinef.klass, "*", VALUEFUNC(_wrap_Affinef___mul__), -1);
  rb_define_method(cAffinef.klass, "trn=", VALUEFUNC(_wrap_Affinef_trne___), -1);
  rb_define_method(cAffinef.klass, "trn", VALUEFUNC(_wrap_Affinef_trn), -1);
  rb_define_method(cAffinef.klass, "pos=", VALUEFUNC(_wrap_Affinef_pose___), -1);
  rb_define_method(cAffinef.klass, "pos", VALUEFUNC(_wrap_Affinef_pos), -1);
  rb_define_method(cAffinef.klass, "rot=", VALUEFUNC(_wrap_Affinef_rote___), -1);
  rb_define_method(cAffinef.klass, "rot", VALUEFUNC(_wrap_Affinef_rot), -1);
  cAffinef.mark = 0;
  cAffinef.destroy = (void (*)(void *)) free_Affinef;
  cAffinef.trackObjects = 0;
  
  cAffine2d.klass = rb_define_class_under(mPTM, "Affine2d", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Affine2d, (void *) &cAffine2d);
  rb_define_alloc_func(cAffine2d.klass, _wrap_Affine2d_allocate);
  rb_define_method(cAffine2d.klass, "initialize", VALUEFUNC(_wrap_new_Affine2d), -1);
  rb_define_method(cAffine2d.klass, "xx=", VALUEFUNC(_wrap_Affine2d_xx_set), -1);
  rb_define_method(cAffine2d.klass, "xx", VALUEFUNC(_wrap_Affine2d_xx_get), -1);
  rb_define_method(cAffine2d.klass, "xy=", VALUEFUNC(_wrap_Affine2d_xy_set), -1);
  rb_define_method(cAffine2d.klass, "xy", VALUEFUNC(_wrap_Affine2d_xy_get), -1);
  rb_define_method(cAffine2d.klass, "xz=", VALUEFUNC(_wrap_Affine2d_xz_set), -1);
  rb_define_method(cAffine2d.klass, "xz", VALUEFUNC(_wrap_Affine2d_xz_get), -1);
  rb_define_method(cAffine2d.klass, "yx=", VALUEFUNC(_wrap_Affine2d_yx_set), -1);
  rb_define_method(cAffine2d.klass, "yx", VALUEFUNC(_wrap_Affine2d_yx_get), -1);
  rb_define_method(cAffine2d.klass, "yy=", VALUEFUNC(_wrap_Affine2d_yy_set), -1);
  rb_define_method(cAffine2d.klass, "yy", VALUEFUNC(_wrap_Affine2d_yy_get), -1);
  rb_define_method(cAffine2d.klass, "yz=", VALUEFUNC(_wrap_Affine2d_yz_set), -1);
  rb_define_method(cAffine2d.klass, "yz", VALUEFUNC(_wrap_Affine2d_yz_get), -1);
  rb_define_method(cAffine2d.klass, "px=", VALUEFUNC(_wrap_Affine2d_px_set), -1);
  rb_define_method(cAffine2d.klass, "px", VALUEFUNC(_wrap_Affine2d_px_get), -1);
  rb_define_method(cAffine2d.klass, "py=", VALUEFUNC(_wrap_Affine2d_py_set), -1);
  rb_define_method(cAffine2d.klass, "py", VALUEFUNC(_wrap_Affine2d_py_get), -1);
  rb_define_method(cAffine2d.klass, "pz=", VALUEFUNC(_wrap_Affine2d_pz_set), -1);
  rb_define_method(cAffine2d.klass, "pz", VALUEFUNC(_wrap_Affine2d_pz_get), -1);
  rb_define_method(cAffine2d.klass, "clear", VALUEFUNC(_wrap_Affine2d_clear), -1);
  rb_define_method(cAffine2d.klass, "col", VALUEFUNC(_wrap_Affine2d_col), -1);
  rb_define_method(cAffine2d.klass, "row", VALUEFUNC(_wrap_Affine2d_row), -1);
  rb_define_method(cAffine2d.klass, "det", VALUEFUNC(_wrap_Affine2d_det), -1);
  rb_define_method(cAffine2d.klass, "height", VALUEFUNC(_wrap_Affine2d_height), -1);
  rb_define_method(cAffine2d.klass, "width", VALUEFUNC(_wrap_Affine2d_width), -1);
  rb_define_method(cAffine2d.klass, "resize", VALUEFUNC(_wrap_Affine2d_resize), -1);
  rb_define_method(cAffine2d.klass, "trans", VALUEFUNC(_wrap_Affine2d_trans), -1);
  rb_define_method(cAffine2d.klass, "inv", VALUEFUNC(_wrap_Affine2d_inv), -1);
  rb_define_singleton_method(cAffine2d.klass, "Unit", VALUEFUNC(_wrap_Affine2d_Unit), -1);
  rb_define_singleton_method(cAffine2d.klass, "Trn", VALUEFUNC(_wrap_Affine2d_Trn), -1);
  rb_define_singleton_method(cAffine2d.klass, "Rot", VALUEFUNC(_wrap_Affine2d_Rot), -1);
  rb_define_singleton_method(cAffine2d.klass, "Scale", VALUEFUNC(_wrap_Affine2d_Scale), -1);
  rb_define_method(cAffine2d.klass, "[]", VALUEFUNC(_wrap_Affine2d___getitem__), -1);
  rb_define_method(cAffine2d.klass, "[]=", VALUEFUNC(_wrap_Affine2d___setitem__), -1);
  rb_define_method(cAffine2d.klass, "+", VALUEFUNC(_wrap_Affine2d___add__), -1);
  rb_define_method(cAffine2d.klass, "-", VALUEFUNC(_wrap_Affine2d___sub__), -1);
  rb_define_method(cAffine2d.klass, "*", VALUEFUNC(_wrap_Affine2d___mul__), -1);
  rb_define_method(cAffine2d.klass, "trn=", VALUEFUNC(_wrap_Affine2d_trne___), -1);
  rb_define_method(cAffine2d.klass, "trn", VALUEFUNC(_wrap_Affine2d_trn), -1);
  rb_define_method(cAffine2d.klass, "pos=", VALUEFUNC(_wrap_Affine2d_pose___), -1);
  rb_define_method(cAffine2d.klass, "pos", VALUEFUNC(_wrap_Affine2d_pos), -1);
  rb_define_method(cAffine2d.klass, "rot=", VALUEFUNC(_wrap_Affine2d_rote___), -1);
  rb_define_method(cAffine2d.klass, "rot", VALUEFUNC(_wrap_Affine2d_rot), -1);
  cAffine2d.mark = 0;
  cAffine2d.destroy = (void (*)(void *)) free_Affine2d;
  cAffine2d.trackObjects = 0;
  
  cAffined.klass = rb_define_class_under(mPTM, "Affined", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Affined, (void *) &cAffined);
  rb_define_alloc_func(cAffined.klass, _wrap_Affined_allocate);
  rb_define_method(cAffined.klass, "initialize", VALUEFUNC(_wrap_new_Affined), -1);
  rb_define_method(cAffined.klass, "xx=", VALUEFUNC(_wrap_Affined_xx_set), -1);
  rb_define_method(cAffined.klass, "xx", VALUEFUNC(_wrap_Affined_xx_get), -1);
  rb_define_method(cAffined.klass, "xy=", VALUEFUNC(_wrap_Affined_xy_set), -1);
  rb_define_method(cAffined.klass, "xy", VALUEFUNC(_wrap_Affined_xy_get), -1);
  rb_define_method(cAffined.klass, "xz=", VALUEFUNC(_wrap_Affined_xz_set), -1);
  rb_define_method(cAffined.klass, "xz", VALUEFUNC(_wrap_Affined_xz_get), -1);
  rb_define_method(cAffined.klass, "xw=", VALUEFUNC(_wrap_Affined_xw_set), -1);
  rb_define_method(cAffined.klass, "xw", VALUEFUNC(_wrap_Affined_xw_get), -1);
  rb_define_method(cAffined.klass, "yx=", VALUEFUNC(_wrap_Affined_yx_set), -1);
  rb_define_method(cAffined.klass, "yx", VALUEFUNC(_wrap_Affined_yx_get), -1);
  rb_define_method(cAffined.klass, "yy=", VALUEFUNC(_wrap_Affined_yy_set), -1);
  rb_define_method(cAffined.klass, "yy", VALUEFUNC(_wrap_Affined_yy_get), -1);
  rb_define_method(cAffined.klass, "yz=", VALUEFUNC(_wrap_Affined_yz_set), -1);
  rb_define_method(cAffined.klass, "yz", VALUEFUNC(_wrap_Affined_yz_get), -1);
  rb_define_method(cAffined.klass, "yw=", VALUEFUNC(_wrap_Affined_yw_set), -1);
  rb_define_method(cAffined.klass, "yw", VALUEFUNC(_wrap_Affined_yw_get), -1);
  rb_define_method(cAffined.klass, "zx=", VALUEFUNC(_wrap_Affined_zx_set), -1);
  rb_define_method(cAffined.klass, "zx", VALUEFUNC(_wrap_Affined_zx_get), -1);
  rb_define_method(cAffined.klass, "zy=", VALUEFUNC(_wrap_Affined_zy_set), -1);
  rb_define_method(cAffined.klass, "zy", VALUEFUNC(_wrap_Affined_zy_get), -1);
  rb_define_method(cAffined.klass, "zz=", VALUEFUNC(_wrap_Affined_zz_set), -1);
  rb_define_method(cAffined.klass, "zz", VALUEFUNC(_wrap_Affined_zz_get), -1);
  rb_define_method(cAffined.klass, "zw=", VALUEFUNC(_wrap_Affined_zw_set), -1);
  rb_define_method(cAffined.klass, "zw", VALUEFUNC(_wrap_Affined_zw_get), -1);
  rb_define_method(cAffined.klass, "px=", VALUEFUNC(_wrap_Affined_px_set), -1);
  rb_define_method(cAffined.klass, "px", VALUEFUNC(_wrap_Affined_px_get), -1);
  rb_define_method(cAffined.klass, "py=", VALUEFUNC(_wrap_Affined_py_set), -1);
  rb_define_method(cAffined.klass, "py", VALUEFUNC(_wrap_Affined_py_get), -1);
  rb_define_method(cAffined.klass, "pz=", VALUEFUNC(_wrap_Affined_pz_set), -1);
  rb_define_method(cAffined.klass, "pz", VALUEFUNC(_wrap_Affined_pz_get), -1);
  rb_define_method(cAffined.klass, "pw=", VALUEFUNC(_wrap_Affined_pw_set), -1);
  rb_define_method(cAffined.klass, "pw", VALUEFUNC(_wrap_Affined_pw_get), -1);
  rb_define_method(cAffined.klass, "clear", VALUEFUNC(_wrap_Affined_clear), -1);
  rb_define_method(cAffined.klass, "col", VALUEFUNC(_wrap_Affined_col), -1);
  rb_define_method(cAffined.klass, "row", VALUEFUNC(_wrap_Affined_row), -1);
  rb_define_method(cAffined.klass, "det", VALUEFUNC(_wrap_Affined_det), -1);
  rb_define_method(cAffined.klass, "height", VALUEFUNC(_wrap_Affined_height), -1);
  rb_define_method(cAffined.klass, "width", VALUEFUNC(_wrap_Affined_width), -1);
  rb_define_method(cAffined.klass, "resize", VALUEFUNC(_wrap_Affined_resize), -1);
  rb_define_method(cAffined.klass, "trans", VALUEFUNC(_wrap_Affined_trans), -1);
  rb_define_method(cAffined.klass, "inv", VALUEFUNC(_wrap_Affined_inv), -1);
  rb_define_singleton_method(cAffined.klass, "Unit", VALUEFUNC(_wrap_Affined_Unit), -1);
  rb_define_singleton_method(cAffined.klass, "Trn", VALUEFUNC(_wrap_Affined_Trn), -1);
  rb_define_singleton_method(cAffined.klass, "Rot", VALUEFUNC(_wrap_Affined_Rot), -1);
  rb_define_singleton_method(cAffined.klass, "Scale", VALUEFUNC(_wrap_Affined_Scale), -1);
  rb_define_singleton_method(cAffined.klass, "ProjectionGL", VALUEFUNC(_wrap_Affined_ProjectionGL), -1);
  rb_define_singleton_method(cAffined.klass, "ProjectionD3D", VALUEFUNC(_wrap_Affined_ProjectionD3D), -1);
  rb_define_method(cAffined.klass, "LookAt", VALUEFUNC(_wrap_Affined_LookAt), -1);
  rb_define_method(cAffined.klass, "LookAtGL", VALUEFUNC(_wrap_Affined_LookAtGL), -1);
  rb_define_method(cAffined.klass, "[]", VALUEFUNC(_wrap_Affined___getitem__), -1);
  rb_define_method(cAffined.klass, "[]=", VALUEFUNC(_wrap_Affined___setitem__), -1);
  rb_define_method(cAffined.klass, "+", VALUEFUNC(_wrap_Affined___add__), -1);
  rb_define_method(cAffined.klass, "-", VALUEFUNC(_wrap_Affined___sub__), -1);
  rb_define_method(cAffined.klass, "*", VALUEFUNC(_wrap_Affined___mul__), -1);
  rb_define_method(cAffined.klass, "trn=", VALUEFUNC(_wrap_Affined_trne___), -1);
  rb_define_method(cAffined.klass, "trn", VALUEFUNC(_wrap_Affined_trn), -1);
  rb_define_method(cAffined.klass, "pos=", VALUEFUNC(_wrap_Affined_pose___), -1);
  rb_define_method(cAffined.klass, "pos", VALUEFUNC(_wrap_Affined_pos), -1);
  rb_define_method(cAffined.klass, "rot=", VALUEFUNC(_wrap_Affined_rote___), -1);
  rb_define_method(cAffined.klass, "rot", VALUEFUNC(_wrap_Affined_rot), -1);
  cAffined.mark = 0;
  cAffined.destroy = (void (*)(void *)) free_Affined;
  cAffined.trackObjects = 0;
  
  cQuaterniond.klass = rb_define_class_under(mPTM, "Quaterniond", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Quaterniond, (void *) &cQuaterniond);
  rb_define_alloc_func(cQuaterniond.klass, _wrap_Quaterniond_allocate);
  rb_define_method(cQuaterniond.klass, "initialize", VALUEFUNC(_wrap_new_Quaterniond), -1);
  rb_define_method(cQuaterniond.klass, "w=", VALUEFUNC(_wrap_Quaterniond_w_set), -1);
  rb_define_method(cQuaterniond.klass, "w", VALUEFUNC(_wrap_Quaterniond_w_get), -1);
  rb_define_method(cQuaterniond.klass, "x=", VALUEFUNC(_wrap_Quaterniond_x_set), -1);
  rb_define_method(cQuaterniond.klass, "x", VALUEFUNC(_wrap_Quaterniond_x_get), -1);
  rb_define_method(cQuaterniond.klass, "y=", VALUEFUNC(_wrap_Quaterniond_y_set), -1);
  rb_define_method(cQuaterniond.klass, "y", VALUEFUNC(_wrap_Quaterniond_y_get), -1);
  rb_define_method(cQuaterniond.klass, "z=", VALUEFUNC(_wrap_Quaterniond_z_set), -1);
  rb_define_method(cQuaterniond.klass, "z", VALUEFUNC(_wrap_Quaterniond_z_get), -1);
  rb_define_method(cQuaterniond.klass, "clear", VALUEFUNC(_wrap_Quaterniond_clear), -1);
  rb_define_method(cQuaterniond.klass, "norm", VALUEFUNC(_wrap_Quaterniond_norm), -1);
  rb_define_method(cQuaterniond.klass, "square", VALUEFUNC(_wrap_Quaterniond_square), -1);
  rb_define_method(cQuaterniond.klass, "resize", VALUEFUNC(_wrap_Quaterniond_resize), -1);
  rb_define_method(cQuaterniond.klass, "size", VALUEFUNC(_wrap_Quaterniond_size), -1);
  rb_define_method(cQuaterniond.klass, "unit", VALUEFUNC(_wrap_Quaterniond_unit), -1);
  rb_define_method(cQuaterniond.klass, "unitize", VALUEFUNC(_wrap_Quaterniond_unitize), -1);
  rb_define_method(cQuaterniond.klass, "RotationHalf", VALUEFUNC(_wrap_Quaterniond_RotationHalf), -1);
  rb_define_method(cQuaterniond.klass, "Rotation", VALUEFUNC(_wrap_Quaterniond_Rotation), -1);
  rb_define_method(cQuaterniond.klass, "Axis", VALUEFUNC(_wrap_Quaterniond_Axis), -1);
  rb_define_method(cQuaterniond.klass, "Theta", VALUEFUNC(_wrap_Quaterniond_Theta), -1);
  rb_define_singleton_method(cQuaterniond.klass, "Rot", VALUEFUNC(_wrap_Quaterniond_Rot), -1);
  rb_define_method(cQuaterniond.klass, "Conjugate", VALUEFUNC(_wrap_Quaterniond_Conjugate), -1);
  rb_define_method(cQuaterniond.klass, "Conjugated", VALUEFUNC(_wrap_Quaterniond_Conjugated), -1);
  rb_define_method(cQuaterniond.klass, "Inv", VALUEFUNC(_wrap_Quaterniond_Inv), -1);
  rb_define_method(cQuaterniond.klass, "FromMatrix", VALUEFUNC(_wrap_Quaterniond_FromMatrix), -1);
  rb_define_method(cQuaterniond.klass, "ToMatrix", VALUEFUNC(_wrap_Quaterniond_ToMatrix), -1);
  rb_define_method(cQuaterniond.klass, "ToEular", VALUEFUNC(_wrap_Quaterniond_ToEular), -1);
  rb_define_method(cQuaterniond.klass, "FromEular", VALUEFUNC(_wrap_Quaterniond_FromEular), -1);
  rb_define_method(cQuaterniond.klass, "RotationArc", VALUEFUNC(_wrap_Quaterniond_RotationArc), -1);
  rb_define_method(cQuaterniond.klass, "Euler", VALUEFUNC(_wrap_Quaterniond_Euler), -1);
  rb_define_method(cQuaterniond.klass, "Derivative", VALUEFUNC(_wrap_Quaterniond_Derivative), -1);
  rb_define_method(cQuaterniond.klass, "AngularVelocity", VALUEFUNC(_wrap_Quaterniond_AngularVelocity), -1);
  rb_define_method(cQuaterniond.klass, "[]", VALUEFUNC(_wrap_Quaterniond___getitem__), -1);
  rb_define_method(cQuaterniond.klass, "[]=", VALUEFUNC(_wrap_Quaterniond___setitem__), -1);
  rb_define_method(cQuaterniond.klass, "+", VALUEFUNC(_wrap_Quaterniond___add__), -1);
  rb_define_method(cQuaterniond.klass, "-", VALUEFUNC(_wrap_Quaterniond___sub__), -1);
  rb_define_method(cQuaterniond.klass, "*", VALUEFUNC(_wrap_Quaterniond___mul__), -1);
  rb_define_method(cQuaterniond.klass, "transform", VALUEFUNC(_wrap_Quaterniond_transform), -1);
  rb_define_method(cQuaterniond.klass, "v=", VALUEFUNC(_wrap_Quaterniond_ve___), -1);
  rb_define_method(cQuaterniond.klass, "v", VALUEFUNC(_wrap_Quaterniond_v), -1);
  cQuaterniond.mark = 0;
  cQuaterniond.destroy = (void (*)(void *)) free_Quaterniond;
  cQuaterniond.trackObjects = 0;
  rb_define_module_function(mPTM, "dot", VALUEFUNC(_wrap_dot), -1);
  rb_define_module_function(mPTM, "interpolate", VALUEFUNC(_wrap_interpolate), -1);
  
  cPosed.klass = rb_define_class_under(mPTM, "Posed", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Posed, (void *) &cPosed);
  rb_define_alloc_func(cPosed.klass, _wrap_Posed_allocate);
  rb_define_method(cPosed.klass, "initialize", VALUEFUNC(_wrap_new_Posed), -1);
  rb_define_method(cPosed.klass, "w=", VALUEFUNC(_wrap_Posed_w_set), -1);
  rb_define_method(cPosed.klass, "w", VALUEFUNC(_wrap_Posed_w_get), -1);
  rb_define_method(cPosed.klass, "x=", VALUEFUNC(_wrap_Posed_x_set), -1);
  rb_define_method(cPosed.klass, "x", VALUEFUNC(_wrap_Posed_x_get), -1);
  rb_define_method(cPosed.klass, "y=", VALUEFUNC(_wrap_Posed_y_set), -1);
  rb_define_method(cPosed.klass, "y", VALUEFUNC(_wrap_Posed_y_get), -1);
  rb_define_method(cPosed.klass, "z=", VALUEFUNC(_wrap_Posed_z_set), -1);
  rb_define_method(cPosed.klass, "z", VALUEFUNC(_wrap_Posed_z_get), -1);
  rb_define_method(cPosed.klass, "px=", VALUEFUNC(_wrap_Posed_px_set), -1);
  rb_define_method(cPosed.klass, "px", VALUEFUNC(_wrap_Posed_px_get), -1);
  rb_define_method(cPosed.klass, "py=", VALUEFUNC(_wrap_Posed_py_set), -1);
  rb_define_method(cPosed.klass, "py", VALUEFUNC(_wrap_Posed_py_get), -1);
  rb_define_method(cPosed.klass, "pz=", VALUEFUNC(_wrap_Posed_pz_set), -1);
  rb_define_method(cPosed.klass, "pz", VALUEFUNC(_wrap_Posed_pz_get), -1);
  rb_define_method(cPosed.klass, "clear", VALUEFUNC(_wrap_Posed_clear), -1);
  rb_define_method(cPosed.klass, "norm", VALUEFUNC(_wrap_Posed_norm), -1);
  rb_define_method(cPosed.klass, "square", VALUEFUNC(_wrap_Posed_square), -1);
  rb_define_method(cPosed.klass, "resize", VALUEFUNC(_wrap_Posed_resize), -1);
  rb_define_method(cPosed.klass, "size", VALUEFUNC(_wrap_Posed_size), -1);
  rb_define_method(cPosed.klass, "unit", VALUEFUNC(_wrap_Posed_unit), -1);
  rb_define_method(cPosed.klass, "unitize", VALUEFUNC(_wrap_Posed_unitize), -1);
  rb_define_method(cPosed.klass, "Inv", VALUEFUNC(_wrap_Posed_Inv), -1);
  rb_define_singleton_method(cPosed.klass, "Unit", VALUEFUNC(_wrap_Posed_Unit), -1);
  rb_define_singleton_method(cPosed.klass, "Trn", VALUEFUNC(_wrap_Posed_Trn), -1);
  rb_define_singleton_method(cPosed.klass, "Rot", VALUEFUNC(_wrap_Posed_Rot), -1);
  rb_define_method(cPosed.klass, "FromAffine", VALUEFUNC(_wrap_Posed_FromAffine), -1);
  rb_define_method(cPosed.klass, "ToAffine", VALUEFUNC(_wrap_Posed_ToAffine), -1);
  rb_define_method(cPosed.klass, "transform", VALUEFUNC(_wrap_Posed_transform), -1);
  rb_define_method(cPosed.klass, "*", VALUEFUNC(_wrap_Posed___mul__), -1);
  rb_define_method(cPosed.klass, "pos=", VALUEFUNC(_wrap_Posed_pose___), -1);
  rb_define_method(cPosed.klass, "pos", VALUEFUNC(_wrap_Posed_pos), -1);
  rb_define_method(cPosed.klass, "ori=", VALUEFUNC(_wrap_Posed_orie___), -1);
  rb_define_method(cPosed.klass, "ori", VALUEFUNC(_wrap_Posed_ori), -1);
  cPosed.mark = 0;
  cPosed.destroy = (void (*)(void *)) free_Posed;
  cPosed.trackObjects = 0;
}

