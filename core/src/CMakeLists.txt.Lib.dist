# CMakeLists.txt for Springhead

cmake_minimum_required(VERSION 3.1)

# ------------------------------------------------------------------------------
#  Definition of project.
#
set(ProjectName "Springhead")
message(STATUS "Project: ${ProjectName}")
project(${ProjectName} CXX)
set(CMAKE_SUPPRESS_REGENERATION true)
set(CMAKE_USE_RELATIVE_PATHS true)

# ------------------------------------------------------------------------------
#  Determine top directory of Springhead tree.
#	If cmake option "-D TOPDIR=<absolute-dir-path>" is specified,
#	    <abs-dir-path> is the one.
#	Else if the file "${CMAKE_SOURCE_DIR}/CMakeTopDir.txt" exists,
#	    this file should contain the definition of top dorectory like
#	    set(TOPDIR "<absolute-dir-path>")
#	Otherwise, "${CMAKE_SOURCE_DIR}/CMakeTopDir.txt" SHOULD contain the
#	    "${CMAKE_SOURCE_DIR}/../.." is the top directory/
#
set(TOPDIR_FILE "CMakeTopdir.txt")
if(DEFINED TOPDIR)
    # ok
elseif(EXISTS "${CMAKE_SOURCE_DIR}/${TOPDIR_FILE}")
    include(${TOPDIR_FILE})
else()
    set(TOPDIR "${CMAKE_SOURCE_DIR}/../..")
endif()
if(NOT EXISTS "${TOPDIR}")
    message("Error: Directory \"${TOPDIR}\" not found")
    return()
endif()

set(SPR_TOP_DIR  "${TOPDIR}")
set(SPR_CORE_DIR "${TOPDIR}/core")
set(SPR_SRC_DIR  "${TOPDIR}/core/src")
set(SPR_INC_DIR  "${TOPDIR}/core/include")
get_filename_component(TOPDIR ${TOPDIR} ABSOLUTE)
get_filename_component(SPR_TOP_DIR ${SPR_TOP_DIR} ABSOLUTE)
get_filename_component(SPR_SRC_DIR ${SPR_SRC_DIR} ABSOLUTE)
get_filename_component(SPR_INC_DIR ${SPR_INC_DIR} ABSOLUTE)
get_filename_component(SPR_BLD_DIR ${PROJECT_BINARY_DIR} ABSOLUTE)
message(STATUS "SPR_TOP_DIR: [${SPR_TOP_DIR}]")
#message(STATUS "SPR_SRC_DIR: [${SPR_SRC_DIR}]")
#message(STATUS "SPR_INC_DIR: [${SPR_INC_DIR}]")
message(STATUS "SPR_BLD_DIR: [${SPR_BLD_DIR}]")

# ------------------------------------------------------------------------------
#  Sytem environment.
#
include("${SPR_CORE_DIR}/make.system.cmake")
message(STATUS "Architecture: ${ARCHITECTURE}")

if(${Windows})
    set(CMAKE_CONFIGURATION_TYPES Debug Release Trace)
elseif(${unix})
    set(CMAKE_CONFIGURATION_TYPES Release)
endif()
set(CMAKE_GENERATOR_PLATFORM ${ARCHITECTURE})

# ------------------------------------------------------------------------------
#  Read function definitions.
#
include("${SPR_CORE_DIR}/make.func.cmake")

# ------------------------------------------------------------------------------
#  Read compiler/linker option file (try to find in following order).
#	(1) File specified by option "-D OPTS=<file>".
#	(2) "${CMAKE_SOURCE_DIR}/CMakeOpts.txt".
#	(3) Default file: "${SPR_SRC_DIR}/CMakeOpts.txt.dist".
#
set(OPTS_FILE_NAME "CMakeOpts.txt")
set(OPTS_FILE "${CMAKE_SOURCE_DIR}/${OPTS_FILE_NAME}")
set(OPTS_DEFAULT_FILE "${SPR_SRC_DIR}/${OPTS_FILE_NAME}.dist")
include_file(OPTS ${OPTS_FILE} ${OPTS_DEFAULT_FILE})

# ------------------------------------------------------------------------------
#  Set compiler/linker options.
#
if(DEFINED LIBTYPE)
    if(${LIBTYPE} STREQUAL SHARED)
    else()
	message("Error: invalid value [LIBTYPE=${LIBTYPE}]")
    endif()
else()
    if(${Windows})
	set(LIBTYPE STATIC)
    elseif(${unix})
	set(LIBTYPE STATIC)
    endif()
endif()
if(${Windows})
    message(STATUS "Host System: Windows")
    set(CMAKE_CXX_FLAGS		"${WIN_COPT_COMMON}")
    set(CMAKE_CXX_FLAGS_DEBUG	"${WIN_COPT_DEBUG}")
    set(CMAKE_CXX_FLAGS_RELEASE	"${WIN_COPT_RELEASE}")
    set(CMAKE_CXX_FLAGS_TRACE	"${WIN_COPT_TRACE}")
    foreach(macros IN ITEMS ${WIN_COPT_MACROS})
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /D ${macros}")
    endforeach()
    set(CMAKE_EXE_LINKER_FLAGS		  "${WIN_LINK_COMMON}")
    set(CMAKE_EXE_LINKER_FLAGS_DEBUG	  "${WIN_LINK_DEBUG}")
    set(CMAKE_EXE_LINKER_FLAGS_RELEASE	  "${WIN_LINK_RELEASE}")
    set(CMAKE_EXE_LINKER_FLAGS_TRACE	  "${WIN_LINK_TRACE}")
elseif(${unix})
    if(${Linux})
	message(STATUS "Host System: Linux")
    else()
	message(STATUS "Host System: unix")
    endif()
    message(STATUS "Library type: ${LIBTYPE}")
    set(CMAKE_CXX_COMPILER	/usr/bin/g++)
endif()

# ------------------------------------------------------------------------------
#  Read definition of external packages. (try to find in following order).
#	(1) File specified by option "-D CONF=<file>".
#	(2) "${CMAKE_SOURCE_DIR}/CMakeConf.txt".
#	(3) Default file: "${SPR_SRC_DIR}/CMakeConf.txt.dist".
#
set(CONF_FILE_NAME "CMakeConf.txt")
set(CONF_FILE "${CMAKE_SOURCE_DIR}/${CONF_FILE_NAME}")
set(CONF_DEFAULT_FILE "${SPR_SRC_DIR}/${CONF_FILE_NAME}.dist")
include_file(CONF ${CONF_FILE} ${CONF_DEFAULT_FILE})

# ------------------------------------------------------------------------------
#  Find external packages if specified.
#
if(DEFINED CMAKE_PREFIX_PATH)
    message(STATUS "CMAKE_PREFIX_PATH:")
    foreach(path IN LISTS CMAKE_PREFIX_PATH)
	message("       ${path}")
    endforeach()
    #
    message("finding package: Boost")
    cmake_policy(SET CMP0074 NEW)
    find_package(Boost REQUIRED)
    if(Boost_FOUND)
	message(STATUS "Boost_INCLUDE_DIRS: ${Boost_INCLUDE_DIRS}")
    else()
	message("** Boost NOT FOUND")
	return()
    endif()
    #
    message("finding package: GLEW")
    cmake_policy(SET CMP0074 NEW)
    if(DEFINED GLEW_LIB32_DIR AND "${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x86")
	list(APPEND CMAKE_PREFIX_PATH ${GLEW_LIB32_DIR})
    endif()
    if(DEFINED GLEW_LIB64_DIR AND "${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x64")
	list(APPEND CMAKE_PREFIX_PATH ${GLEW_LIB64_DIR})
    endif()
    find_package(GLEW)
    if(GLEW_FOUND)
	message(STATUS "GLEW_INCLUDE_DIRS: ${GLEW_INCLUDE_DIRS}")
    else()
	message("** GLEW NOT FOUND")
	return()
    endif()
    #
    message("finding package: GLUT")
    cmake_policy(SET CMP0074 NEW)
    find_package(GLUT REQUIRED)
    if(GLUT_FOUND)
	message(STATUS "GLUT_INCLUDE_DIR: ${GLUT_INCLUDE_DIR}")
    else()
	message("** GLUT NOT FOUND")
	return()
    endif()
endif()

# ------------------------------------------------------------------------------
#  Additional include directories.
#
#if(DEFINED CMAKE_PREFIX_PATH)
#    set(ADDITIONAL_INCDIR "C:/Package/glui-2.37/include")
#endif()

# ------------------------------------------------------------------------------
#  Some other definitions.
#
if(${Windows})
    set(RunSwigDir ${SPR_SRC_DIR}/RunSwig)
    set(Python ${RunSwigDir}/python_adapter.bat)
    file(TO_NATIVE_PATH "${RunSwigDir}" RunSwigDir)
    file(TO_NATIVE_PATH "${Python}" Python)
#    if(NOT DEFINED VS_VERSION)
#	execute_process(
#	    COMMAND ${Python} get_vs_version.py
#	    OUTPUT_VARIABLE VS_VERSION
#	)
#    endif()
    message(STATUS "Visual Studio Version: ${VS_VERSION}")
elseif(${unix})
    set(Python python)
endif()

# ------------------------------------------------------------------------------
#  Define depending projects.
#
set(SPR_PROJS Base Collision Creature FileIO Foundation Framework Graphics
	      HumanInterface Physics)
#
set(DEP_Base)
set(DEP_Collision Foundation)
set(DEP_Creature Foundation Framework Physics)
set(DEP_FileIO Foundation)
set(DEP_Foundation Base)
set(DEP_Framework FileIO Foundation Graphics Physics)
set(DEP_Graphics Foundation)
set(DEP_HumanInterface Foundation)
set(DEP_Physics Collision Foundation)
add_subdirectory(${SPR_SRC_DIR}/RunSwig ${SPR_BLD_DIR}/RunSwig)
foreach(proj IN ITEMS ${SPR_PROJS})
    add_subdirectory(${SPR_SRC_DIR}/${proj} ${SPR_BLD_DIR}/${proj})
    set(DEP_LIST RunSwig)
    foreach(dep IN ITEMS ${DEP_${proj}})
	list(APPEND DEP_LIST ${dep})
    endforeach()
    add_dependencies(${proj} ${DEP_LIST})
    #message("   dependencies: ${proj} => ${DEP_LIST}")
endforeach()

# ------------------------------------------------------------------------------
#  Main target.
#
set(Target ${ProjectName})
if(${Windows})
    set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT ${ProjectName})
endif()
set(OUTDIR_BASE ${SPR_TOP_DIR}/generated/lib)
if(${Windows})
    set(LIBBASE_DEBUG   ${VS_VERSION}D${CMAKE_GENERATOR_PLATFORM})
    set(LIBBASE_RELEASE ${VS_VERSION}${CMAKE_GENERATOR_PLATFORM})
    set(LIBBASE_TRACE   ${VS_VERSION}T${CMAKE_GENERATOR_PLATFORM})
    set(LIBCMND_DEBUG   SpringheadLib.bat ${CMAKE_GENERATOR_PLATFORM} ${LIBBASE_DEBUG})
    set(LIBCMND_RELEASE SpringheadLib.bat ${CMAKE_GENERATOR_PLATFORM} ${LIBBASE_RELEASE})
    set(LIBCMND_TRACE   SpringheadLib.bat ${CMAKE_GENERATOR_PLATFORM} ${LIBBASE_TRACE})
    set(LIB_SUFFIX lib)
    set(LIBNAME_DEBUG   ${Target}${LIBBASE_DEBUG}.${LIB_SUFFIX})
    set(LIBNAME_RELEASE ${Target}${LIBBASE_RELEASE}.${LIB_SUFFIX})
    set(LIBNAME_TRACE   ${Target}${LIBBASE_TRACE}.${LIB_SUFFIX})
elseif(${unix})
    if("${LIBTYPE}" STREQUAL "STATIC")
	set(LIB_SUFFIX a)
    else()
	set(LIB_SUFFIX so)
    endif()
    set(LIBNAME lib${Target}.${LIB_SUFFIX})
endif()

# ------------------------------------------------------------------------------
#  Include directories.
#
include_directories(${Target}
    PRIVATE ${CMAKE_SOSURCE_DIR}
    PRIVATE ${SPR_INC_DIR}
    PRIVATE ${SPR_SRC_DIR}
    PRIVATE ${Boost_INCLUDE_DIRS}
    PRIVATE ${GLUE_INCLUDE_DIRS}
    PRIVATE ${GLUT_INCLUDE_DIR}
    #PRIVATE ${ADDITIONAL_INCDIR}
    PRIVATE ${SPR_TOP_DIR}/dependency/src
)
foreach(_incdir ${ADDITIONAL_INCDIR})
    include_directories(${Target} PRIVATE ${_incdir})
endforeach()

# ------------------------------------------------------------------------------
#  Generate Springhead Library.
#
if(${Windows})
    if ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x64")
	set(LIBDIR ${SPR_TOP_DIR}/generated/lib/win64)
    else ()
	set(LIBDIR ${SPR_TOP_DIR}/generated/lib/win32)
    endif()
elseif(${unix})
    set(LIBDIR ${SPR_TOP_DIR}/generated/lib)
endif()

if(${Windows})
    add_custom_target(${ProjectName} ALL
	COMMAND if "'$(Configuration)'" equ "'Debug'"   ${LIBCMND_DEBUG}
	COMMAND if "'$(Configuration)'" equ "'Release'" ${LIBCMND_RELEASE}
	COMMAND if "'$(Configuration)'" equ "'Trace'"   ${LIBCMND_TRACE}
	WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
	DEPENDS ${SPR_PROJS}
	COMMENT [[  generating Springhead Library... ]]
    )
elseif(${unix})
    list(JOIN SPR_PROJS " " _members)
    set(_cmnd ./SpringheadLib.sh)
    if("${LIBTYPE}" STREQUAL "STATIC")
	set(_outdir ${SPR_SRC_DIR})
	set(_gendir ${SPR_TOP_DIR}/generated/lib)
	add_custom_target(${ProjectName} ALL
	    COMMAND mkdir -p ${_outdir}
	    COMMAND ${_cmnd} STATIC ${_outdir}/${LIBNAME} ${_members}
	    COMMAND ranlib ${_outdir}/${LIBNAME}
	    COMMAND mkdir -p ${_gendir}
	    COMMAND cp ${_outdir}/${LIBNAME} ${_gendir}
	    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
	    DEPENDS ${SPR_PROJS}
	    COMMENT [[  generating Springhead Library... ]]
	)
    else()
	set(_outdir ${SPR_TOP_DIR}/generated/lib)
	add_custom_target(${ProjectName} ALL
	    COMMAND mkdir -p ${_outdir}
	    COMMAND ${_cmnd} SHARED ${_outdir} ${_members}
	    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
	    DEPENDS ${SPR_PROJS}
	    COMMENT [[  generating Springhead Library... ]]
	)
    endif()
endif()

# ------------------------------------------------------------------------------
#  Install.
#
if(DEFINED SPRINGHEAD_INCLUDE_PREFIX)
    message("** INSTALL: Headers: ${SPRINGHEAD_INCLUDE_PREFIX} **")
    install(DIRECTORY ${SPR_INC_DIR}
	DESTINATION ${SPRINGHEAD_INCLUDE_PREFIX}
    )
endif()
if(${Windows})
    if(DEFINED SPRINGHEAD_LIBRARY_DIR_DEBUG)
	set(_libpath ${LIBDIR}/${LIBNAME_DEBUG})
	message("** INSTALL: ${LIBNAME_DEBUG}: ${SPRINGHEAD_LIBRARY_DIR_DEBUG} **")
	install(FILES ${_libpath}
	    DESTINATION ${SPRINGHEAD_LIBRARY_DIR_DEBUG}
    PERMISSIONS OWNER_READ GROUP_READ WORLD_READ
	    CONFIGURATIONS Debug
	)
    endif()
    if(DEFINED SPRINGHEAD_LIBRARY_DIR_RELEASE)
	set(_libpath ${LIBDIR}/${LIBNAME_RELEASE})
	message("** INSTALL: ${LIBNAME_RELEASE}: ${SPRINGHEAD_LIBRARY_DIR_RELEASE} **")
	install(FILES ${_libpath}
	    DESTINATION ${SPRINGHEAD_LIBRARY_DIR_RELEASE}
	    PERMISSIONS OWNER_READ GROUP_READ WORLD_READ
	    CONFIGURATIONS Release
	)
    endif()
elseif(${unix})
    if(DEFINED SPRINGHEAD_LIBRARY_DIR)
	set(_libpath ${LIBDIR}/${LIBNAME})
	message("** INSTALL: ${LIBNAME}: ${SPRINGHEAD_LIBRARY_DIR} **")
	install(FILES ${_libpath}
	    DESTINATION ${SPRINGHEAD_LIBRARY_DIR}
	    PERMISSIONS OWNER_READ GROUP_READ WORLD_READ
	    CONFIGURATIONS Release
	)
    endif()
endif()

# end: CMakeLists.txt
