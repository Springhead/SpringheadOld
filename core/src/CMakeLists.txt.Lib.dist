# CMakeLists.txt for Springhead

cmake_minimum_required(VERSION 3.1)

# ------------------------------------------------------------------------------
#  Definition of project.
#
set(ProjectName "Springhead")
message(STATUS "Project: ${ProjectName}")
project(${ProjectName} CXX)
set(CMAKE_SUPPRESS_REGENERATION true)
set(CMAKE_USE_RELATIVE_PATHS true)

# ------------------------------------------------------------------------------
#  Determine top directory of Springhead tree.
#	If cmake option "-D TOPDIR=<absolute-dir-path>" is specified,
#	<abs-dir-path> is the one.
#	Otherwise, "${CMAKE_SOURCE_DIR}/CMakeTopDir.txt" SHOULD contain the
#	definition of top directory like;
#	    set(TOPDIR "<absolute-dir-path>")
#
set(TOPDIR_FILE "CMakeTopdir.txt")
if(DEFINED TOPDIR)
    if(NOT EXISTS "${TOPDIR}")
	message("Error: File \"${TOPDIR}\" not found")
	return()
    endif()
else()
    if(NOT EXISTS "${CMAKE_SOURCE_DIR}/${TOPDIR_FILE}")
	message("Error: File \"${TOPDIR_FILE}\" not found")
	return()
    endif()
    include(${TOPDIR_FILE})
endif()

set(SPR_TOP_DIR  "${TOPDIR}")
set(SPR_CORE_DIR "${TOPDIR}/core")
set(SPR_SRC_DIR  "${TOPDIR}/core/src")
set(SPR_INC_DIR  "${TOPDIR}/core/include")
get_filename_component(TOPDIR ${TOPDIR} ABSOLUTE)
get_filename_component(SPR_TOP_DIR ${SPR_TOP_DIR} ABSOLUTE)
get_filename_component(SPR_SRC_DIR ${SPR_SRC_DIR} ABSOLUTE)
get_filename_component(SPR_INC_DIR ${SPR_INC_DIR} ABSOLUTE)
get_filename_component(SPR_BLD_DIR ${PROJECT_BINARY_DIR} ABSOLUTE)
message(STATUS "SPR_TOP_DIR: [${SPR_TOP_DIR}]")
#message(STATUS "SPR_SRC_DIR: [${SPR_SRC_DIR}]")
#message(STATUS "SPR_INC_DIR: [${SPR_INC_DIR}]")
message(STATUS "SPR_BLD_DIR: [${SPR_BLD_DIR}]")

# ------------------------------------------------------------------------------
#  Sytem environment.
#
include("${SPR_CORE_DIR}/make.system.cmake")
message(STATUS "Architecture: ${ARCHITECTURE}")

#set(CMAKE_BUILD_TYPE Release)
#set(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE} CACHE STRING "" FORCE)
set(CMAKE_CONFIGURATION_TYPES Debug Release Trace)
set(CMAKE_GENERATOR_PLATFORM ${ARCHITECTURE})

# ------------------------------------------------------------------------------
#  Read function definitions.
#
include("${SPR_CORE_DIR}/make.func.cmake")

# ------------------------------------------------------------------------------
#  Read compiler/linker option file (try to find in following order).
#	(1) File specified by option "-D OPTS=<file>".
#	(2) "${CMAKE_SOURCE_DIR}/CMakeOpts.txt".
#	(3) Default file: "${SPR_SRC_DIR}/CMakeOpts.txt.dist".
#
set(OPTS_FILE_NAME "CMakeOpts.txt")
set(OPTS_FILE "${CMAKE_SOURCE_DIR}/${OPTS_FILE_NAME}")
set(OPTS_DEFAULT_FILE "${SPR_SRC_DIR}/${OPTS_FILE_NAME}.dist")
include_file(OPTS ${OPTS_FILE} ${OPTS_DEFAULT_FILE})

# ------------------------------------------------------------------------------
#  Set compiler/linker options.
#
if(${Windows})
    message(STATUS "Host System: Windows")
    set(CMAKE_CXX_FLAGS		${WIN_COPT_COMMON})
    set(CMAKE_CXX_FLAGS_DEBUG	${WIN_COPT_DEBUG})
    set(CMAKE_CXX_FLAGS_RELEASE	${WIN_COPT_RELEASE})
    set(CMAKE_CXX_FLAGS_TRACE	${WIN_COPT_TRACE})
    foreach(macros IN ITEMS ${WIN_COPT_MACROS})
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /D ${macros}")
    endforeach()
elseif(${Linux})
    message(STATUS "Host System: Linux")
    set(LIB_DIR	"${SPR_CORE_DIR}/lib")
    set(CMAKE_CXX_FLAGS		${LINUX_COPT_COMMON})
    set(CMAKE_CXX_FLAGS_DEBUG	${LINUX_COPT_DEBUG})
    set(CMAKE_CXX_FLAGS_RELEASE	${LINUX_COPT_RELEASE})
    foreach(macros IN ITEMS ${WIN_COPT_MACROS})
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D ${macros}")
    endforeach()
    set(LDFLAGS.EXTRA	"-L${LIB_DIR}/linux/ -L/usr/lib \
			 -L/usr/X11R6/lib -L/usr/lib/X11")
    set(LDFLAGS.GL	"-lX11 -lXi -lXmu -lglui -lglut -lGLEW -lGLU -lGL -lm \
			 -ldl -lboost_regex")
    set(INCLUDES	"-I/usr/X11R6/include/ -I/usr/X11/include")
    set(ARFLAGS		"r")
    set(LDFLAGS "-L${SRC_DIR}/Base/ \
		 -L${SRC_DIR}/Collision/ \
		 -L${SRC_DIR}/Creature/ \
		 -L${SRC_DIR}/FileIO/ \
		 -L${SRC_DIR}/Foundation/ \
		 -L${SRC_DIR}/Framework/ \
		 -L${SRC_DIR}/Graphics/ \
		 -L${SRC_DIR}/HumanInterface/ \
		 -L${SRC_DIR}/Physics/ \
		 -lBase -lCollision -lCreature -lFileIO -lFoundation -lFramework \
		 -lGraphics -lHumanInterface -lPhysics
		 ${LDFLAGS.EXTRA} \
		 ${LDFLAGS.GL}")
    set(INCLUDES "${INCLUDES} -I${INC_DIR} -I${SRC_DIR} -I.")
endif()

# ------------------------------------------------------------------------------
#  Read definition of external packages. (try to find in following order).
#	(1) File specified by option "-D CONF=<file>".
#	(2) "${CMAKE_SOURCE_DIR}/CMakeConf.txt".
#	(3) Default file: "${SPR_SRC_DIR}/CMakeConf.txt.dist".
#
set(CONF_FILE_NAME "CMakeConf.txt")
set(CONF_FILE "${CMAKE_SOURCE_DIR}/${CONF_FILE_NAME}")
set(CONF_DEFAULT_FILE "${SPR_SRC_DIR}/${CONF_FILE_NAME}.dist")
include_file(CONF ${CONF_FILE} ${CONF_DEFAULT_FILE})

# ------------------------------------------------------------------------------
#  Find external packages if specified.
#
if(DEFINED BOOST_ROOT)
    message("++ finding package: Boost")
    cmake_policy(SET CMP0074 NEW)
    find_package(Boost REQUIRED)
    if(Boost_FOUND)
	message(STATUS "Boost_INCLUDE_DIRS: ${Boost_INCLUDE_DIRS}")
    else()
	message("** Boost NOT FOUND")
    endif()
endif()
if(DEFINED GLEW_ROOT)
    message("++ finding package: GLEW")
    cmake_policy(SET CMP0074 NEW)
    if(DEFINED GLEW_LIB32_DIR AND "${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x86")
	list(APPEND CMAKE_PREFIX_PATH ${GLEW_LIB32_DIR})
    endif()
    if(DEFINED GLEW_LIB64_DIR AND "${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x64")
	list(APPEND CMAKE_PREFIX_PATH ${GLEW_LIB64_DIR})
    endif()
    find_package(GLEW)
    if(GLEW_FOUND)
	message(STATUS "GLEW_INCLUDE_DIRS: ${GLEW_INCLUDE_DIRS}")
    else()
	message("** GLEW NOT FOUND")
    endif()
endif()
if(DEFINED GLUT_ROOT)
    message("++ finding package: GLUT")
    cmake_policy(SET CMP0074 NEW)
    find_package(GLUT REQUIRED)
    if(GLUT_FOUND)
	message(STATUS "GLUT_INCLUDE_DIR: ${GLUT_INCLUDE_DIR}")
    else()
	message("** GLUT NOT FOUND")
    endif()
endif()

# ------------------------------------------------------------------------------
#  Some other definitions.
#
if(${Windows})
    set(RunSwigDir ${CMAKE_SOURCE_DIR}/RunSwig)
    set(Python ${RunSwigDir}/python_adapter.bat)
#    if(NOT DEFINED VS_VERSION)
#	execute_process(
#	    COMMAND ${Python} get_vs_version.py
#	    OUTPUT_VARIABLE VS_VERSION
#	)
#    endif()
    message(STATUS "Visual Studio Version: ${VS_VERSION}")
elseif(${Linux})
    set(Python python)
endif()

# ------------------------------------------------------------------------------
#  Define depending projects.
#
set(SPR_PROJS Base Collision Creature FileIO Foundation Framework Graphics
	      HumanInterface Physics)
#
set(DEP_Base)
set(DEP_Collision Foundation)
set(DEP_Creature Foundation Framework Physics)
set(DEP_FileIO Foundation)
set(DEP_Foundation Base)
set(DEP_Framework FileIO Foundation Graphics Physics)
set(DEP_Graphics Foundation)
set(DEP_HumanInterface Foundation)
set(DEP_Physics Collision Foundation)
foreach(proj IN ITEMS ${SPR_PROJS} RunSwig)
    add_subdirectory(${SPR_SRC_DIR}/${proj} ${SPR_BLD_DIR}/${proj})
    set(DEP_LIST RunSwig)
    foreach(dep IN ITEMS ${DEP_${proj}})
	list(APPEND DEP_LIST ${dep})
    endforeach()
    add_dependencies(${proj} ${DEP_LIST})
    #message("   dependencies: ${proj} => ${DEP_LIST}")
endforeach()

# ------------------------------------------------------------------------------
#  Main target.
#
set(Target ${ProjectName})
if(${Windows})
    set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT ${ProjectName})
endif()
set(OUTDIR_BASE ${SPR_TOP_DIR}/generated/lib)
set(LIBNAME_DEBUG   ${VS_VERSION}D${CMAKE_GENERATOR_PLATFORM})
set(LIBNAME_RELEASE ${VS_VERSION}${CMAKE_GENERATOR_PLATFORM})
set(LIBNAME_TRACE   ${VS_VERSION}T${CMAKE_GENERATOR_PLATFORM})
set(LIBCMND_DEBUG   SpringheadLib.bat ${CMAKE_GENERATOR_PLATFORM} ${LIBNAME_DEBUG})
set(LIBCMND_RELEASE SpringheadLib.bat ${CMAKE_GENERATOR_PLATFORM} ${LIBNAME_RELEASE})
set(LIBCMND_TRACE   SpringheadLib.bat ${CMAKE_GENERATOR_PLATFORM} ${LIBNAME_TRACE})

# ------------------------------------------------------------------------------
#  Clean (only for RunSwig).
#
if ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x64")
    set(LIBDIR ${SPR_TOP_DIR}/generated/lib/win64)
else ()
    set(LIBDIR ${SPR_TOP_DIR}/generated/lib/win32)
endif()
set(LIBPATH_DEBUG   ${LIBDIR}/Springhead${LIBNAME_DEBUG}.lib)
set(LIBPATH_RELEASE ${LIBDIR}/Springhead${LIBNAME_RELEASE}.lib)
set(LIBPATH_TRACE   ${LIBDIR}/Springhead${LIBNAME_TRACE}.lib)
set(CLEAN ${Python} ${CMAKE_SOURCE_DIR}/RunSwig/Clean.py ${CMAKE_SOURCE_DIR})

if(${Windows})
    add_custom_target(${ProjectName} ALL
	COMMAND cd ${CMAKE_SOURCE_DIR}
	COMMAND if "'$(Configuration)'" equ "'Debug'"   ${LIBCMND_DEBUG}
	COMMAND if "'$(Configuration)'" equ "'Release'" ${LIBCMND_RELEASE}
	COMMAND if "'$(Configuration)'" equ "'Trace'"   ${LIBCMND_TRACE}
	DEPENDS Base Collision Creature FileIO Foundation Framework Graphics HumanInterface Physics
	COMMENT [[  generating Springhead Library... ]]
    )
    add_custom_target(RunSwig_Clean
	COMMAND if "'$(Configuration)'" equ "'Debug'"   ${CLEAN} ${LIBPATH_DEBUG}
	COMMAND if "'$(Configuration)'" equ "'Release'" ${CLEAN} ${LIBPATH_RELEASE}
	COMMAND if "'$(Configuration)'" equ "'Trace'"   ${CLEAN} ${LIBPATH_TRACE}
	COMMENT [[  clearing RunSwig generated files and Springhead Library... ]]
    )
elseif(${Linux})
endif()

# ------------------------------------------------------------------------------
#  Install.
#
if(DEFINED SPRINGHEAD_INCLUDE_PREFIX	  AND
   DEFINED SPRINGHEAD_LIBRARY_DIR_DEBUG	  AND
   DEFINED SPRINGHEAD_LIBRARY_DIR_RELEASE)
    message("** INSTALL: Debug:   ${SPRINGHEAD_LIBRARY_DIR_DEBUG} **")
    message("** INSTALL: Release: ${SPRINGHEAD_LIBRARY_DIR_RELEASE} **")
    install(FILES ${LIBPATH_DEBUG}
	DESTINATION ${SPRINGHEAD_LIBRARY_DIR_DEBUG}
	PERMISSIONS OWNER_READ GROUP_READ WORLD_READ
	CONFIGURATIONS Debug
    )
    install(FILES ${LIBPATH_RELEASE}
	DESTINATION ${SPRINGHEAD_LIBRARY_DIR_RELEASE}
	PERMISSIONS OWNER_READ GROUP_READ WORLD_READ
	CONFIGURATIONS Release
    )
    message("** INSTALL: Headers: ${SPRINGHEAD_INCLUDE_PREFIX} **")
    install(DIRECTORY ${SPR_INC_DIR}
	DESTINATION ${SPRINGHEAD_INCLUDE_PREFIX}
    )
endif()

# end: CMakeLists.txt
