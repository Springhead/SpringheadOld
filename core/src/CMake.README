改定履歴
	Rev1.1	2019/06/13	配布ファイルの名称及び表記法を変更しました


cmake の利用法 (Windowsの場合)

1. はじめに
	配布されるファイル(cmake関連)は、
	    CMakeLists.txt.Lib.dist	… Springhead library 開発/構築用
	    CMakeLists.txt.Dev.dist
		… Application program を使用した Springhead library 開発用
	    CMakeLists.txt.App.dist
		… Sprringhead library を使用した Application program 開発用
	    CMakeTopdir.txt.dist	… Springhead トップディレクトリ指定用
	    CMakeOpts.txt.dist		… Compile/Link オプション指定用
	    CMakeConf.txt.dist		… 外部 package 指定 / Install 場所指定用
	です。
	配布されるファイルはすべて雛形ファイルなので、これらを編集してコミット
	しないようにお願いします。
	各ファイルはテキストファイルで、文字('#')で始まる行はコメント行です。
	パラメータはset文で定義します。
	    set(変数名 値)
	値がファイルパスのときは"絶対パス"で指定してください。
	またパスセパレータには文字('/')を使用してください(escape問題の回避)。

2. 表記法
	以下では次の表記法を使用します。
	<SprTop>	Springhead を clone したディレクトリ
	<SprSrc>	<SprTop>/core/src
	<SrcDir>	cmakeの対象とする"CMakeLists.txt"があるディレクトリ
	<BldDir>	中間生成物を格納するディレクトリ（例えば"build"）

3. Springhead library を開発/構築する場合

3.1 準備
	配布された次のファイルをコピーします (名称を変更することに注意)。
	> cd <SprSrc>
	> copy CMakeLists.txt.Lib.dist CMakeLists.txt

	Compile/link オプションを変更する場合には次のファイルもコピーします。
	> copy CMakeOpts.txt.dist CMakeOpts.txt

	<SprTop>/dependency を使わない場合には次のファイルもコピーします。
	> copy CMakeConf.txt.dist CMakeConf.txt

3.2 設定の変更
	Compile/link オプションを変更する場合には "CMakeOpts.txt" を、
	外部パッケージを使用する場合 及び Install 先を設定する場合には
	"CMakeConf.txt" を適宜編集します (編集方法は各ファイルを参照してください）。

3.3 ソリューションファイルの生成
	作業領域を確保して、そこにソリューションファイルを生成します。
	> mkdir <BldDir>
	> cd <BldDir>
	> cmake .. [<generator>]
	<generator> の例：  -G "Visual Studio 15 2017" -A x64
			    -G "Visual Studio 15 2017 Win64"
			    -G "Unix Makefiles"
	<generator> の詳細は cmake --help 参照。

3.4 ライブラリのビルド
	生成されたソリューションファイル <BldDir>/Springhead.sln" を実行します。
	ライブラリは <SprTop>/generated/lib/win[32|64] に作成されます。

3.5 ソリューションファイルの再作成
	新規ソースを追加した場合などソースファイル構成に変更があった場合、及び
	CMake*.txt を修正した場合には、cmake を再実行してソリューションファイルを
	再作成する必要があります。
	> cd <BldDir>
	> cmake .. [<generator>]

	※ cmake 変数 (CMake*.txt の中で set(var ...) で設定されたもの) はキャッシュ
	   されているようです。したがって、単に set(var ...) をコメントアウトした
	   場合、cmake 起動時に指定していたオプション (-D OPTS=..., -D CONF=...) (後述)
	   を止める場合などは、キャッシュを無効にするために <BldDir> を一度削除する
	   必要があります。

	   > cd <SrcDir>
	   > rd /s /q <BldDir>
	   > mkdir <BldDir>
	   > cd <BldDir>
	   > cmake .. [<generator>]

4. Application program を使用して Springhead library を開発する場合

4.1 準備
	配布された次のファイルをコピーします。
	> cd <SprSrc>
	> copy CMakeTopdir.txt.dist CMakeTopdir.txt
	> copy CMakeLists.txt.Dev.dist CMakeLists.txt

	Compile/link オプションを変更する場合には次のファイルもコピーします。
	> copy CMakeOpts.txt.dist CMakeOpts.txt

	<SprTop>/dependency を使わない場合には次のファイルもコピーします。
	> copy CMakeConf.txt.dist CMakeConf.txt

4.2 <SprTop> の設定
	CMakeTopdir.txt を編集して <SprTop> を設定してください。

4.3 設定の変更
	CMakeLists.txt を編集して必要なパラメータを設定してください。
	パラメータは "Customization section" に記述されています。
	ここでは、
	　・使用する Springhead project の選択
	　・include directory path の追加
	　・include library path / library file の追加
	などが指定できます。詳細は CMakeLists.txt の該当部分を参照してください。

	CMakeOpts.txt, CMakeConf.txt の編集については 3.2 と同様です。

4.4 ソリューションファイルの生成
	3.3 と同様です。
	ただし Visual Studio の場合とは異なり、第三者が Springhead library の
	ソース構成に加えた修正が自動的に取り込まれることはありません。
	(注) ソースファイルの追加や削除などを指しています。ソースファイルに
	　　 施された修正は正しく反映されます。
	ソリューションにある 'sync' というターゲットをビルドすることで最新の
	構成を反映させることができます (cmake を再実行するのと同等です)。
	'sync' を実行するとソリューションファイルが更新されるために
	「ソリューション'xxx'は環境外で変更されています。」というダイアログが
	表示されます。「再読み込み(R)」を指定して変更を反映させてください。

4.5 アプリケーションのビルド
	生成されたソリューションファイル <BldDir>/<application>.sln" を実行します。
	バイナリは <BldDir>/Debug, <BldDir>/Release などに作成されます。

4.6 ソリューションファイルの再作成
	3.5 と同様です。

5. Sprringhead library を使用して Application program を開発する場合

5.1 準備
	配布された次のファイルをコピーします。
	> cd <SprSrc>
	> copy CMakeTopdir.txt.dist CMakeTopdir.txt
	> copy CMakeLists.txt.App.dist CMakeLists.txt

	Compile/link オプションを変更する場合には次のファイルもコピーします。
	> copy CMakeOpts.txt.dist CMakeOpts.txt

	<SprTop>/dependency を使わない場合には次のファイルもコピーします。
	> copy CMakeConf.txt.dist CMakeConf.txt

5.2 <SprTop> の設定
	CMakeTopdir.txt を編集して <SprTop> を設定してください。

5.3 設定の変更
	CMakeLists.txt を編集して必要なパラメータを設定してください。
	パラメータは "Customization section" に記述されています。
	ここでは、
	　・include directory path の追加
	　・include library path / library file の追加
	などが指定できます。詳細は CMakeLists.txt の該当部分を参照してください。

	CMakeOpts.txt, CMakeConf.txt の編集については 3.2 と同様です。

5.4 ソリューションファイルの生成
	3.3 と同様です。

5.5 アプリケーションのビルド
	生成されたソリューションファイル <BldDir>/<application>.sln" を実行します。
	バイナリは <BldDir>/Debug, <BldDir>/Release などに作成されます。

4.6 ソリューションファイルの再作成
	3.5 と同様です。

6. 補足
    CMakeOpts.txt と CMakeConf.txt はそれぞれ任意の場所においても構いません。
    その場合には cmake の起動時に次のオプションを追加します。
	> cmake [-D OPTS=<opts-file>] [-D CONF=<conf-file>] .. [<generator>]
    複数のアプリケーションで共通の設定を用いる場合はこのようにします。

以上
