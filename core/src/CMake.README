改定履歴
	Rev2.0	2019/06/19	βバージョン版用に全面改訂
	Rev1.1	2019/06/13	配布ファイルの名称及び表記法を変更しました


Springheadを利用するアプリの開発でcmakeを利用するにあたって（Windowsの場合）

1. cmakeを利用する利点
	今までは、新しいバージョンのVisual Studioを利用するためには、
	他のソリューションからコピーして修正するなどして
	.sln/.vcxprojファイルを独自に用意する必要がありました。

	これに対して、cmakeは、CMakeLists.txtに書かれた内容に従って
	.sln/.vcxproj/Makefileを自動的に生成します（cmake-configure）。
	これにより、
	(1) CMakeLists.txtを管理するだけでWindowsとunixの両方に対応できる。
	(2) Visual Studioが新しいバージョンになっても（cmakeが対応してくれれば）
	    そのまま移行できる。
	という利点が得られます。

2. cmake-configure（ソリューションファイルの生成）
	cmakeがどのようにして.sln/.vcxproj/Makefileを生成（cmake-configure）するか
	について、
	次のようなソースツリーを仮定して説明します（必要なファイルも併せて示します）。
	    # Springhead library
	    C:/Project/Springhead				… <SprTop>
	    C:/Project/Springhead/core/src			… <SprSrc>
	    C:/Project/Springhead/core/src/CMakeLists.txt	(1)
	    C:/Project/Springhead/core/src/Base/CMakeLists.txt  (2)
					   :
	    # Application
	    C:/Develop/App					… <AppSrc>
	    C:/Develop/App/CMakeLists.txt			(3)
	    C:/Develop/App/CMakeTopdir.txt			(4)
	    C:/Develop/App/subdir
	    C:/Develop/App/subdir/CMakeLists.txt		(5)
	開発するアプリのソースは<AppSrc>以下にあるものとします。

	(1)と(2)はGitHubで配布されますから、アプリ開発者が用意するのは(3)〜(5)です。
	(3)と(4)の作り方については後程説明します。
	(5)については(2)を参考にして作成することになります。

	また、<SprTop>/dependency/以下を使用しない場合またはビルドに条件を
	変えたい場合には更に別のファイルを用意する必要がありますが、それに
	ついても後程説明します（いずれも雛形ファイルを配布しています）。

	最初にSpringhead libraryをcmake-configureします。
	まず、作業領域を用意します（ここではbuild (=<BldDir>)とします。
	    > chdir <SprSrc>
	    > makedir <BldDir>
	    > chdir <BldDir>
	cmake-configureの実行は、
	    > cmake .. [<generator>]
		<generator>の例：
			-G "Visual Studio 15 2017" -A x64
			-G "Visual Studio 15 2017 Win64"
			-G "Unix Makefiles"
		<generator> の詳細は cmake --help 参照。
	またはcmake-guiを利用してConfigure-Generateとします。

	プロジェクトファイルは、CMakeLists.txtの変数SRCSに定義されたソースファイル
	を元に必要なヘッダファイル情報を走査して作成されます。
	この走査はcmake-configure実行時に実施されますから、この時点での
	ソースファイル構成がプロジェクトファイルの中に``固定化''されることになります。

	cmake-configureで生成されるファイルとビルドで生成されるファイルはすべて
	作業領域に格納されます（ビルドの最終生成物は別の場所に格納されます）。

	次にアプリをcmake-configureします。
	上と同様に、作業領域を用意します（ここではbuild (=<BldDir>)とします。
	    > chdir <AppSrc>
	    > makedir <BldDir>
	    > chdir <BldDir>
	cmake-configureの実行は、
	    > cmake .. [<generator>]
	またはcmake-guiを利用してConfigure-Generateとします。

3. ビルド
	ソリューションのビルドは、cmake-configureで生成された
	    <SprSrc>/<BldDir>/Springhead.sln
	    <AppSrc>/<BldDir>/<app-name>.sln
	をVisual Studioで開き、通常どおりに行ないます。

	(注) 他のアプリ開発において実施された構成変更を自動的に取得するために、
	     Visual Studio に次の設定をしてください（5.3 syncを参照）。
		[ツール] - [オプション] - [環境] - [ドキュメント] にある
		  ・環境外でのファイルの変更を検出する(D)
		  ・保存されていない変更がない限り、変更されたファイルを再読み込みする(R)
		の両方にチェックを入れてください。

4. Springheadのソースファイル構成を変更したら
	従来は、Visual Studio上でリソースの追加・削除を行なってファイルをセーブ
	すれば（そしてcommit/pushすれば）、
	その変更がすべてのソリューションに伝わりました。
	これはすべてのソリューションが同じプロジェクトファイルを参照していたからです。
	しかしcmakeを利用する場合には事情が異なります。
	5.3 syncの説明をよく読んでください。

5. ソリューションファイルに追加された特殊なプロジェクト

5.1 ALL_BUILD
	これはcmakeが自動的に生成するプロジェクトですが、使用することはありません。
	無視して結構です（生成されないようにできればそのように修正します）。

5.2 RunSwig_Clean
	SpringheadのRunSwigプロジェクトはメイクファイルプロジェクトという特殊な
	プロジェクトで、リビルド（クリーン）時にRunSwigが生成するファイルを削除
	することが可能でした。このためソリューション全体をリビルドすれば
	すべてのファイルについて再コンパイルすることができました。
	残念ながらcmakeでは、メイクファイルプロジェクトのようにビルド時、リビルド時
	で異なるコマンドを実行するように指示したプロジェクトを作成することが
	できません。
	したがって、RunSwigのクリーン時に実行されるべきコマンドを実行するための
	プロジェクトRunSwig_Cleanを作り、このプロジェクトを``ビルド''させる
	必要があるのです。
	すなわち、ソリューション全体をリビルドするには、
	(1) プロジェクトRunSwig_Cleanをビルドする
	(2) ソリューションをリビルドする
	という手順を踏むことになります。
	
5.3 sync（重要）
	2. cmake-configureで説明しましたが、cmakeを利用した場合にはすべての中間生成物
	は作業領域下に生成されます。このことが次のような不都合を生じることとなります。

	2つの異なるアプリApp1とApp2とを開発（Springheadの開発を含む）する場合を
	考えます。
	例えばApp1の開発でSpringheadにソースファイルを1つ追加したとします。
	この変更はVisual Studio上で直接ファイルの追加＆セーブをしてもよいし、
	App1を再度cmake-configureしても構いません。しかしいずれの場合でも
	App1の作業領域の中で何らかの変更が行われるだけであり、この変更が
	自動的に別のアプリであるApp2に伝わることはありません。App2でこの変更を
	取り込むためにはApp2で再cmake-configureを行なう必要があるのです。

	この不都合を解消するために、CMmakeLists.txtの雛形（CMakeLists.txt.Dev.dist
	として配布）およびSpringhead/core/src下のCMakeLists.txtに次のような
	仕掛けを施してあります。
	Springheadの各プロジェクトに対しては、
	(1) オブジェクトファイル.objは、どのアプリでビルドしても同じディレクトリ
	    （<SprSrc>/<proj>/の下）に生成される（ビルドの最適化）。
	(2) coonfigureを実行するとtime stampファイルが更新されてしまい必ず
	    全ファイルがビルドされてしまうので、すべてのアプリのtime stampを
	    Springheadのtime stampに同期させる（ビルドの最適化）。
	(3) アプリのcmake-configureで生成されたプロジェクトファイルがSpringheadのものと
	    異なっていたら、その相違をSpringheadに反映させる（ソース構成の同期）。
	(4) アプリのプロジェクトファイルは常にSpringheadのものと同期させる
	    （ソース構成の同期）。
	これらの作業（(1)以外。(1)はcmake-configure時に実施）を実行するのが
	syncというプロジェクトです。

	すなわち、アプリ側でSpringheadのソース構成を変更したならば、
	(1) cmakeを実行して構成の変更をプロジェクトファイルに反映させる。
	(2) 生成されたソリューションファイルをVisual Stueioで開き、プロジェクト
	    syncをビルドする（ソリューション全体をビルドしても構いません）。
	    syncをビルドするとソリューションファイルが更新されるために
	    「ソリューション'xxx'は環境外で変更されています。」というダイアログが
	    表示されます。「再読み込み(R)」を指定して変更を反映させてください。
	の手順を踏んでください。
	これにより、構成の変更が他のアプリおよびSpringheadに伝達されます。

	※ 現状では、(2)で示したダイアログが頻繁に表示されうっとおしいのですが
	   毎回「再読み込み(R)」をさせてください。現在これを回避するための調査
	   を行なっています。

	他のアプリが施した構成変更を取り込むのもsyncのビルドでできますが、
	syncはアプリのビルドの最初に必ず実行されるように依存関係を指定して
	ありますから、特に何もしなくても構いません。

6. 配布ファイル
	cmake関連で配布されるファイルは、
	    CMakeLists.txt.Lib.dist	… Springhead library 開発/構築用
	    CMakeLists.txt.Dev.dist
		… Application program を使用した Springhead library 開発用
	    CMakeTopdir.txt.dist	… Springhead トップディレクトリ指定用
	    CMakeOpts.txt.dist		… Compile/Link オプション指定用
	    CMakeConf.txt.dist		… 外部 package 指定 / Install 場所指定用
	です。
	配布されるファイルはすべて雛形ファイルなので、これらを編集してコミット
	しないようにお願いします。
	各ファイルはテキストファイルで、文字('#')で始まる行はコメント行です。
	パラメータはset文で定義します。
	    set(変数名 値)
	値がファイルパスのときは"絶対パス"で指定してください。
	またパスセパレータには文字('/')を使用してください(escape問題の回避)。

6.1 Springhead libraryを構築する場合

6.1.1 準備
	配布された次のファイルを<SrpSrc>ディレクトリ内でコピーします
	（名称を変更することに注意）。
	-------------------------------------------------------------------
	  条件		  <SprSrc>			  <SprSrc>
	-------------------------------------------------------------------
	  必ず		CMakeLists.txt.Lib.dist		CMakeLists.txt
	  (*1)		CMakeOpts.txt.dist		CMakeOpts.txt
	  (*2)		CMakeConf.txt.dist		CMakeConf.txt
	-------------------------------------------------------------------
	  (*1) ビルドオプションを変更する場合
	  (*2) <SprTop>/dependencyを使わない場合

6.1.2 設定の変更
	ビルドオプションを変更する場合には"CMakeOpts.txt"を、外部パッケージを
	使用する場合及びInstall先を設定する場合には"CMakeConf.txt"を適宜編集します
	 (編集方法は各ファイルを参照してください）。

6.1.3 cmake-configure（ソリューションファイルの生成）
	cmake-configureは<SprSrc>で実行します（ここにCMakeLists.txtがある）。
	2. cmake-configureを参照のこと（ただし<AppSrc>を<SprSrc>と読み替えること）。

	なお、cmake変数（CMake*.txtの中でset(var ...)で設定されたもの）は
	キャッシュされているようです。したがって、単にset(var ...)を
	コメントアウトした場合、cmake 起動時に指定していたオプション
	（-D OPTS=..., -D CONF=...）（後述）を止める場合などは、
	キャッシュを無効にするために<BldDir>を一度削除する必要があります。

6.2 Springheadを利用するアプリを開発する場合

6.2.1 準備
	配布された次のファイルを<SrpSrc>から<AppSrc>にコピーします
	（名称を変更することに注意）。
	-------------------------------------------------------------------
	  条件		  <SprSrc>			  <AppSrc>
	-------------------------------------------------------------------
	  必ず		CMakeLists.txt.Dev.dist		CMakeLists.txt
	  必ず		CMakeTopdir.txt.dist		CMakeTopdir.txt
	  (*1)		CMakeOpts.txt.dist		CMakeOpts.txt
	  (*2)		CMakeConf.txt.dist		CMakeConf.txt
	-------------------------------------------------------------------
	  (*1) ビルドオプションを変更する場合
	  (*2) <SprTop>/dependencyを使わない場合

6.2.2 設定の変更
	アプリケーションにSpringhead libraryのソースツリーがある場所を教える
	ために、CMakeTopdir.txtを編集します（変数TOPDIRを適切に指定してください）。
	その他のファイルについては6.1.2を参照のこと。

6.2.3 cmake-configure（ソリューションファイルの生成）
	2. cmake-configureを参照のこと。

	なお、cmake変数（CMake*.txtの中でset(var ...)で設定されたもの）は
	キャッシュされているようです。したがって、単にset(var ...)を
	コメントアウトした場合、cmake 起動時に指定していたオプション
	（-D OPTS=..., -D CONF=...）（後述）を止める場合などは、
	キャッシュを無効にするために<BldDir>を一度削除する必要があります。

以上
